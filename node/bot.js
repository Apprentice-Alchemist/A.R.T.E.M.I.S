// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["com"] = $hx_exports["com"] || {};
$hx_exports["com"]["raidandfade"] = $hx_exports["com"]["raidandfade"] || {};
$hx_exports["com"]["raidandfade"]["haxicord"] = $hx_exports["com"]["raidandfade"]["haxicord"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Bot = function() { };
Bot.__name__ = true;
Bot.main = function() {
	Bot.startTime = new Date();
	Bot.bot = new com_raidandfade_haxicord_DiscordClient(Bot.getToken());
	Bot.bot.onReady = Bot.onReady;
	Bot.bot.onMessage = MessageHandler.handle;
	Bot.bot.onGuildCreate = function(g) {
	};
	Bot.bot.onMemberJoin = Bot.onMemberJoin;
	services_Modio.init();
	Bot.onDelay();
};
Bot.onDelay = function() {
	haxe_Log.trace(services_Modio.getMods(),{ fileName : "Source/Bot.hx", lineNumber : 26, className : "Bot", methodName : "onDelay"});
	haxe_Timer.delay(Bot.onDelay,10000);
};
Bot.onReady = function() {
	haxe_Log.trace("My invite link is: " + Bot.bot.getInviteLink(),{ fileName : "Source/Bot.hx", lineNumber : 30, className : "Bot", methodName : "onReady"});
	haxe_Log.trace(new Date().getTime() - Bot.startTime.getTime(),{ fileName : "Source/Bot.hx", lineNumber : 31, className : "Bot", methodName : "onReady"});
	BotError.sendErrors();
};
Bot.onMemberJoin = function(g,m) {
};
Bot.getToken = function() {
	if(JsonHandler.canRead("auth.json")) {
		return JsonHandler.read("auth.json").token;
	} else {
		return process.env["token"].toString();
	}
};
Bot.getModioKey = function() {
	if(JsonHandler.canRead("auth.json")) {
		return JsonHandler.read("auth.json").modio_key;
	} else {
		return process.env["modio_key"].toString();
	}
};
var BotError = function(message,critical) {
	if(critical == null) {
		critical = false;
	}
	this.error = message;
	BotError.error_map.push(this);
	BotError.sendErrors();
};
BotError.__name__ = true;
BotError.sendErrors = function() {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = BotError.error_map;
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		b.b += Std.string(o.error);
	}
	Bot.bot.sendMessage("639182974931435550",{ content : b.b});
	b = null;
};
BotError.prototype = {
	__class__: BotError
};
var CommandHandler = function() { };
CommandHandler.__name__ = true;
CommandHandler.init = function(_bot) {
	CommandHandler.has_init = true;
	CommandHandler.bot = _bot;
	CommandHandler.addCommand("help",new commands_Help());
	CommandHandler.addCommand("kick",new commands_Kick());
};
CommandHandler.addCommand = function(cname,cclass) {
	if(!CommandHandler.has_init) {
		CommandHandler.init(Bot.bot);
	}
	cname = cname.toLowerCase();
	var _this = CommandHandler.commands;
	if(__map_reserved[cname] != null ? _this.existsReserved(cname) : _this.h.hasOwnProperty(cname)) {
		throw new js__$Boot_HaxeError("Command " + cname + " set twice");
	}
	var _this1 = CommandHandler.commands;
	if(__map_reserved[cname] != null) {
		_this1.setReserved(cname,cclass);
	} else {
		_this1.h[cname] = cclass;
	}
};
CommandHandler.getCommands = function() {
	if(!CommandHandler.has_init) {
		CommandHandler.init(Bot.bot);
	}
	return CommandHandler.commands;
};
CommandHandler.handle = function(m) {
	if(!CommandHandler.has_init) {
		CommandHandler.init(Bot.bot);
	}
	if(m.content.substring(0,Bot.prefix.length) == Bot.prefix) {
		var coms = CommandHandler.commands.keys();
		while(coms.hasNext()) {
			var coms1 = coms.next();
			if(HxOverrides.substr(m.content,Bot.prefix.length,coms1.length) == coms1) {
				var _this = CommandHandler.commands;
				(__map_reserved[coms1] != null ? _this.getReserved(coms1) : _this.h[coms1]).call(m,CommandHandler.bot);
				return;
			}
		}
		m.reply({ content : "No command found : " + HxOverrides.substr(m.content,Bot.prefix.length,m.content.indexOf(" "))});
		return;
	}
};
CommandHandler.parseArgs = function(m,n) {
	var tmp = HxOverrides.substr(m.content,m.content.indexOf(" "),null);
	var args = tmp.split("\" \"");
	return args;
};
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len1 = f.length - p;
	r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
IntIterator.__name__ = true;
IntIterator.prototype = {
	hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var JsonHandler = function() { };
JsonHandler.__name__ = true;
JsonHandler.canRead = function(file) {
	return sys_FileSystem.exists(file);
};
JsonHandler.read = function(file) {
	var content = null;
	if(JsonHandler.canRead(file)) {
		try {
			content = JSON.parse(js_node_Fs.readFileSync(file,{ encoding : "utf8"}));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "Source/JsonHandler.hx", lineNumber : 18, className : "JsonHandler", methodName : "read"});
		}
	}
	return content;
};
JsonHandler.write = function(file,s) {
	var content = JSON.stringify(s);
	if(!sys_FileSystem.exists(file)) {
		return false;
	}
	try {
		js_node_Fs.writeFileSync(file,content);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "Source/JsonHandler.hx", lineNumber : 37, className : "JsonHandler", methodName : "write"});
		return false;
	}
	return true;
};
Math.__name__ = true;
var MessageHandler = function(_bot) {
	this.bot = _bot;
};
MessageHandler.__name__ = true;
MessageHandler.handle = function(m) {
	if(m.content.substring(0,Bot.prefix.length) == Bot.prefix) {
		CommandHandler.handle(m);
		return;
	} else {
		return;
	}
};
MessageHandler.handleMessage = function(m) {
	var content = m.content;
	if(content.toLowerCase().indexOf("good bot") != -1) {
		m.reply({ content : "Thanks, I do my best!"});
		haxe_Log.trace("message handled",{ fileName : "Source/MessageHandler.hx", lineNumber : 26, className : "MessageHandler", methodName : "handleMessage"});
		return true;
	} else if(content.toLowerCase().indexOf("bad bot") != -1) {
		m.reply({ content : "Sorry, I'll do better next time."});
		haxe_Log.trace("message handled",{ fileName : "Source/MessageHandler.hx", lineNumber : 30, className : "MessageHandler", methodName : "handleMessage"});
		return true;
	} else if(m.mentions.lastIndexOf(Bot.bot.user) != null) {
		m.reply({ content : "Hello, did you call me? If you want to know what I can do type `]help`!"});
		return true;
	}
	haxe_Log.trace("message handled",{ fileName : "Source/MessageHandler.hx", lineNumber : 36, className : "MessageHandler", methodName : "handleMessage"});
	return false;
};
MessageHandler.prototype = {
	__class__: MessageHandler
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var com_raidandfade_haxicord_DiscordClient = $hx_exports["com"]["raidandfade"]["haxicord"]["DiscordClient"] = function(_tkn,_shardInfo,_etf,_zlib,_storage) {
	if(_zlib == null) {
		_zlib = true;
	}
	if(_etf == null) {
		_etf = false;
	}
	this.etfFormat = false;
	this.zlibCompress = false;
	this.reconnectTimeout = 1;
	this.resumeable = false;
	this.ready = false;
	com_raidandfade_haxicord_logger_Logger.registerLogger();
	this.token = _tkn;
	this.isBot = true;
	this.endpoints = new com_raidandfade_haxicord_endpoints_Endpoints(this);
	this.zlibCompress = _zlib;
	this.etfFormat = _etf;
	if(this.etfFormat) {
		throw new js__$Boot_HaxeError("ETF is not yet supported. set _etf to false");
	}
	if(_shardInfo != null) {
		this.shardInfo = _shardInfo;
	}
	if(_storage == null) {
		this.dataCache = new com_raidandfade_haxicord_cachehandler_MemoryCache();
	} else {
		this.dataCache = _storage;
	}
	haxe_Log.trace("Starting Client",{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 149, className : "com.raidandfade.haxicord.DiscordClient", methodName : "new"});
	this.endpoints.getGateway(this.isBot,$bind(this,this.connect));
	haxe_MainLoop.add($bind(this,this.tick));
};
com_raidandfade_haxicord_DiscordClient.__name__ = true;
com_raidandfade_haxicord_DiscordClient.prototype = {
	tick: function() {
	}
	,start: function() {
	}
	,connect: function(gateway,error) {
		var _gthis = this;
		try {
			haxe_Log.trace("Connecting",{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 170, className : "com.raidandfade.haxicord.DiscordClient", methodName : "connect"});
			if(error != null) {
				throw js__$Boot_HaxeError.wrap(error);
			}
			var url = gateway.url + "/?v=" + com_raidandfade_haxicord_DiscordClient.gatewayVersion;
			if(this.etfFormat) {
				url += "&encoding=etf";
			} else {
				url += "&encoding=json";
			}
			if(this.zlibCompress) {
				url += "&compress=zlib-stream";
			}
			this.ws = new com_raidandfade_haxicord_websocket_WebSocketConnection(url);
			this.ws.onMessage = $bind(this,this.webSocketMessage);
			this.ws.onClose = function(m) {
				if(_gthis.hbThread != null) {
					_gthis.hbThread.stop();
				}
				if(m == 4006) {
					_gthis.session = "";
				}
				if(_gthis.session == "") {
					_gthis.resumeable = false;
				}
				haxe_Log.trace("Socket Closed with code " + m + ", Re-Opening in " + _gthis.reconnectTimeout + "s. " + (_gthis.resumeable ? "Resuming" : ""),{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 201, className : "com.raidandfade.haxicord.DiscordClient", methodName : "connect"});
				_gthis.session = "";
				_gthis.resumeable = false;
				Bot.bot = null;
				haxe_Timer.delay(Bot.main,100);
			};
			this.ws.onError = function(e) {
				_gthis.resumeable = false;
				haxe_Log.trace("Websocket errored!",{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 214, className : "com.raidandfade.haxicord.DiscordClient", methodName : "connect"});
				haxe_Log.trace(e,{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 215, className : "com.raidandfade.haxicord.DiscordClient", methodName : "connect"});
			};
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			haxe_Log.trace(((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1,{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 218, className : "com.raidandfade.haxicord.DiscordClient", methodName : "connect"});
		}
	}
	,sendWs: function(d) {
		this.ws.sendJson(d);
	}
	,webSocketMessage: function(msg) {
		var f = $bind(this,this.handleWebSocketMessage);
		var msg1 = msg;
		haxe_MainLoop.runInMainThread(function() {
			f(msg1);
		});
	}
	,handleWebSocketMessage: function(msg) {
		var m = JSON.parse(msg);
		try {
			switch(m.op) {
			case 0:
				this.receiveEvent(m);
				break;
			case 9:
				haxe_Log.trace("Session was invalidated, killing.",{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 254, className : "com.raidandfade.haxicord.DiscordClient", methodName : "handleWebSocketMessage"});
				this.resumeable = !m.d;
				this.ws.close();
				break;
			case 10:
				var seq = 0;
				if(this.hbThread != null) {
					seq = this.hbThread.getSeq();
				}
				if(this.resumeable) {
					this.sendWs(com_raidandfade_haxicord__$DiscordClient_WSPrepareData.Resume(this.token,this.session,seq));
				} else {
					this.sendWs(com_raidandfade_haxicord__$DiscordClient_WSPrepareData.Identify(this.token,this.shardInfo));
				}
				this.hbThread = new com_raidandfade_haxicord__$DiscordClient_HeartbeatThread(m.d.heartbeat_interval,this.ws,seq,this);
				break;
			case 11:
				this.ws_latency = Date.now() / 1000 - this.lastbeat;
				this.reconnectTimeout = 1;
				break;
			default:
			}
		} catch( er ) {
			haxe_CallStack.lastException = er;
			var er1 = ((er) instanceof js__$Boot_HaxeError) ? er.val : er;
			haxe_Log.trace("UNCAUGHT ERROR IN EVENT CALLBACK.",{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 263, className : "com.raidandfade.haxicord.DiscordClient", methodName : "handleWebSocketMessage"});
			haxe_Log.trace(Std.string(er1) + haxe_CallStack.toString(haxe_CallStack.exceptionStack()),{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 264, className : "com.raidandfade.haxicord.DiscordClient", methodName : "handleWebSocketMessage"});
		}
	}
	,receiveEvent: function(m) {
		var _gthis = this;
		var d = m.d;
		this.hbThread.setSeq(m.s);
		this.onRawEvent(m.t,d);
		switch(m.t) {
		case "CHANNEL_CREATE":
			this.onChannelCreate(this._newChannel(d));
			break;
		case "CHANNEL_DELETE":
			this.removeChannel(d);
			this.onChannelDelete(d);
			break;
		case "CHANNEL_PINS_UPDATE":
			break;
		case "CHANNEL_UPDATE":
			this.onChannelUpdate(this._newChannel(d));
			break;
		case "GUILD_BAN_ADD":
			var u = this.getUserUnsafe(d);
			var g = this.getGuildUnsafe(d.guild_id);
			g._addBan(u);
			this.onMemberBan(g,u);
			break;
		case "GUILD_BAN_REMOVE":
			var u1 = this.getUserUnsafe(d);
			var g1 = this.getGuildUnsafe(d.guild_id);
			g1._removeBan(u1);
			this.onMemberUnban(g1,u1);
			break;
		case "GUILD_CREATE":
			if(this.ready) {
				if(this.dataCache.getGuild(d.id) == null) {
					var g2 = this._newGuild(d);
					this.onGuildCreate(g2);
					this.onGuildJoin(g2);
				}
			} else {
				var g3 = this._newGuild(d);
				this.onGuildCreate(g3);
				var _g = [];
				var _g1 = 0;
				var _g2 = this.dataCache.getAllGuilds();
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v.unavailable) {
						_g.push(v);
					}
				}
				this.unavailableGuilds = _g.length;
				var done = this.unavailableGuilds == 0;
				if(done && !this.ready) {
					this.ready = true;
					this._onReady();
				}
			}
			break;
		case "GUILD_DELETE":
			this.onGuildLeave(this.getGuildUnsafe(d.id));
			this.onGuildDelete(d.id);
			this.removeGuild(d.id);
			break;
		case "GUILD_EMOJIS_UPDATE":
			var g4 = this.getGuildUnsafe(d.guild_id);
			g4._updateEmojis(d.emojis);
			this.onGuildEmojisUpdate(g4,d.emojis);
			break;
		case "GUILD_INTEGRATIONS_UPDATE":
			break;
		case "GUILD_MEMBERS_CHUNK":
			var members = d.members;
			var g5 = this.getGuildUnsafe(d.guild_id);
			var _g3 = 0;
			while(_g3 < members.length) {
				var m1 = members[_g3];
				++_g3;
				this.onMemberJoin(g5,g5._newMember(m1));
			}
			break;
		case "GUILD_MEMBER_ADD":
			var g6 = this.getGuildUnsafe(d.guild_id);
			this._newUser(d.user);
			this.onMemberJoin(g6,g6._newMember(d));
			break;
		case "GUILD_MEMBER_REMOVE":
			var g7 = this.getGuildUnsafe(d.guild_id);
			g7.members.remove(d.user.id);
			this.onMemberLeave(g7,this.getUserUnsafe(d.user.id));
			break;
		case "GUILD_MEMBER_UPDATE":
			var g8 = this.getGuildUnsafe(d.guild_id);
			this.onMemberUpdate(g8,g8._newMember(d));
			break;
		case "GUILD_ROLE_CREATE":
			var g9 = this.getGuildUnsafe(d.guild_id);
			this.onRoleCreate(g9,g9._newRole(d.role));
			break;
		case "GUILD_ROLE_DELETE":
			var g10 = this.getGuildUnsafe(d.guild_id);
			g10.roles.remove(d.role_id);
			this.onRoleDelete(g10,d.role_id);
			break;
		case "GUILD_ROLE_UPDATE":
			var g11 = this.getGuildUnsafe(d.guild_id);
			this.onRoleUpdate(g11,g11._newRole(d.role));
			break;
		case "GUILD_UPDATE":
			this.onGuildUpdate(this._newGuild(d));
			break;
		case "MESSAGE_CREATE":
			this.onMessage(this._newMessage(d));
			break;
		case "MESSAGE_DELETE":
			this.removeMessage(d);
			this.onMessageDelete(d);
			break;
		case "MESSAGE_DELETE_BULK":
			var msgs = d.ids;
			var _g4 = 0;
			while(_g4 < msgs.length) {
				var m2 = msgs[_g4];
				++_g4;
				this.removeMessage(m2);
				this.onMessageDelete(m2);
			}
			break;
		case "MESSAGE_REACTION_ADD":
			this.getMessage(d.message_id,d.channel_id,function(m3) {
				m3._addReaction(_gthis.getUserUnsafe(d.user_id),d.emoji);
				_gthis.onReactionAdd(m3,_gthis.getUserUnsafe(d.user_id),d.emoji);
			});
			break;
		case "MESSAGE_REACTION_REMOVE":
			this.getMessage(d.message_id,d.channel_id,function(m4) {
				m4._delReaction(_gthis.getUserUnsafe(d.user_id),d.emoji);
				_gthis.onReactionRemove(m4,_gthis.getUserUnsafe(d.user_id),d.emoji);
			});
			break;
		case "MESSAGE_REACTION_REMOVE_ALL":
			this.getMessage(d.message_id,d.channel_id,function(m5) {
				var _g5 = 0;
				var _g11 = m5.reactions;
				while(_g5 < _g11.length) {
					var r = _g11[_g5];
					++_g5;
					if(d.who != null) {
						_gthis.onReactionRemove(m5,_gthis.getUserUnsafe(d.who),d.emoji);
					} else {
						_gthis.onReactionRemove(m5,null,d.emoji);
					}
				}
				m5._purgeReactions();
			});
			break;
		case "MESSAGE_UPDATE":
			if(this.dataCache.getMessage(d.id) != null) {
				this.onMessageEdit(this._newMessage(d));
			}
			break;
		case "CHANNEL_PINS_ACK":case "PRESENCES_REPLACE":
			break;
		case "PRESENCE_UPDATE":
			var m6 = this.getGuildUnsafe(d.guild_id).getMemberUnsafe(d.user.id);
			if(m6 != null) {
				m6._updatePresence(d);
			}
			break;
		case "READY":
			var re = d;
			var _g6 = 0;
			var _g12 = re.guilds;
			while(_g6 < _g12.length) {
				var g12 = _g12[_g6];
				++_g6;
				this._newGuild(g12);
			}
			this.user = this._newUser(re.user);
			this.session = re.session_id;
			this.resumeable = true;
			var _g7 = [];
			var _g13 = 0;
			var _g21 = re.guilds;
			while(_g13 < _g21.length) {
				var v1 = _g21[_g13];
				++_g13;
				if(v1.unavailable) {
					_g7.push(v1);
				}
			}
			this.unavailableGuilds = _g7.length;
			if(re.guilds.length == 0) {
				this.ready = true;
				this._onReady();
			}
			break;
		case "RESUMED":
			this.ready = true;
			break;
		case "TYPING_START":
			try {
				this.onTypingStart(this.getUserUnsafe(d.user_id),this.getChannelUnsafe(d.channel_id),d.timestamp);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			}
			break;
		case "USER_UPDATE":
			break;
		case "VOICE_SERVER_UPDATE":
			break;
		case "VOICE_STATE_UPDATE":
			break;
		case "WEBHOOKS_UPDATE":
			break;
		default:
			haxe_Log.trace("Unhandled event " + m.t,{ fileName : "Source/com/raidandfade/haxicord/DiscordClient.hx", lineNumber : 433, className : "com.raidandfade.haxicord.DiscordClient", methodName : "receiveEvent"});
		}
	}
	,setStatus: function(status) {
		var msg = { "op" : 3, "d" : status};
		if(msg.d.status == null) {
			msg.d.status = this.user.presence.status;
		}
		if(msg.d.afk == null) {
			msg.d.afk = false;
		}
		if(msg.d.since == null) {
			msg.d.since = null;
		}
		if(msg.d.game == null) {
			msg.d.game = null;
		}
		this.sendWs(msg);
	}
	,setActivity: function(activity) {
		this.setStatus({ "game" : activity});
	}
	,getInviteLink: function(perms) {
		if(perms == null) {
			perms = 0;
		}
		var clid = this.user.id.id;
		var permstr = "";
		if(perms != 0) {
			permstr = "&perms=" + perms;
		}
		return "https://discordapp.com/api/oauth2/authorize?client_id=" + clid + "&scope=bot" + permstr;
	}
	,listVoiceRegions: function(cb) {
		this.endpoints.listVoiceRegions(cb);
	}
	,createGuild: function(guild_data,cb) {
		this.endpoints.createGuild(guild_data,cb);
	}
	,sendMessage: function(channel_id,message,cb) {
		var udmch = this.dataCache.getUserDMChannel(channel_id);
		if(udmch != null) {
			this.endpoints.sendMessage(udmch,message,cb);
		} else {
			var u = this.dataCache.getUser(channel_id);
			if(u != null) {
				this.endpoints.createDM({ recipient_id : channel_id},function(ch,e) {
					ch.sendMessage(message,cb);
				});
			} else {
				this.endpoints.sendMessage(channel_id,message,cb);
			}
		}
	}
	,getInvite: function(invite_code,cb) {
		this.endpoints.getInvite(invite_code,cb);
	}
	,joinInvite: function(invite_code,cb) {
		if(this.isBot) {
			return;
		}
		this.endpoints.acceptInvite(invite_code,cb);
	}
	,deleteInvite: function(invite_code,cb) {
		this.endpoints.deleteInvite(invite_code,cb);
	}
	,createDMGroup: function(data,cb) {
		this.endpoints.createGroupDM(data,cb);
	}
	,editUser: function(user_data,cb) {
		this.endpoints.editUser(user_data,cb);
	}
	,getGuilds: function(filter,cb) {
		this.endpoints.getGuilds(filter,cb);
	}
	,getConnections: function(cb) {
		this.endpoints.getConnections(cb);
	}
	,removeChannel: function(id) {
		var c = this.dataCache.getChannel(id);
		if(c != null && c.type != 1) {
			var gc = js_Boot.__cast(c , com_raidandfade_haxicord_types_GuildChannel);
			var g = gc.getGuild();
			if(gc.type == 0) {
				g.textChannels.remove(c.id.id);
			} else {
				g.voiceChannels.remove(c.id.id);
			}
		}
		this.dataCache.delChannel(id);
	}
	,removeMessage: function(id) {
		this.dataCache.delMessage(id);
	}
	,removeGuild: function(id) {
		this.dataCache.delGuild(id);
	}
	,removeUser: function(id) {
		this.dataCache.delUser(id);
	}
	,getGuild: function(id,cb) {
		var g = this.dataCache.getGuild(id);
		if(g != null) {
			cb(g);
		} else {
			this.endpoints.getGuild(id,function(r,e) {
				if(e != null) {
					throw new js__$Boot_HaxeError(e);
				}
				cb(r);
			});
		}
	}
	,getGuildUnsafe: function(id) {
		var g = this.dataCache.getGuild(id);
		if(g != null) {
			return g;
		} else {
			throw new js__$Boot_HaxeError("Guild not in cache. try loading it safely first!");
		}
	}
	,getDMChannels: function(cb) {
		this.endpoints.getDMChannels(function(r,e) {
			if(e != null) {
				throw js__$Boot_HaxeError.wrap(e);
			}
			cb(r);
		});
	}
	,getDMChannelsUnsafe: function() {
		return this.dataCache.getAllDMChannels();
	}
	,getChannel: function(id,cb) {
		var c = this.dataCache.getChannel(id);
		if(c != null) {
			cb(c);
		} else {
			this.endpoints.getChannel(id,function(r,e) {
				if(e != null) {
					throw js__$Boot_HaxeError.wrap(e);
				}
				cb(r);
			});
		}
	}
	,getChannelUnsafe: function(id) {
		var c = this.dataCache.getChannel(id);
		if(c != null) {
			return c;
		} else {
			c = this.dataCache.getDMChannel(id);
			if(c != null) {
				return c;
			} else {
				throw new js__$Boot_HaxeError("Channel not in cache. try loading it safely first!");
			}
		}
	}
	,getUser: function(id,cb) {
		var _gthis = this;
		var u = this.dataCache.getUser(id);
		if(u != null) {
			cb(u);
		} else {
			this.endpoints.getUser(id,function(r,e) {
				if(e != null) {
					throw js__$Boot_HaxeError.wrap(e);
				}
				_gthis.dataCache.setUser(id,r);
				cb(r);
			});
		}
	}
	,getUserUnsafe: function(id,partial) {
		if(partial == null) {
			partial = true;
		}
		var u = this.dataCache.getUser(id);
		if(u != null) {
			return u;
		} else if(partial) {
			var u1 = new com_raidandfade_haxicord_types_User(null,this);
			u1.id = new com_raidandfade_haxicord_types_Snowflake(id);
			return u1;
		} else {
			throw new js__$Boot_HaxeError("User not in cache. try loading it safely first!");
		}
	}
	,getMessage: function(id,channel_id,cb) {
		var m = this.dataCache.getMessage(id);
		if(m != null) {
			cb(m);
		} else {
			this.endpoints.getMessage(channel_id,id,function(r,e) {
				if(e != null) {
					throw js__$Boot_HaxeError.wrap(e);
				}
				cb(r);
			});
		}
	}
	,getMessageUnsafe: function(id) {
		var m = this.dataCache.getMessage(id);
		if(m != null) {
			return m;
		} else {
			throw new js__$Boot_HaxeError("Message not in cache. try loading it safely first!");
		}
	}
	,_newMessage: function(message_struct) {
		var id = message_struct.id;
		var m = this.dataCache.getMessage(id);
		if(m != null) {
			m._update(message_struct);
			return m;
		} else {
			var msg = new com_raidandfade_haxicord_types_Message(message_struct,this);
			this.dataCache.setMessage(id,msg);
			return msg;
		}
	}
	,_newUser: function(user_struct) {
		var id = user_struct.id;
		var u = this.dataCache.getUser(id);
		if(u != null) {
			u._update(user_struct);
			return u;
		} else {
			var user = new com_raidandfade_haxicord_types_User(user_struct,this);
			this.dataCache.setUser(id,user);
			return user;
		}
	}
	,_newChannel: function(channel_struct) {
		return (this.__newChannel(channel_struct))(channel_struct);
	}
	,__newChannel: function(channel_struct) {
		if(channel_struct.type == "text" || channel_struct.type == "voice") {
			channel_struct.type = channel_struct.type == "text" ? 0 : 2;
		}
		var id = channel_struct.id;
		if(channel_struct.type == 1) {
			return $bind(this,this._newDMChannel);
		}
		var chan = this.dataCache.getChannel(id);
		if(chan != null) {
			var c = js_Boot.__cast(chan , com_raidandfade_haxicord_types_GuildChannel);
			if(c.type == 0) {
				(js_Boot.__cast(chan , com_raidandfade_haxicord_types_TextChannel))._update(channel_struct);
			} else if(c.type == 2) {
				(js_Boot.__cast(chan , com_raidandfade_haxicord_types_VoiceChannel))._update(channel_struct);
			} else {
				(js_Boot.__cast(chan , com_raidandfade_haxicord_types_CategoryChannel))._update(channel_struct);
			}
			var f = function(c1,_) {
				return c1;
			};
			var c2 = c;
			return function(_1) {
				return f(c2,_1);
			};
		} else {
			var channel = (com_raidandfade_haxicord_types_Channel.fromStruct(channel_struct))(channel_struct,this);
			this.dataCache.setChannel(id,channel);
			var c3 = js_Boot.__cast(channel , com_raidandfade_haxicord_types_GuildChannel);
			try {
				this.getGuildUnsafe(c3.guild_id.id)._addChannel(c3);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			}
			return function(_2) {
				return channel;
			};
		}
	}
	,_newDMChannel: function(channel_struct) {
		var id = channel_struct.id;
		var dmch = this.dataCache.getDMChannel(id);
		if(dmch != null) {
			dmch._update(channel_struct);
			return dmch;
		} else {
			var channel = com_raidandfade_haxicord_types_DMChannel.fromStruct(channel_struct,this);
			this.dataCache.setDMChannel(id,channel);
			if(channel.recipient != null) {
				this.dataCache.setUserDMChannel(channel.recipient.id.id,id);
			} else if(channel.recipients != null && channel.recipients.length == 1) {
				this.dataCache.setUserDMChannel(channel.recipients[0].id.id,id);
			}
			return channel;
		}
	}
	,_newGuild: function(guild_struct) {
		var id = guild_struct.id;
		var g = this.dataCache.getGuild(id);
		if(g != null) {
			g._update(guild_struct);
			return g;
		} else {
			var guild = new com_raidandfade_haxicord_types_Guild(guild_struct,this);
			this.dataCache.setGuild(id,guild);
			return guild;
		}
	}
	,_onReady: function() {
		this.onReady();
	}
	,onReady: function() {
	}
	,onChannelCreate: function(c) {
	}
	,onChannelUpdate: function(c) {
	}
	,onChannelDelete: function(channel_id) {
	}
	,onGuildJoin: function(g) {
	}
	,onGuildLeave: function(g) {
	}
	,onGuildCreate: function(g) {
	}
	,onGuildUpdate: function(g) {
	}
	,onGuildDelete: function(guild_id) {
	}
	,onGuildEmojisUpdate: function(g,emojis) {
	}
	,onMemberJoin: function(g,m) {
	}
	,onMemberUpdate: function(g,m) {
	}
	,onMemberBan: function(g,u) {
	}
	,onMemberUnban: function(g,u) {
	}
	,onMemberLeave: function(g,u) {
	}
	,onRoleCreate: function(g,r) {
	}
	,onRoleUpdate: function(g,r) {
	}
	,onRoleDelete: function(g,role_id) {
	}
	,onMessage: function(m) {
	}
	,onMessageEdit: function(m) {
	}
	,onMessageDelete: function(message_id) {
	}
	,onReactionAdd: function(m,u,e) {
	}
	,onReactionRemove: function(m,u,e) {
	}
	,onReactionPurge: function(m) {
	}
	,onTypingStart: function(u,c,t) {
	}
	,onRawEvent: function(e,d) {
	}
	,__class__: com_raidandfade_haxicord_DiscordClient
};
var com_raidandfade_haxicord__$DiscordClient_WSPrepareData = function() { };
com_raidandfade_haxicord__$DiscordClient_WSPrepareData.__name__ = true;
com_raidandfade_haxicord__$DiscordClient_WSPrepareData.Identify = function(t,s,p,c,l) {
	if(l == null) {
		l = 59;
	}
	if(c == null) {
		c = false;
	}
	if(p == null) {
		p = { "$os" : "", "$browser" : com_raidandfade_haxicord_DiscordClient.libName, "$device" : com_raidandfade_haxicord_DiscordClient.libName, "$referrer" : "", "$referring_domain" : ""};
	}
	if(s == null) {
		s = [0,1];
	}
	return { "op" : 2, "d" : { "token" : t, "properties" : p, "compress" : c, "large_threshhold" : l, "shard" : s}};
};
com_raidandfade_haxicord__$DiscordClient_WSPrepareData.Resume = function(token,session_id,sequence) {
	return { "op" : 6, "d" : { "token" : token, "session_id" : session_id, "seq" : sequence}};
};
com_raidandfade_haxicord__$DiscordClient_WSPrepareData.Heartbeat = function(seq) {
	return { "op" : 1, "d" : seq};
};
var com_raidandfade_haxicord__$DiscordClient_HeartbeatThread = function(_d,_w,_s,_b) {
	this.delay = _d / 1000 - 2;
	this.ws = _w;
	this.seq = _s;
	this.cl = _b;
	var tmp = Date.now();
	this.cl.lastbeat = tmp / 1000;
	this.going = true;
	haxe_MainLoop.addThread($bind(this,this.beat));
};
com_raidandfade_haxicord__$DiscordClient_HeartbeatThread.__name__ = true;
com_raidandfade_haxicord__$DiscordClient_HeartbeatThread.prototype = {
	setSeq: function(_s) {
		this.seq = _s;
	}
	,getSeq: function() {
		return this.seq;
	}
	,beat: function() {
		if(Date.now() / 1000 - this.cl.lastbeat >= this.delay) {
			var tmp = Date.now();
			this.cl.lastbeat = tmp / 1000;
			this.ws.sendJson(com_raidandfade_haxicord__$DiscordClient_WSPrepareData.Heartbeat(this.seq));
		}
		haxe_Timer.delay($bind(this,this.beat),500);
	}
	,stop: function() {
		this.going = false;
	}
	,__class__: com_raidandfade_haxicord__$DiscordClient_HeartbeatThread
};
var com_raidandfade_haxicord_cachehandler_CacheMap = function(maxlen) {
	this.data = new haxe_ds_StringMap();
	this.idx = [];
	this.maxlen = maxlen;
	if(this.maxlen == 0) {
		this.idx = null;
	}
};
com_raidandfade_haxicord_cachehandler_CacheMap.__name__ = true;
com_raidandfade_haxicord_cachehandler_CacheMap.prototype = {
	set: function(id,val) {
		while(this.idx != null && this.idx.length > this.maxlen) {
			var oid = this.idx.shift();
			this.data.remove(oid);
		}
		if(this.idx != null) {
			var _this = this.data;
			if(!(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id))) {
				this.idx.push(id);
				var _this1 = this.data;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,val);
				} else {
					_this1.h[id] = val;
				}
			}
		} else {
			var _this2 = this.data;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,val);
			} else {
				_this2.h[id] = val;
			}
		}
	}
	,get: function(id) {
		var _this = this.data;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,remove: function(id) {
		if(this.data.remove(id)) {
			if(this.idx != null) {
				HxOverrides.remove(this.idx,id);
			}
		}
	}
	,iterator: function() {
		var _this = this.data;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,__class__: com_raidandfade_haxicord_cachehandler_CacheMap
};
var com_raidandfade_haxicord_cachehandler_DataCache = function() { };
com_raidandfade_haxicord_cachehandler_DataCache.__name__ = true;
com_raidandfade_haxicord_cachehandler_DataCache.__isInterface__ = true;
com_raidandfade_haxicord_cachehandler_DataCache.prototype = {
	__class__: com_raidandfade_haxicord_cachehandler_DataCache
};
var com_raidandfade_haxicord_cachehandler_MemoryCache = function() {
	this.userDMChannels = new haxe_ds_StringMap();
	this.guildCache = new com_raidandfade_haxicord_cachehandler_CacheMap(2500);
	this.dmChannelCache = new com_raidandfade_haxicord_cachehandler_CacheMap(0);
	this.channelCache = new com_raidandfade_haxicord_cachehandler_CacheMap(0);
	this.userCache = new com_raidandfade_haxicord_cachehandler_CacheMap(0);
	this.messageCache = new com_raidandfade_haxicord_cachehandler_CacheMap(5000);
};
com_raidandfade_haxicord_cachehandler_MemoryCache.__name__ = true;
com_raidandfade_haxicord_cachehandler_MemoryCache.__interfaces__ = [com_raidandfade_haxicord_cachehandler_DataCache];
com_raidandfade_haxicord_cachehandler_MemoryCache.prototype = {
	setMessage: function(id,m) {
		this.messageCache.set(id,m);
	}
	,setUser: function(id,u) {
		this.userCache.set(id,u);
	}
	,setChannel: function(id,ch) {
		this.channelCache.set(id,ch);
	}
	,setDMChannel: function(id,dmch) {
		this.dmChannelCache.set(id,dmch);
	}
	,setGuild: function(id,g) {
		this.guildCache.set(id,g);
	}
	,setUserDMChannel: function(id,dmchid) {
		var _this = this.userDMChannels;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,dmchid);
		} else {
			_this.h[id] = dmchid;
		}
	}
	,delMessage: function(id) {
		this.messageCache.remove(id);
	}
	,delUser: function(id) {
		this.userCache.remove(id);
	}
	,delChannel: function(id) {
		this.channelCache.remove(id);
	}
	,delDMChannel: function(id) {
		this.dmChannelCache.remove(id);
	}
	,delGuild: function(id) {
		this.guildCache.remove(id);
	}
	,delUserDMChannel: function(id) {
		this.userDMChannels.remove(id);
	}
	,getMessage: function(id) {
		return this.messageCache.get(id);
	}
	,getUser: function(id) {
		return this.userCache.get(id);
	}
	,getChannel: function(id) {
		return this.channelCache.get(id);
	}
	,getDMChannel: function(id) {
		return this.dmChannelCache.get(id);
	}
	,getGuild: function(id) {
		return this.guildCache.get(id);
	}
	,getUserDMChannel: function(id) {
		var _this = this.userDMChannels;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getAllDMChannels: function() {
		var _g = [];
		var dm = this.dmChannelCache.iterator();
		while(dm.hasNext()) {
			var dm1 = dm.next();
			_g.push(dm1);
		}
		return _g;
	}
	,getAllGuilds: function() {
		var _g = [];
		var g = this.guildCache.iterator();
		while(g.hasNext()) {
			var g1 = g.next();
			_g.push(g1);
		}
		return _g;
	}
	,__class__: com_raidandfade_haxicord_cachehandler_MemoryCache
};
var com_raidandfade_haxicord_endpoints_Endpoints = function(_c) {
	this.globalQueue = [];
	this.limitedQueue = new haxe_ds_StringMap();
	this.rateLimitCache = new haxe_ds_StringMap();
	this.globalLocked = false;
	this.client = _c;
};
com_raidandfade_haxicord_endpoints_Endpoints.__name__ = true;
com_raidandfade_haxicord_endpoints_Endpoints.prototype = {
	getGateway: function(bot,cb) {
		if(bot == null) {
			bot = false;
		}
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/gateway" + (bot ? "/bot" : ""),[]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,getChannel: function(channel_id,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}",[channel_id]);
		this.callEndpoint("GET",endpoint,function(ch,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client._newChannel(ch);
				cb(tmp,null);
			}
		});
	}
	,createChannel: function(guild_id,channel_data,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/channels",[guild_id]);
		this.callEndpoint("POST",endpoint,cb,channel_data);
	}
	,modifyChannel: function(channel_id,channel_data,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}",[channel_id]);
		this.callEndpoint("PATCH",endpoint,function(ch,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client._newChannel(ch);
				cb(tmp,null);
			}
		},channel_data);
	}
	,deleteChannel: function(channel_id,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}",[channel_id]);
		this.callEndpoint("DELETE",endpoint,function(ch,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client._newChannel(ch);
				cb(tmp,null);
			}
		});
	}
	,editChannelPermissions: function(channel_id,overwrite_id,new_permission,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/permissions/{1}",[channel_id,overwrite_id]);
		this.callEndpoint("PUT",endpoint,cb,new_permission);
	}
	,deleteChannelPermission: function(channel_id,overwrite_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/permissions/{1}",[channel_id,overwrite_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,getChannelInvites: function(channel_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/invites",[channel_id]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,createChannelInvite: function(channel_id,invite,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/invites",[channel_id]);
		this.callEndpoint("POST",endpoint,cb,invite);
	}
	,getChannelPins: function(channel_id,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/pins",[channel_id]);
		this.callEndpoint("GET",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < r.length) {
					var m = r[_g1];
					++_g1;
					_g.push(_gthis.client._newMessage(m));
				}
				var msgs = _g;
				cb(msgs,null);
			}
		});
	}
	,addChannelPin: function(channel_id,message_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/pins/{1}",[channel_id,message_id]);
		this.callEndpoint("PUT",endpoint,cb,"");
	}
	,deleteChannelPin: function(channel_id,message_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/pins/{1}",[channel_id,message_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,groupDMAddRecipient: function(channel_id,user_id,access_token,nick,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/recipients/{1}",[channel_id,user_id]);
		this.callEndpoint("PUT",endpoint,cb,{ "access_token" : access_token, "nick" : nick});
	}
	,groupDMRemoveRecipient: function(channel_id,user_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/recipients/{1}",[channel_id,user_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,getMessages: function(channel_id,format,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages{1}",[channel_id,com_raidandfade_haxicord_utils_Https.queryString(format)]);
		this.callEndpoint("GET",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < r.length) {
					var m = r[_g1];
					++_g1;
					_g.push(_gthis.client._newMessage(m));
				}
				var msgs = _g;
				cb(msgs,null);
			}
		});
	}
	,getMessage: function(channel_id,message_id,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages/{1}",[channel_id,message_id]);
		this.callEndpoint("GET",endpoint,function(m,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client._newMessage(m);
				cb(tmp,null);
			}
		});
	}
	,sendMessage: function(channel_id,message,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages",[channel_id]);
		this.callEndpoint("POST",endpoint,function(m,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client._newMessage(m);
				cb(tmp,null);
			}
		},message);
	}
	,startTyping: function(channel_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/typing",[channel_id]);
		this.callEndpoint("POST",endpoint,cb,{ });
	}
	,editMessage: function(channel_id,message_id,message,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages/{1}",[channel_id,message_id]);
		this.callEndpoint("PATCH",endpoint,function(m,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client._newMessage(m);
				cb(tmp,null);
			}
		},message);
	}
	,deleteMessage: function(channel_id,message_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages/{1}",[channel_id,message_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,deleteMessages: function(channel_id,message_ids,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages/bulk-delete",[channel_id]);
		this.callEndpoint("POST",endpoint,cb,message_ids);
	}
	,createReaction: function(channel_id,message_id,emoji,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages/{1}/reactions/{2}/@me",[channel_id,message_id,emoji]);
		this.callEndpoint("PUT",endpoint,cb);
	}
	,deleteOwnReaction: function(channel_id,message_id,emoji,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages/{1}/reactions/{2}/@me",[channel_id,message_id,emoji]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,deleteUserReaction: function(channel_id,message_id,user_id,emoji,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages/{1}/reactions/{2}/{3}",[channel_id,message_id,emoji,user_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,getReactions: function(channel_id,message_id,emoji,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages/{1}/reactions/{2}",[channel_id,message_id,emoji]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,listEmojis: function(guild_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/emojis",[guild_id]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,getEmoji: function(guild_id,emoji_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/emojis/{1}",[guild_id,emoji_id]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,createEmoji: function(guild_id,emoji,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/emojis",[guild_id]);
		this.callEndpoint("POST",endpoint,cb,emoji);
	}
	,modifyEmoji: function(guild_id,emoji_id,emoji,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/emojis/{1}",[guild_id,emoji_id]);
		this.callEndpoint("PATCH",endpoint,cb,emoji);
	}
	,removeEmoji: function(guild_id,emoji_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/emojis/{1}",[guild_id,emoji_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,deleteAllReactions: function(channel_id,message_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/messages/{1}/reactions",[channel_id,message_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,createGuild: function(guild_data,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds",[]);
		this.callEndpoint("POST",endpoint,function(g,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client._newGuild(g);
				cb(tmp,null);
			}
		},guild_data);
	}
	,getGuild: function(guild_id,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}",[guild_id]);
		this.callEndpoint("GET",endpoint,function(g,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client._newGuild(g);
				cb(tmp,null);
			}
		});
	}
	,getAuditLogs: function(guild_id,filter,cb) {
		if(filter == null) {
			filter = { };
		}
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/audit-logs{1}",[guild_id,com_raidandfade_haxicord_utils_Https.queryString(filter)]);
		this.callEndpoint("GET",endpoint,function(al,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				cb(al,null);
			}
		});
	}
	,modifyGuild: function(guild_id,guild_data,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}",[guild_id]);
		this.callEndpoint("PATCH",endpoint,function(g,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client._newGuild(g);
				cb(tmp,null);
			}
		},guild_data);
	}
	,deleteGuild: function(guild_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}",[guild_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,getChannels: function(guild_id,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/channels",[guild_id]);
		this.callEndpoint("GET",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < r.length) {
					var c = r[_g1];
					++_g1;
					_g.push(_gthis.client._newChannel(c));
				}
				var channels = _g;
				cb(channels,null);
			}
		});
	}
	,moveChannel: function(guild_id,changes,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/channels",[guild_id]);
		this.callEndpoint("PATCH",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < r.length) {
					var c = r[_g1];
					++_g1;
					_g.push(_gthis.client._newChannel(c));
				}
				var channels = _g;
				cb(channels,null);
			}
		});
	}
	,getGuildMember: function(guild_id,user_id,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/members/{1}",[guild_id,user_id]);
		this.callEndpoint("GET",endpoint,function(gm,e) {
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client.getGuildUnsafe(guild_id)._newMember(gm);
				cb(tmp,null);
			}
		});
	}
	,getGuildMembers: function(guild_id,format,cb) {
		var _gthis = this;
		var endpoint = com_raidandfade_haxicord_utils_Https.queryString(format);
		var endpoint1 = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/members{1}",[guild_id,endpoint]);
		this.callEndpoint("GET",endpoint1,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < r.length) {
					var gm = r[_g1];
					++_g1;
					_g.push(_gthis.client.getGuildUnsafe(guild_id)._newMember(gm));
				}
				var members = _g;
				cb(members,null);
			}
		});
	}
	,addGuildMember: function(guild_id,user_id,member_data,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/members/{1}",[guild_id,user_id]);
		this.callEndpoint("PUT",endpoint,function(gm,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client.getGuildUnsafe(guild_id)._newMember(gm);
				cb(tmp,null);
			}
		},member_data);
	}
	,editGuildMember: function(guild_id,user_id,member_data,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/members/{1}",[guild_id,user_id]);
		this.callEndpoint("PATCH",endpoint,cb,member_data);
	}
	,changeNickname: function(guild_id,nickname,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/members/@me/nick",[guild_id]);
		this.callEndpoint("PATCH",endpoint,cb,{ nick : nickname});
	}
	,giveMemberRole: function(guild_id,user_id,role_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/members/{1}/roles/{2}",[guild_id,user_id,role_id]);
		this.callEndpoint("PUT",endpoint,cb,{ });
	}
	,takeMemberRole: function(guild_id,user_id,role_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/members/{1}/roles/{2}",[guild_id,user_id,role_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,kickMember: function(guild_id,user_id,reason,cb) {
		if(reason == null) {
			reason = "";
		}
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/members/{1}?reason={2}",[guild_id,user_id,reason]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,getGuildBans: function(guild_id,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/bans",[guild_id]);
		this.callEndpoint("GET",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < r.length) {
					var gm = r[_g1];
					++_g1;
					_g.push(_gthis.client._newUser(gm));
				}
				var users = _g;
				cb(users,null);
			}
		});
	}
	,banMember: function(guild_id,user_id,days,reason,cb) {
		if(reason == null) {
			reason = "";
		}
		if(days == null) {
			days = 7;
		}
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/bans/{1}?delete-message-days={2}&reason={3}",[guild_id,user_id,days == null ? "null" : "" + days,reason]);
		this.callEndpoint("PUT",endpoint,cb,{ });
	}
	,unbanMember: function(guild_id,user_id,reason,cb) {
		if(reason == null) {
			reason = "";
		}
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/bans/{1}",[guild_id,user_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,getGuildRoles: function(guild_id,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/roles",[guild_id]);
		this.callEndpoint("GET",endpoint,function(res,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < res.length) {
					var r = res[_g1];
					++_g1;
					_g.push(_gthis.client.getGuildUnsafe(guild_id)._newRole(r));
				}
				var roles = _g;
				cb(roles,null);
			}
		});
	}
	,createRole: function(guild_id,role_data,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/roles",[guild_id]);
		this.callEndpoint("POST",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client.getGuildUnsafe(guild_id)._newRole(r);
				cb(tmp,null);
			}
		},role_data);
	}
	,moveRole: function(guild_id,changes,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/roles",[guild_id]);
		this.callEndpoint("PATCH",endpoint,function(res,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < res.length) {
					var r = res[_g1];
					++_g1;
					_g.push(_gthis.client.getGuildUnsafe(guild_id)._newRole(r));
				}
				var roles = _g;
				cb(roles,null);
			}
		});
	}
	,editRole: function(guild_id,role_id,role_data,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/roles/{1}",[guild_id,role_id]);
		this.callEndpoint("PATCH",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var tmp = _gthis.client.getGuildUnsafe(guild_id);
				cb(new com_raidandfade_haxicord_types_Role(r,tmp,_gthis.client),null);
			}
		},role_data);
	}
	,deleteRole: function(guild_id,role_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/roles/{1}",[guild_id,role_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,getPruneCount: function(guild_id,days,cb) {
		if(days == null) {
			days = 1;
		}
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/prune{1}",[guild_id,com_raidandfade_haxicord_utils_Https.queryString({ days : days})]);
		this.callEndpoint("GET",endpoint,function(res,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(-1,e);
			} else {
				cb(res.pruned,null);
			}
		});
	}
	,beginPrune: function(guild_id,days,cb) {
		if(days == null) {
			days = 1;
		}
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/prune{1}",[guild_id,com_raidandfade_haxicord_utils_Https.queryString({ days : days})]);
		this.callEndpoint("POST",endpoint,function(res,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(-1,e);
			} else {
				cb(res.pruned,null);
			}
		});
	}
	,guildVoiceRegions: function(guild_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/regions",[guild_id]);
		this.callEndpoint("GET",endpoint,function(res,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				cb(res,null);
			}
		});
	}
	,getIntegrations: function(guild_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/integrations",[guild_id]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,addIntegration: function(guild_id,int_data,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/integrations",[guild_id]);
		this.callEndpoint("POST",endpoint,cb,int_data);
	}
	,editIntegration: function(guild_id,int_id,int_data,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/integrations/{1}",[guild_id,int_id]);
		this.callEndpoint("PATCH",endpoint,cb,int_data);
	}
	,deleteIntegration: function(guild_id,int_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/integrations/{1}",[guild_id,int_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,syncIntegration: function(guild_id,int_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/integrations/{1}/sync",[guild_id,int_id]);
		this.callEndpoint("POST",endpoint,cb);
	}
	,getWidget: function(guild_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/embed",[guild_id]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,modifyWidget: function(guild_id,edits,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/embed",[guild_id]);
		this.callEndpoint("PATCH",endpoint,cb,edits);
	}
	,getInvites: function(guild_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/invites",[guild_id]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,getInvite: function(invite_code,with_counts,cb) {
		if(with_counts == null) {
			with_counts = true;
		}
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/invite/{0}?with_counts={1}",[invite_code,with_counts ? "true" : "false"]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,deleteInvite: function(invite_code,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/invite/{0}",[invite_code]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,acceptInvite: function(invite_code,cb) {
		com_raidandfade_haxicord_logger_Logger.err("DEPRECATION WARNING: AcceptInvite is being removed march 23rd. Please use AddGuildMember instead.");
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/invite/{0}",[invite_code]);
		this.callEndpoint("POST",endpoint,cb);
	}
	,getUser: function(user_id,cb) {
		if(user_id == null) {
			user_id = "@me";
		}
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/users/{0}",[user_id]);
		this.callEndpoint("GET",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				cb(new com_raidandfade_haxicord_types_User(r,_gthis.client),null);
			}
		});
	}
	,editUser: function(user_data,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/users/@me",[]);
		this.callEndpoint("PATCH",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				cb(new com_raidandfade_haxicord_types_User(r,_gthis.client),null);
			}
		},user_data);
	}
	,getGuilds: function(filter,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/users/@me/guilds",[]);
		this.callEndpoint("GET",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < r.length) {
					var g = r[_g1];
					++_g1;
					_g.push(_gthis.client._newGuild(g));
				}
				var guilds = _g;
				cb(guilds,null);
			}
		});
	}
	,leaveGuild: function(guild_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/users/@me/guilds/{0}",[guild_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,getDMChannels: function(cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/users/@me/channels",[]);
		this.callEndpoint("GET",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var _g = [];
				var _g1 = 0;
				while(_g1 < r.length) {
					var c = r[_g1];
					++_g1;
					_g.push(_gthis.client._newDMChannel(c));
				}
				var channels = _g;
				cb(channels,null);
			}
		});
	}
	,createDM: function(data,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/users/@me/channels",[]);
		this.callEndpoint("POST",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var channels = _gthis.client._newDMChannel(r);
				cb(channels,null);
			}
		},data);
	}
	,createGroupDM: function(data,cb) {
		var _gthis = this;
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/users/@me/channels",[]);
		this.callEndpoint("POST",endpoint,function(r,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				var channels = _gthis.client._newDMChannel(r);
				cb(channels,null);
			}
		},data);
	}
	,getConnections: function(cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/users/@me/connections",[]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,listVoiceRegions: function(cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/voice/regions",[]);
		this.callEndpoint("GET",endpoint,function(res,e) {
			if(cb == null) {
				return;
			}
			if(e != null) {
				cb(null,e);
			} else {
				cb(res,null);
			}
		});
	}
	,createWebhook: function(channel_id,data,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/webhooks",[channel_id]);
		this.callEndpoint("POST",endpoint,cb,data);
	}
	,getChannelWebhooks: function(channel_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/channels/{0}/webhooks",[channel_id]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,getGuildWebhooks: function(guild_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/guilds/{0}/webhooks",[guild_id]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,getWebhook: function(webhook_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/webhooks/{0}",[webhook_id]);
		this.callEndpoint("GET",endpoint,cb);
	}
	,editWebhook: function(webhook_id,data,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/webhooks/{0}",[webhook_id]);
		this.callEndpoint("PATCH",endpoint,cb,data);
	}
	,deleteWebhook: function(webhook_id,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/webhooks/{0}",[webhook_id]);
		this.callEndpoint("DELETE",endpoint,cb);
	}
	,getWebhookWithToken: function(webhook_id,webhook_token,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/webhooks/{0}/{1}",[webhook_id,webhook_token]);
		this.callEndpoint("GET",endpoint,cb,{ },false);
	}
	,editWebhookWithToken: function(webhook_id,webhook_token,data,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/webhooks/{0}/{1}",[webhook_id,webhook_token]);
		this.callEndpoint("PATCH",endpoint,cb,data,false);
	}
	,deleteWebhookWithToken: function(webhook_id,webhook_token,cb) {
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/webhooks/{0}/{1}",[webhook_id,webhook_token]);
		this.callEndpoint("DELETE",endpoint,cb,{ },false);
	}
	,executeWebhook: function(webhook_id,webhook_token,data,wait,cb) {
		if(wait == null) {
			wait = false;
		}
		var endpoint = new com_raidandfade_haxicord_endpoints_EndpointPath("/webhooks/{0}/{1}?wait={2}",[webhook_id,webhook_token,wait ? "true" : "false"]);
		this.callEndpoint("POST",endpoint,cb,data,false);
	}
	,unQueueGlobally: function() {
		this.globalLocked = false;
		var _g = 0;
		var _g1 = this.globalQueue;
		while(_g < _g1.length) {
			var call = _g1[_g];
			++_g;
			this.callEndpoint(call.method,call.endpoint,call.callback,call.data,call.authorized);
		}
	}
	,callEndpoint: function(method,endpoint,callback,data,authorized) {
		if(authorized == null) {
			authorized = true;
		}
		var _gthis = this;
		var origCall = new com_raidandfade_haxicord_endpoints_EndpointCall(method,endpoint,callback,data,authorized);
		if(this.globalLocked) {
			this.globalQueue.push(origCall);
			return;
		}
		var rateLimitName = endpoint.getRoute();
		var _this = this.rateLimitCache;
		if(__map_reserved[rateLimitName] != null ? _this.existsReserved(rateLimitName) : _this.h.hasOwnProperty(rateLimitName)) {
			var _this1 = this.rateLimitCache;
			if((__map_reserved[rateLimitName] != null ? _this1.getReserved(rateLimitName) : _this1.h[rateLimitName]).remaining <= 0) {
				var _this2 = this.limitedQueue;
				if(__map_reserved[rateLimitName] != null ? _this2.existsReserved(rateLimitName) : _this2.h.hasOwnProperty(rateLimitName)) {
					var _this3 = this.limitedQueue;
					(__map_reserved[rateLimitName] != null ? _this3.getReserved(rateLimitName) : _this3.h[rateLimitName]).push(origCall);
				} else {
					var this1 = this.limitedQueue;
					var value = [];
					var _this4 = this1;
					if(__map_reserved[rateLimitName] != null) {
						_this4.setReserved(rateLimitName,value);
					} else {
						_this4.h[rateLimitName] = value;
					}
					var _this5 = this.limitedQueue;
					(__map_reserved[rateLimitName] != null ? _this5.getReserved(rateLimitName) : _this5.h[rateLimitName]).push(origCall);
				}
				return;
			} else {
				var _this6 = this.rateLimitCache;
				var tmp = __map_reserved[rateLimitName] != null ? _this6.getReserved(rateLimitName) : _this6.h[rateLimitName];
				tmp.remaining--;
			}
		} else {
			var this11 = this.rateLimitCache;
			var value1 = new com_raidandfade_haxicord_endpoints_RateLimit(1,0,-1);
			var _this7 = this11;
			if(__map_reserved[rateLimitName] != null) {
				_this7.setReserved(rateLimitName,value1);
			} else {
				_this7.h[rateLimitName] = value1;
			}
		}
		var popQueue = function(rateLimitName1) {
			var popQueue1;
			var _this8 = _gthis.limitedQueue;
			if(__map_reserved[rateLimitName1] != null ? _this8.existsReserved(rateLimitName1) : _this8.h.hasOwnProperty(rateLimitName1)) {
				var _this9 = _gthis.limitedQueue;
				popQueue1 = (__map_reserved[rateLimitName1] != null ? _this9.getReserved(rateLimitName1) : _this9.h[rateLimitName1]) != null;
			} else {
				popQueue1 = false;
			}
			if(popQueue1) {
				var _this10 = _gthis.limitedQueue;
				if((__map_reserved[rateLimitName1] != null ? _this10.getReserved(rateLimitName1) : _this10.h[rateLimitName1]).length > 0) {
					var _this11 = _gthis.limitedQueue;
					var _this12 = __map_reserved[rateLimitName1] != null ? _this11.getReserved(rateLimitName1) : _this11.h[rateLimitName1];
					var result = new Array(_this12.length);
					var _g = 0;
					var _g1 = _this12.length;
					while(_g < _g1) {
						var i = _g++;
						result[i] = _this12[i];
					}
					var arrCopy = result;
					var this12 = _gthis.limitedQueue;
					var value2 = [];
					var _this13 = this12;
					if(__map_reserved[rateLimitName1] != null) {
						_this13.setReserved(rateLimitName1,value2);
					} else {
						_this13.h[rateLimitName1] = value2;
					}
					var _g2 = 0;
					var _g11 = arrCopy.length;
					while(_g2 < _g11) {
						var calli = _g2++;
						var call = arrCopy[calli];
						_gthis.callEndpoint(call.method,call.endpoint,call.callback,call.data,call.authorized);
					}
				}
			}
		};
		var _callback = function(origCall1,data1,headers) {
			if(__map_reserved["x-ratelimit-global"] != null ? headers.existsReserved("x-ratelimit-global") : headers.h.hasOwnProperty("x-ratelimit-global")) {
				if((__map_reserved["x-ratelimit-global"] != null ? headers.getReserved("x-ratelimit-global") : headers.h["x-ratelimit-global"]) == "true") {
					_gthis.globalLocked = true;
					_gthis.globalQueue.push(origCall1);
					var _callback1 = __map_reserved["retry-after"] != null ? headers.getReserved("retry-after") : headers.h["retry-after"];
					_gthis.globalTimer = haxe_Timer.delay($bind(_gthis,_gthis.unQueueGlobally),Std.parseInt(_callback1));
					return;
				}
			}
			if(__map_reserved["x-ratelimit-reset"] != null ? headers.existsReserved("x-ratelimit-reset") : headers.h.hasOwnProperty("x-ratelimit-reset")) {
				var limit = Std.parseInt(__map_reserved["x-ratelimit-limit"] != null ? headers.getReserved("x-ratelimit-limit") : headers.h["x-ratelimit-limit"]);
				var remaining = Std.parseInt(__map_reserved["x-ratelimit-remaining"] != null ? headers.getReserved("x-ratelimit-remaining") : headers.h["x-ratelimit-remaining"]);
				var reset = parseFloat(__map_reserved["x-ratelimit-reset"] != null ? headers.getReserved("x-ratelimit-reset") : headers.h["x-ratelimit-reset"]);
				var this13 = _gthis.rateLimitCache;
				var value3 = new com_raidandfade_haxicord_endpoints_RateLimit(limit,remaining,reset);
				var _this14 = this13;
				if(__map_reserved[rateLimitName] != null) {
					_this14.setReserved(rateLimitName,value3);
				} else {
					_this14.h[rateLimitName] = value3;
				}
				if(remaining == 0) {
					var delay = (reset - new Date().getTime() / 1000 | 0) * 1000 + 500;
					var waitForLimit = function(rateLimitName2,rateLimit) {
						var this14 = _gthis.rateLimitCache;
						var value4 = new com_raidandfade_haxicord_endpoints_RateLimit(limit,limit,-1);
						var _this15 = this14;
						if(__map_reserved[rateLimitName2] != null) {
							_this15.setReserved(rateLimitName2,value4);
						} else {
							_this15.h[rateLimitName2] = value4;
						}
						popQueue(rateLimitName2);
					};
					var f = waitForLimit;
					var rateLimitName3 = rateLimitName;
					var _this16 = _gthis.rateLimitCache;
					var rateLimit1 = __map_reserved[rateLimitName] != null ? _this16.getReserved(rateLimitName) : _this16.h[rateLimitName];
					var f1 = function() {
						f(rateLimitName3,rateLimit1);
					};
					haxe_Timer.delay(f1,delay);
				}
				if(remaining != 0) {
					var _this17 = _gthis.limitedQueue;
					if(__map_reserved[rateLimitName] != null ? _this17.existsReserved(rateLimitName) : _this17.h.hasOwnProperty(rateLimitName)) {
						popQueue(rateLimitName);
					}
				}
			} else {
				var this15 = _gthis.rateLimitCache;
				var value5 = new com_raidandfade_haxicord_endpoints_RateLimit(50,50,-1);
				var _this18 = this15;
				if(__map_reserved[rateLimitName] != null) {
					_this18.setReserved(rateLimitName,value5);
				} else {
					_this18.h[rateLimitName] = value5;
				}
				popQueue(rateLimitName);
			}
			if(callback == null) {
				return;
			}
			if(data1.status < 200 || data1.status >= 300) {
				callback(null,{ error : data1.error, data : data1.data});
			} else {
				callback(data1.data,null);
			}
		};
		var path = endpoint.getPath();
		var f2 = _callback;
		var origCall2 = origCall;
		this.rawCallEndpoint(method,path,function(data2,headers1) {
			f2(origCall2,data2,headers1);
		},data,authorized);
		return;
	}
	,rawCallEndpoint: function(method,endpoint,callback,data,authorized) {
		if(authorized == null) {
			authorized = true;
		}
		var _gthis = this;
		if(callback == null) {
			callback = function(f,a) {
			};
		}
		var reqstart = Date.now() / 1000;
		var latency_cb = function(f1,a1) {
			var latency_cb1 = Date.now() / 1000;
			_gthis.client.api_latency = latency_cb1 - reqstart;
			callback(f1,a1);
		};
		method = method.toUpperCase();
		if(["GET","HEAD","POST","PUT","PATCH","DELETE","OPTIONS"].indexOf(method) == -1) {
			throw new js__$Boot_HaxeError("Invalid Method Request");
		}
		var url = com_raidandfade_haxicord_endpoints_Endpoints.BASEURL + "v" + com_raidandfade_haxicord_DiscordClient.gatewayVersion + endpoint;
		var token = "Bot " + this.client.token;
		var headers = new haxe_ds_StringMap();
		if(authorized) {
			if(__map_reserved["Authorization"] != null) {
				headers.setReserved("Authorization",token);
			} else {
				headers.h["Authorization"] = token;
			}
		}
		var value = com_raidandfade_haxicord_DiscordClient.userAgent;
		if(__map_reserved["User-Agent"] != null) {
			headers.setReserved("User-Agent",value);
		} else {
			headers.h["User-Agent"] = value;
		}
		if(__map_reserved["Content-Type"] != null) {
			headers.setReserved("Content-Type","application/json");
		} else {
			headers.h["Content-Type"] = "application/json";
		}
		if(["POST","PATCH"].indexOf(method) > -1 && data == null) {
			if(__map_reserved["Content-Length"] != null) {
				headers.setReserved("Content-Length","0");
			} else {
				headers.h["Content-Length"] = "0";
			}
		}
		try {
			com_raidandfade_haxicord_utils_Https.makeRequest(url,method,latency_cb,data,headers,false);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "com/raidandfade/haxicord/endpoints/Endpoints.hx", lineNumber : 1390, className : "com.raidandfade.haxicord.endpoints.Endpoints", methodName : "rawCallEndpoint"});
			haxe_Log.trace(haxe_CallStack.toString(haxe_CallStack.exceptionStack()),{ fileName : "com/raidandfade/haxicord/endpoints/Endpoints.hx", lineNumber : 1391, className : "com.raidandfade.haxicord.endpoints.Endpoints", methodName : "rawCallEndpoint"});
		}
	}
	,__class__: com_raidandfade_haxicord_endpoints_Endpoints
};
var com_raidandfade_haxicord_endpoints_RateLimit = function(_l,_rm,_rs) {
	this.limit = _l;
	this.remaining = _rm;
	this.reset = _rs;
};
com_raidandfade_haxicord_endpoints_RateLimit.__name__ = true;
com_raidandfade_haxicord_endpoints_RateLimit.prototype = {
	toString: function() {
		return "RateLimit(" + this.remaining + "/" + this.limit + " until " + this.reset + ")";
	}
	,__class__: com_raidandfade_haxicord_endpoints_RateLimit
};
var com_raidandfade_haxicord_endpoints_EndpointCall = function(_m,_e,_c,_d,_a) {
	if(_a == null) {
		_a = true;
	}
	this.method = _m;
	this.endpoint = _e;
	this.callback = _c;
	this.data = _d;
	this.authorized = _a;
};
com_raidandfade_haxicord_endpoints_EndpointCall.__name__ = true;
com_raidandfade_haxicord_endpoints_EndpointCall.prototype = {
	__class__: com_raidandfade_haxicord_endpoints_EndpointCall
};
var com_raidandfade_haxicord_endpoints_EndpointPath = function(_e,_d) {
	this.endpoint = _e;
	this.data = _d;
};
com_raidandfade_haxicord_endpoints_EndpointPath.__name__ = true;
com_raidandfade_haxicord_endpoints_EndpointPath.prototype = {
	getRoute: function() {
		var cur = this.endpoint;
		if(this.endpoint.charAt(1) == "c") {
			StringTools.replace(cur,"channels/{0}","channels/" + this.data[0]);
		}
		if(this.endpoint.charAt(1) == "g") {
			StringTools.replace(cur,"guilds/{0}","guilds/" + this.data[0]);
		}
		return cur;
	}
	,getPath: function() {
		var cur = this.endpoint;
		var _g = 0;
		var _g1 = this.data.length;
		while(_g < _g1) {
			var i = _g++;
			var s = this.data[i];
			var d = encodeURIComponent(s);
			cur = StringTools.replace(cur,"{" + i + "}",d);
		}
		return cur;
	}
	,__class__: com_raidandfade_haxicord_endpoints_EndpointPath
};
var com_raidandfade_haxicord_logger_Logger = function() { };
com_raidandfade_haxicord_logger_Logger.__name__ = true;
com_raidandfade_haxicord_logger_Logger.registerLogger = function() {
	com_raidandfade_haxicord_logger_Logger.origTrace = haxe_Log.trace;
	haxe_Log.trace = com_raidandfade_haxicord_logger_Logger.hxTrace;
};
com_raidandfade_haxicord_logger_Logger.unregisterLogger = function() {
	haxe_Log.trace = com_raidandfade_haxicord_logger_Logger.origTrace;
};
com_raidandfade_haxicord_logger_Logger.getReplaceColor = function(col) {
	return "";
};
com_raidandfade_haxicord_logger_Logger.hxTrace = function(v,infos) {
	var infostr = com_raidandfade_haxicord_logger_Logger.outPrefix.split("").join("");
	infostr = StringTools.replace(infostr,"%t",DateTools.format(new Date(),"%H:%M:%S"));
	var infostrt = infostr.split("").join("");
	var _g = 0;
	var _g1 = infostr.length - 2;
	while(_g < _g1) {
		var i = _g++;
		if(HxOverrides.substr(infostr,i,2) == "%c") {
			var ic = infostr.indexOf("}",i);
			var c = HxOverrides.substr(infostr,i + 3,ic - i - 3);
			infostrt = StringTools.replace(infostrt,infostr.substring(i,ic + 1),com_raidandfade_haxicord_logger_Logger.getReplaceColor(c));
		}
	}
	infostr = infostrt;
	try {
		if(infos != null) {
			infostr = StringTools.replace(infostr,"%fn",infos.methodName);
			infostr = StringTools.replace(infostr,"%l",infos.lineNumber == null ? "null" : "" + infos.lineNumber);
			infostr = StringTools.replace(infostr,"%f",infos.fileName);
			infostr = StringTools.replace(infostr,"%cn",HxOverrides.substr(infos.className,infos.className.lastIndexOf(".") + 1,null));
			infostr = StringTools.replace(infostr,"%cp",infos.className);
		} else {
			infostr = StringTools.replace(infostr,"<%fn","");
			infostr = StringTools.replace(infostr,":%l>","");
			infostr = StringTools.replace(infostr,"%f->","");
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	com_raidandfade_haxicord_logger_Logger.origTrace(infostr + Std.string(v),null);
};
com_raidandfade_haxicord_logger_Logger.out = function(s) {
	window.console.info(s);
};
com_raidandfade_haxicord_logger_Logger.err = function(s) {
	window.console.error(s);
};
var com_raidandfade_haxicord_types_Channel = function() { };
com_raidandfade_haxicord_types_Channel.__name__ = true;
com_raidandfade_haxicord_types_Channel.fromStruct = function(_chan) {
	if(_chan.type == 1) {
		return com_raidandfade_haxicord_types_DMChannel.fromStruct;
	} else {
		return com_raidandfade_haxicord_types_GuildChannel.fromStruct(_chan);
	}
};
com_raidandfade_haxicord_types_Channel.prototype = {
	getTag: function() {
		return "<#" + this.id.id + ">";
	}
	,getPermission: function(uid) {
		return 0;
	}
	,hasPermission: function(uid,p) {
		return false;
	}
	,__class__: com_raidandfade_haxicord_types_Channel
};
var com_raidandfade_haxicord_types_GuildChannel = function() { };
com_raidandfade_haxicord_types_GuildChannel.__name__ = true;
com_raidandfade_haxicord_types_GuildChannel.fromStruct = function(_chan) {
	if(_chan.type == 0) {
		return com_raidandfade_haxicord_types_TextChannel.fromStruct;
	}
	if(_chan.type == 2) {
		return com_raidandfade_haxicord_types_VoiceChannel.fromStruct;
	}
	if(_chan.type == 4) {
		return com_raidandfade_haxicord_types_CategoryChannel.fromStruct;
	}
	if(_chan.type == 5) {
		return com_raidandfade_haxicord_types_NewsChannel.fromStruct;
	}
	if(_chan.type == 6) {
		return com_raidandfade_haxicord_types_StoreChannel.fromStruct;
	}
	throw new js__$Boot_HaxeError("Invalid Struct");
};
com_raidandfade_haxicord_types_GuildChannel.__super__ = com_raidandfade_haxicord_types_Channel;
com_raidandfade_haxicord_types_GuildChannel.prototype = $extend(com_raidandfade_haxicord_types_Channel.prototype,{
	getGuild: function() {
		return this.client.getGuildUnsafe(this.guild_id.id);
	}
	,getInvites: function(cb) {
		this.client.endpoints.getChannelInvites(this.id.id,cb);
	}
	,createInvite: function(invite_data,cb) {
		this.client.endpoints.createChannelInvite(this.id.id,invite_data,cb);
	}
	,editChannel: function(cd,cb) {
		this.client.endpoints.modifyChannel(this.id.id,cd,cb);
	}
	,deleteChannel: function(cb) {
		this.client.endpoints.deleteChannel(this.id.id,cb);
	}
	,editPermission: function(perm,pid,cb) {
		this.client.endpoints.editChannelPermissions(this.id.id,pid,perm,cb);
	}
	,deletePermission: function(pid,cb) {
		this.client.endpoints.deleteChannelPermission(this.id.id,pid,cb);
	}
	,getPermission: function(uid) {
		var u = this.getGuild().getMemberUnsafe(uid);
		var p = u.getPermissions();
		var _g = 0;
		var _g1 = this.permission_overwrites;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if(x.type == com_raidandfade_haxicord_types_structs_OverwriteType.Member && x.id != uid) {
				continue;
			}
			if(x.type == com_raidandfade_haxicord_types_structs_OverwriteType.Role && u.roles.indexOf(x.id) == -1) {
				continue;
			}
			p |= x.allow;
			p &= -1 ^ x.deny;
		}
		return p;
	}
	,hasPermission: function(uid,dp) {
		return (this.getPermission(uid) & dp) == dp;
	}
	,__class__: com_raidandfade_haxicord_types_GuildChannel
});
var com_raidandfade_haxicord_types_CategoryChannel = function(_chan,_client) {
	this.client = _client;
	this.id = new com_raidandfade_haxicord_types_Snowflake(_chan.id);
	this.parent_id = new com_raidandfade_haxicord_types_Snowflake(_chan.parent_id);
	this.type = _chan.type;
	this.guild_id = new com_raidandfade_haxicord_types_Snowflake(_chan.guild_id);
	this.name = _chan.name;
	this.nsfw = _chan.nsfw;
	this.position = _chan.position;
	this.permission_overwrites = _chan.permission_overwrites;
};
com_raidandfade_haxicord_types_CategoryChannel.__name__ = true;
com_raidandfade_haxicord_types_CategoryChannel.fromStruct = function(_chan,_client) {
	return new com_raidandfade_haxicord_types_CategoryChannel(_chan,_client);
};
com_raidandfade_haxicord_types_CategoryChannel.__super__ = com_raidandfade_haxicord_types_GuildChannel;
com_raidandfade_haxicord_types_CategoryChannel.prototype = $extend(com_raidandfade_haxicord_types_GuildChannel.prototype,{
	_update: function(_chan) {
		if(_chan.name != null) {
			this.name = _chan.name;
		}
		if(_chan.position != null) {
			this.position = _chan.position;
		}
		if(_chan.permission_overwrites != null) {
			this.permission_overwrites = _chan.permission_overwrites;
		}
		if(_chan.nsfw != null) {
			this.nsfw = _chan.nsfw;
		}
	}
	,__class__: com_raidandfade_haxicord_types_CategoryChannel
});
var com_raidandfade_haxicord_types_MessageChannel = function() { };
com_raidandfade_haxicord_types_MessageChannel.__name__ = true;
com_raidandfade_haxicord_types_MessageChannel.__isInterface__ = true;
com_raidandfade_haxicord_types_MessageChannel.prototype = {
	__class__: com_raidandfade_haxicord_types_MessageChannel
};
var com_raidandfade_haxicord_types_DMChannel = function(_chan,_client) {
	this.client = _client;
	this.id = new com_raidandfade_haxicord_types_Snowflake(_chan.id);
	this.type = _chan.type;
	if(_chan.recipient != null) {
		this.recipient = this.client._newUser(_chan.recipient);
		this.recipients = [this.recipient];
	}
	if(_chan.recipients != null) {
		var _g = [];
		var _g1 = 0;
		var _g2 = _chan.recipients;
		while(_g1 < _g2.length) {
			var u = _g2[_g1];
			++_g1;
			_g.push(this.client._newUser(u));
		}
		this.recipients = _g;
		if(this.recipients.length == 1) {
			this.recipient = this.recipients[0];
		}
	}
	this.last_message_id = new com_raidandfade_haxicord_types_Snowflake(_chan.last_message_id);
};
com_raidandfade_haxicord_types_DMChannel.__name__ = true;
com_raidandfade_haxicord_types_DMChannel.__interfaces__ = [com_raidandfade_haxicord_types_MessageChannel];
com_raidandfade_haxicord_types_DMChannel.fromStruct = function(_chan,_client) {
	return new com_raidandfade_haxicord_types_DMChannel(_chan,_client);
};
com_raidandfade_haxicord_types_DMChannel.__super__ = com_raidandfade_haxicord_types_Channel;
com_raidandfade_haxicord_types_DMChannel.prototype = $extend(com_raidandfade_haxicord_types_Channel.prototype,{
	_update: function(_chan) {
		if(_chan.recipient != null) {
			this.recipient = this.client._newUser(_chan.recipient);
			this.recipients = [this.recipient];
		}
		if(_chan.recipients != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = _chan.recipients;
			while(_g1 < _g2.length) {
				var u = _g2[_g1];
				++_g1;
				_g.push(this.client._newUser(u));
			}
			this.recipients = _g;
			if(this.recipients.length == 1) {
				this.recipient = this.recipients[0];
			}
		}
		if(_chan.last_message_id != null) {
			this.last_message_id = new com_raidandfade_haxicord_types_Snowflake(_chan.last_message_id);
		}
	}
	,inGuild: function() {
		return false;
	}
	,sendMessage: function(mesg,cb) {
		this.client.endpoints.sendMessage(this.id.id,mesg,cb);
	}
	,addMember: function(user_id,access_token,nick,cb) {
		this.client.endpoints.groupDMAddRecipient(this.id.id,user_id,access_token,nick,cb);
	}
	,kickMember: function(user_id,cb) {
		this.client.endpoints.groupDMRemoveRecipient(this.id.id,user_id,cb);
	}
	,getMessages: function(format,cb) {
		this.client.endpoints.getMessages(this.id.id,format,cb);
	}
	,getMessage: function(mid,cb) {
		this.client.endpoints.getMessage(this.id.id,mid,cb);
	}
	,deleteMessage: function(mid,cb) {
		this.client.endpoints.deleteMessage(this.id.id,mid,cb);
	}
	,deleteMessages: function(ids,cb) {
		this.client.endpoints.deleteMessages(this.id.id,ids,cb);
	}
	,startTyping: function(cb) {
		this.client.endpoints.startTyping(this.id.id,cb);
	}
	,getPins: function(cb) {
		this.client.endpoints.getChannelPins(this.id.id,cb);
	}
	,pinMessage: function(mid,cb) {
		this.client.endpoints.addChannelPin(this.id.id,mid,cb);
	}
	,unpinMessage: function(mid,cb) {
		this.client.endpoints.deleteChannelPin(this.id.id,mid,cb);
	}
	,getPermission: function(uid) {
		return com_raidandfade_haxicord_utils_DPERMS.ADD_REACTIONS | com_raidandfade_haxicord_utils_DPERMS.SEND_MESSAGES | com_raidandfade_haxicord_utils_DPERMS.READ_MESSAGE_HISTORY | com_raidandfade_haxicord_utils_DPERMS.VIEW_CHANNEL | com_raidandfade_haxicord_utils_DPERMS.EMBED_LINKS | com_raidandfade_haxicord_utils_DPERMS.USE_EXTERNAL_EMOJIS;
	}
	,hasPermission: function(uid,dp) {
		return (this.getPermission(uid) & dp) == dp;
	}
	,__class__: com_raidandfade_haxicord_types_DMChannel
});
var com_raidandfade_haxicord_types_Guild = function(_guild,_client) {
	this.nextChancb = [];
	this.bans = [];
	this.storeChannels = new haxe_ds_StringMap();
	this.categoryChannels = new haxe_ds_StringMap();
	this.voiceChannels = new haxe_ds_StringMap();
	this.textChannels = new haxe_ds_StringMap();
	this.members = new haxe_ds_StringMap();
	this.features = [];
	this.emojis = [];
	this.roles = new haxe_ds_StringMap();
	var _gthis = this;
	this.client = _client;
	this.id = new com_raidandfade_haxicord_types_Snowflake(_guild.id);
	if(_guild.unavailable != null) {
		this.unavailable = _guild.unavailable;
	}
	if(!this.unavailable) {
		this.name = _guild.name;
		this.icon = _guild.icon;
		this.splash = _guild.splash;
		this.owner_id = new com_raidandfade_haxicord_types_Snowflake(_guild.owner_id);
		this.region = _guild.region;
		this.afk_timeout = _guild.afk_timeout;
		this.afk_channel_id = new com_raidandfade_haxicord_types_Snowflake(_guild.afk_channel_id);
		this.embed_enabled = _guild.embed_enabled;
		this.embed_channel_id = new com_raidandfade_haxicord_types_Snowflake(_guild.embed_channel_id);
		this.verification_level = _guild.verification_level;
		this.default_message_notifications = _guild.default_message_notifications;
		this.explicit_content_filter = _guild.explicit_content_filter;
		var _g = 0;
		var _g1 = _guild.roles;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			this._newRole(r);
		}
		this.emojis = _guild.emojis;
		this.features = _guild.features;
		this.mfa_level = _guild.mfa_level;
		if(_guild.widget_enabled != null) {
			this.widget_enabled = _guild.widget_enabled;
		}
		if(_guild.widget_channel_id != null) {
			this.widget_channel_id = new com_raidandfade_haxicord_types_Snowflake(_guild.widget_channel_id);
		}
		if(_guild.system_channel_id != null) {
			this.system_channel_id = new com_raidandfade_haxicord_types_Snowflake(_guild.system_channel_id);
		}
		this.max_members = _guild.max_members;
		this.max_presences = _guild.max_presences;
		this.vanity_url_code = _guild.vanity_url_code;
		this.description = _guild.description;
		this.banner = _guild.banner;
		this.boost_tier = _guild.premium_tier;
		if(_guild.premium_subscription_count != null) {
			this.boost_count = _guild.premium_subscription_count;
		}
		if(_guild.joined_at != null) {
			this.joined_at = haxe_DateUtils.fromISO8601(_guild.joined_at);
		}
		if(_guild.large != null) {
			this.large = _guild.large;
		}
		if(_guild.member_count != null) {
			this.member_count = _guild.member_count;
		}
		if(_guild.members != null) {
			var _g2 = 0;
			var _g3 = _guild.members;
			while(_g2 < _g3.length) {
				var m = _g3[_g2];
				++_g2;
				this._newMember(m);
			}
		}
		this.owner = this.getMemberUnsafe(this.owner_id.id);
		if(this.owner_id != null && this.owner_id.id != "" && this.owner == null) {
			try {
				this.getMember(this.owner_id.id,function(m1) {
					_gthis.owner = m1;
				});
			} catch( f ) {
				haxe_CallStack.lastException = f;
				var f1 = ((f) instanceof js__$Boot_HaxeError) ? f.val : f;
				haxe_Log.trace("[" + this.id.id + "] Failed to load the guild owner manually (they were not in cache and this error occured when attempting to retrieve them):",{ fileName : "com/raidandfade/haxicord/types/Guild.hx", lineNumber : 213, className : "com.raidandfade.haxicord.types.Guild", methodName : "new"});
				haxe_Log.trace(f1,{ fileName : "com/raidandfade/haxicord/types/Guild.hx", lineNumber : 214, className : "com.raidandfade.haxicord.types.Guild", methodName : "new"});
			}
		}
		if(_guild.channels != null) {
			var _g21 = 0;
			var _g31 = _guild.channels;
			while(_g21 < _g31.length) {
				var c = _g31[_g21];
				++_g21;
				var ch = js_Boot.__cast(_client._newChannel(c) , com_raidandfade_haxicord_types_GuildChannel);
				ch.guild_id = this.id;
				if(((ch) instanceof com_raidandfade_haxicord_types_TextChannel)) {
					var key = ch.id.id;
					var value = js_Boot.__cast(ch , com_raidandfade_haxicord_types_TextChannel);
					var _this = this.textChannels;
					if(__map_reserved[key] != null) {
						_this.setReserved(key,value);
					} else {
						_this.h[key] = value;
					}
				} else if(((ch) instanceof com_raidandfade_haxicord_types_VoiceChannel)) {
					var key1 = ch.id.id;
					var value1 = js_Boot.__cast(ch , com_raidandfade_haxicord_types_VoiceChannel);
					var _this1 = this.voiceChannels;
					if(__map_reserved[key1] != null) {
						_this1.setReserved(key1,value1);
					} else {
						_this1.h[key1] = value1;
					}
				} else {
					var key2 = ch.id.id;
					var value2 = js_Boot.__cast(ch , com_raidandfade_haxicord_types_CategoryChannel);
					var _this2 = this.categoryChannels;
					if(__map_reserved[key2] != null) {
						_this2.setReserved(key2,value2);
					} else {
						_this2.h[key2] = value2;
					}
				}
			}
		}
		if(_guild.presences != null) {
			this.presences = _guild.presences;
		}
	}
};
com_raidandfade_haxicord_types_Guild.__name__ = true;
com_raidandfade_haxicord_types_Guild.prototype = {
	_update: function(_guild) {
		var _gthis = this;
		if(_guild.unavailable != null) {
			this.unavailable = _guild.unavailable;
		}
		if(!this.unavailable) {
			if(_guild.name != null) {
				this.name = _guild.name;
			}
			if(_guild.icon != null) {
				this.icon = _guild.icon;
			}
			if(_guild.splash != null) {
				this.splash = _guild.splash;
			}
			if(_guild.region != null) {
				this.region = _guild.region;
			}
			if(_guild.afk_timeout != null) {
				this.afk_timeout = _guild.afk_timeout;
			}
			if(_guild.afk_channel_id != null) {
				this.afk_channel_id = new com_raidandfade_haxicord_types_Snowflake(_guild.afk_channel_id);
			}
			if(_guild.embed_enabled != null) {
				this.embed_enabled = _guild.embed_enabled;
			}
			if(_guild.embed_channel_id != null) {
				this.embed_channel_id = new com_raidandfade_haxicord_types_Snowflake(_guild.embed_channel_id);
			}
			if(_guild.verification_level != null) {
				this.verification_level = _guild.verification_level;
			}
			if(_guild.default_message_notifications != null) {
				this.default_message_notifications = _guild.default_message_notifications;
			}
			if(_guild.roles != null) {
				var _g = 0;
				var _g1 = _guild.roles;
				while(_g < _g1.length) {
					var r = _g1[_g];
					++_g;
					this._newRole(r);
				}
			}
			if(_guild.emojis != null) {
				this.emojis = _guild.emojis;
			}
			if(_guild.features != null) {
				this.features = _guild.features;
			}
			if(_guild.mfa_level != null) {
				this.mfa_level = _guild.mfa_level;
			}
			if(_guild.joined_at != null) {
				this.joined_at = haxe_DateUtils.fromISO8601(_guild.joined_at);
			}
			if(_guild.large != null) {
				this.large = _guild.large;
			}
			if(_guild.member_count != null) {
				this.member_count = _guild.member_count;
			}
			if(_guild.members != null) {
				var _g2 = 0;
				var _g11 = _guild.members;
				while(_g2 < _g11.length) {
					var m = _g11[_g2];
					++_g2;
					this._newMember(m);
				}
			}
			if(_guild.owner_id != null) {
				this.owner_id = new com_raidandfade_haxicord_types_Snowflake(_guild.owner_id);
				this.owner = this.getMemberUnsafe(this.owner_id.id);
				if(this.owner_id != null && this.owner_id.id != "" && this.owner == null) {
					try {
						this.getMember(this.owner_id.id,function(m1) {
							_gthis.owner = m1;
						});
					} catch( f ) {
						haxe_CallStack.lastException = f;
						var f1 = ((f) instanceof js__$Boot_HaxeError) ? f.val : f;
						haxe_Log.trace("[" + this.id.id + "] Failed to load the guild owner manually (they were not in cache and this error occured when attempting to retrieve them):",{ fileName : "com/raidandfade/haxicord/types/Guild.hx", lineNumber : 304, className : "com.raidandfade.haxicord.types.Guild", methodName : "_update"});
						haxe_Log.trace(f1,{ fileName : "com/raidandfade/haxicord/types/Guild.hx", lineNumber : 305, className : "com.raidandfade.haxicord.types.Guild", methodName : "_update"});
					}
				}
			}
			if(_guild.channels != null) {
				var _g3 = 0;
				var _g12 = _guild.channels;
				while(_g3 < _g12.length) {
					var c = _g12[_g3];
					++_g3;
					var ch = js_Boot.__cast(this.client._newChannel(c) , com_raidandfade_haxicord_types_GuildChannel);
					ch.guild_id = this.id;
					if(((ch) instanceof com_raidandfade_haxicord_types_TextChannel) || ((ch) instanceof com_raidandfade_haxicord_types_NewsChannel)) {
						var key = ch.id.id;
						var value = js_Boot.__cast(ch , com_raidandfade_haxicord_types_TextChannel);
						var _this = this.textChannels;
						if(__map_reserved[key] != null) {
							_this.setReserved(key,value);
						} else {
							_this.h[key] = value;
						}
					} else if(((ch) instanceof com_raidandfade_haxicord_types_VoiceChannel)) {
						var key1 = ch.id.id;
						var value1 = js_Boot.__cast(ch , com_raidandfade_haxicord_types_VoiceChannel);
						var _this1 = this.voiceChannels;
						if(__map_reserved[key1] != null) {
							_this1.setReserved(key1,value1);
						} else {
							_this1.h[key1] = value1;
						}
					} else if(((ch) instanceof com_raidandfade_haxicord_types_CategoryChannel)) {
						var key2 = ch.id.id;
						var value2 = js_Boot.__cast(ch , com_raidandfade_haxicord_types_CategoryChannel);
						var _this2 = this.categoryChannels;
						if(__map_reserved[key2] != null) {
							_this2.setReserved(key2,value2);
						} else {
							_this2.h[key2] = value2;
						}
					} else if(((ch) instanceof com_raidandfade_haxicord_types_StoreChannel)) {
						var key3 = ch.id.id;
						var value3 = js_Boot.__cast(ch , com_raidandfade_haxicord_types_StoreChannel);
						var _this3 = this.storeChannels;
						if(__map_reserved[key3] != null) {
							_this3.setReserved(key3,value3);
						} else {
							_this3.h[key3] = value3;
						}
					} else {
						throw new js__$Boot_HaxeError("Unsupported channel type in guild initialization");
					}
				}
			}
			if(_guild.presences != null) {
				this.presences = _guild.presences;
			}
			if(_guild.widget_enabled != null) {
				this.widget_enabled = _guild.widget_enabled;
			}
			if(_guild.widget_channel_id != null) {
				this.widget_channel_id = new com_raidandfade_haxicord_types_Snowflake(_guild.widget_channel_id);
			}
			if(_guild.system_channel_id != null) {
				this.system_channel_id = new com_raidandfade_haxicord_types_Snowflake(_guild.system_channel_id);
			}
			if(_guild.max_members != null) {
				this.max_members = _guild.max_members;
			}
			if(_guild.max_presences != null) {
				this.max_presences = _guild.max_presences;
			}
			if(_guild.vanity_url_code != null) {
				this.vanity_url_code = _guild.vanity_url_code;
			}
			if(_guild.description != null) {
				this.description = _guild.description;
			}
			if(_guild.banner != null) {
				this.banner = _guild.banner;
			}
			if(_guild.premium_tier != null) {
				this.boost_tier = _guild.premium_tier;
			}
			if(_guild.premium_subscription_count != null) {
				this.boost_count = _guild.premium_subscription_count;
			}
		}
	}
	,_updateEmojis: function(e) {
		this.emojis = e;
	}
	,_addChannel: function(ch) {
		if(this.nextChancb.length > 0) {
			this.nextChancb.splice(0,1)[0](ch);
		}
		if(((ch) instanceof com_raidandfade_haxicord_types_TextChannel) || ((ch) instanceof com_raidandfade_haxicord_types_NewsChannel)) {
			var key = ch.id.id;
			var value = js_Boot.__cast(ch , com_raidandfade_haxicord_types_TextChannel);
			var _this = this.textChannels;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		} else if(((ch) instanceof com_raidandfade_haxicord_types_VoiceChannel)) {
			var key1 = ch.id.id;
			var value1 = js_Boot.__cast(ch , com_raidandfade_haxicord_types_VoiceChannel);
			var _this1 = this.voiceChannels;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value1);
			} else {
				_this1.h[key1] = value1;
			}
		} else if(((ch) instanceof com_raidandfade_haxicord_types_CategoryChannel)) {
			var key2 = ch.id.id;
			var value2 = js_Boot.__cast(ch , com_raidandfade_haxicord_types_CategoryChannel);
			var _this2 = this.categoryChannels;
			if(__map_reserved[key2] != null) {
				_this2.setReserved(key2,value2);
			} else {
				_this2.h[key2] = value2;
			}
		} else if(((ch) instanceof com_raidandfade_haxicord_types_StoreChannel)) {
			var key3 = ch.id.id;
			var value3 = js_Boot.__cast(ch , com_raidandfade_haxicord_types_StoreChannel);
			var _this3 = this.storeChannels;
			if(__map_reserved[key3] != null) {
				_this3.setReserved(key3,value3);
			} else {
				_this3.h[key3] = value3;
			}
		} else {
			throw new js__$Boot_HaxeError("Unsupported channel type in channel addition in guild");
		}
	}
	,_addBan: function(user) {
		this.bans.push(user);
	}
	,_removeBan: function(user) {
		HxOverrides.remove(this.bans,user);
	}
	,_newMember: function(memberStruct) {
		var key = memberStruct.user.id;
		var _this = this.members;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = memberStruct.user.id;
			var _this1 = this.members;
			var m = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			m._update(memberStruct);
			return m;
		} else {
			var member = new com_raidandfade_haxicord_types_GuildMember(memberStruct,this,this.client);
			var key2 = memberStruct.user.id;
			var _this2 = this.members;
			if(__map_reserved[key2] != null) {
				_this2.setReserved(key2,member);
			} else {
				_this2.h[key2] = member;
			}
			return member;
		}
	}
	,_newRole: function(roleStruct) {
		var key = roleStruct.id;
		var _this = this.roles;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = roleStruct.id;
			var _this1 = this.roles;
			var r = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			r._update(roleStruct);
			return r;
		} else {
			var role = new com_raidandfade_haxicord_types_Role(roleStruct,this,this.client);
			var key2 = roleStruct.id;
			var _this2 = this.roles;
			if(__map_reserved[key2] != null) {
				_this2.setReserved(key2,role);
			} else {
				_this2.h[key2] = role;
			}
			var key3 = roleStruct.id;
			var _this3 = this.roles;
			if(__map_reserved[key3] != null) {
				return _this3.getReserved(key3);
			} else {
				return _this3.h[key3];
			}
		}
	}
	,getChannels: function(cb) {
		this.client.endpoints.getChannels(this.id.id,cb);
	}
	,createChannel: function(cs,cb) {
		var _gthis = this;
		this.client.endpoints.createChannel(this.id.id,cs,function(c,e) {
			if(e != null) {
				cb(null,e);
			} else {
				var f = function(c1,cb1) {
					cb1(c1,null);
				};
				var cb2 = cb;
				var tmp = function(c2) {
					f(c2,cb2);
				};
				_gthis.nextChancb.push(tmp);
			}
		});
	}
	,getChannel: function(cid,cb) {
		this.client.getChannel(cid,cb);
	}
	,findChannels: function(name) {
		var rs = [];
		var cs = [];
		var _this = this.textChannels;
		var r = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(r.hasNext()) {
			var r1 = r.next();
			if(r1.name == name) {
				rs.push(js_Boot.__cast(r1 , com_raidandfade_haxicord_types_GuildChannel));
			} else if(r1.name.indexOf(name) > -1) {
				cs.push(js_Boot.__cast(r1 , com_raidandfade_haxicord_types_GuildChannel));
			}
		}
		var _this1 = this.voiceChannels;
		var r2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(r2.hasNext()) {
			var r3 = r2.next();
			if(r3.name == name) {
				rs.push(js_Boot.__cast(r3 , com_raidandfade_haxicord_types_GuildChannel));
			} else if(r3.name.indexOf(name) > -1) {
				cs.push(js_Boot.__cast(r3 , com_raidandfade_haxicord_types_GuildChannel));
			}
		}
		var _this2 = this.categoryChannels;
		var r4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(r4.hasNext()) {
			var r5 = r4.next();
			if(r5.name == name) {
				rs.push(js_Boot.__cast(r5 , com_raidandfade_haxicord_types_GuildChannel));
			} else if(r5.name.indexOf(name) > -1) {
				cs.push(js_Boot.__cast(r5 , com_raidandfade_haxicord_types_GuildChannel));
			}
		}
		var _this3 = this.storeChannels;
		var r6 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
		while(r6.hasNext()) {
			var r7 = r6.next();
			if(r7.name == name) {
				rs.push(js_Boot.__cast(r7 , com_raidandfade_haxicord_types_GuildChannel));
			} else if(r7.name.indexOf(name) > -1) {
				cs.push(js_Boot.__cast(r7 , com_raidandfade_haxicord_types_GuildChannel));
			}
		}
		var _g = 0;
		while(_g < cs.length) {
			var r8 = cs[_g];
			++_g;
			rs.push(r8);
		}
		return rs;
	}
	,moveChannels: function() {
	}
	,getInvites: function(cb) {
		this.client.endpoints.getInvites(this.id.id,cb);
	}
	,getRoles: function(cb) {
		this.client.endpoints.getGuildRoles(this.id.id,cb);
	}
	,getRole: function(rid) {
		var _this = this.roles;
		if(__map_reserved[rid] != null) {
			return _this.getReserved(rid);
		} else {
			return _this.h[rid];
		}
	}
	,findRoles: function(name) {
		var rs = [];
		var cs = [];
		var _this = this.roles;
		var r = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(r.hasNext()) {
			var r1 = r.next();
			if(r1.name == name) {
				rs.push(r1);
			} else if(r1.name.indexOf(name) > -1) {
				cs.push(r1);
			}
		}
		var _g = 0;
		while(_g < cs.length) {
			var r2 = cs[_g];
			++_g;
			rs.push(r2);
		}
		return rs;
	}
	,createRole: function(rs,cb) {
		this.client.endpoints.createRole(this.id.id,rs,cb);
	}
	,moveRole: function(rs,cb) {
	}
	,getMember: function(mid,cb) {
		var _this = this.members;
		if(__map_reserved[mid] != null ? _this.existsReserved(mid) : _this.h.hasOwnProperty(mid)) {
			var _this1 = this.members;
			var tmp = __map_reserved[mid] != null ? _this1.getReserved(mid) : _this1.h[mid];
			cb(tmp);
		} else {
			this.client.endpoints.getGuildMember(this.id.id,mid,function(r,e) {
				if(e != null) {
					throw js__$Boot_HaxeError.wrap(e);
				}
				cb(r);
			});
		}
	}
	,getMemberUnsafe: function(id) {
		var _this = this.members;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.members;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			return null;
		}
	}
	,getAllMembers: function(cb) {
		haxe_Log.trace("Call to unfinished function getAllMembers. Please don't do this",{ fileName : "com/raidandfade/haxicord/types/Guild.hx", lineNumber : 595, className : "com.raidandfade.haxicord.types.Guild", methodName : "getAllMembers"});
	}
	,getMembers: function(format,cb) {
		this.client.endpoints.getGuildMembers(this.id.id,format,cb);
	}
	,addMember: function(uid,mdata,cb) {
		this.client.endpoints.addGuildMember(this.id.id,uid,mdata,cb);
	}
	,changeNickname: function(s,m,cb) {
		if(m == null || m.user.id.id == this.client.user.id.id) {
			this.client.endpoints.changeNickname(this.id.id,s,cb);
		} else {
			this.client.endpoints.editGuildMember(this.id.id,m.user.id.id,{ nick : s},cb);
		}
	}
	,getBans: function(cb) {
		this.client.endpoints.getGuildBans(this.id.id,cb);
	}
	,getPruneCount: function(days,cb) {
		this.client.endpoints.getPruneCount(this.id.id,days,cb);
	}
	,getAuditLog: function(filter,cb) {
		this.client.endpoints.getAuditLogs(this.id.id,filter,cb);
	}
	,beginPrune: function(days,cb) {
		this.client.endpoints.beginPrune(this.id.id,days,cb);
	}
	,getVoiceRegions: function(cb) {
		this.client.endpoints.guildVoiceRegions(this.id.id,cb);
	}
	,getIntegrations: function(cb) {
		this.client.endpoints.getIntegrations(this.id.id,cb);
	}
	,addIntegration: function(intd,cb) {
		this.client.endpoints.addIntegration(this.id.id,intd,cb);
	}
	,editIntegration: function(intid,intd,cb) {
		this.client.endpoints.editIntegration(this.id.id,intid,intd,cb);
	}
	,syncIntegration: function(intid,cb) {
		this.client.endpoints.syncIntegration(this.id.id,intid,cb);
	}
	,deleteIntegration: function(intid,cb) {
		this.client.endpoints.deleteIntegration(this.id.id,intid,cb);
	}
	,getWidget: function(cb) {
		this.client.endpoints.getWidget(this.id.id,cb);
	}
	,editWidget: function(wd,cb) {
		this.client.endpoints.modifyWidget(this.id.id,wd,cb);
	}
	,edit: function(gd,cb) {
		this.client.endpoints.modifyGuild(this.id.id,gd,cb);
	}
	,'delete': function(cb) {
		this.client.endpoints.deleteGuild(this.id.id,cb);
	}
	,leave: function(cb) {
		this.client.endpoints.leaveGuild(this.id.id,cb);
	}
	,listEmojis: function(cb) {
		this.client.endpoints.listEmojis(this.id.id,cb);
	}
	,getEmoji: function(emoji_id,cb) {
		this.client.endpoints.getEmoji(this.id.id,emoji_id,cb);
	}
	,createEmoji: function(emoji,cb) {
		this.client.endpoints.createEmoji(this.id.id,emoji,cb);
	}
	,modifyEmoji: function(emoji_id,emoji,cb) {
		this.client.endpoints.modifyEmoji(this.id.id,emoji_id,emoji,cb);
	}
	,removeEmoji: function(emoji_id,cb) {
		this.client.endpoints.removeEmoji(this.id.id,emoji_id,cb);
	}
	,__class__: com_raidandfade_haxicord_types_Guild
};
var com_raidandfade_haxicord_types_GuildMember = function(_mem,_guild,_client) {
	this.client = _client;
	this.guild = _guild;
	this.user = this.client._newUser(_mem.user);
	this.displayName = _mem.nick == null ? _mem.user.username : _mem.nick;
	this.roles = _mem.roles;
	this.joined_at_iso = _mem.joined_at;
	this.joined_at_cache = null;
	this.deaf = _mem.deaf;
	this.mute = _mem.mute;
};
com_raidandfade_haxicord_types_GuildMember.__name__ = true;
com_raidandfade_haxicord_types_GuildMember.prototype = {
	get_joined_at: function() {
		if(this.joined_at_cache == null) {
			this.joined_at_cache = haxe_DateUtils.fromISO8601(this.joined_at_iso);
		}
		return this.joined_at_cache;
	}
	,_update: function(_mem) {
		if(_mem.user != null) {
			this.user = this.client._newUser(_mem.user);
		}
		this.displayName = _mem.nick == null ? _mem.user.username : _mem.nick;
		if(_mem.roles != null) {
			this.roles = _mem.roles;
		}
		if(_mem.joined_at != null) {
			this.joined_at_iso = _mem.joined_at;
			this.joined_at_cache = null;
		}
	}
	,_updatePresence: function(_pre) {
		this.displayName = _pre.nick == null ? this.user.username : _pre.nick;
		if(_pre.roles != null) {
			this.roles = _pre.roles;
		}
		_pre.guild_id = null;
		_pre.nick = null;
		_pre.roles = null;
		this.user.presence = _pre;
	}
	,addRole: function(rid,cb) {
		this.client.endpoints.giveMemberRole(this.guild.id.id,this.user.id.id,rid,cb);
	}
	,removeRole: function(rid,cb) {
		this.client.endpoints.takeMemberRole(this.guild.id.id,this.user.id.id,rid,cb);
	}
	,hasRole: function(rid) {
		var _g = 0;
		var _g1 = this.roles;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(r == rid) {
				return true;
			}
		}
		return false;
	}
	,edit: function(data,cb) {
		this.client.endpoints.editGuildMember(this.guild.id.id,this.user.id.id,data,cb);
	}
	,changeNickname: function(s,cb) {
		this.guild.changeNickname(s,this,cb);
	}
	,kick: function(reason,cb) {
		if(reason == null) {
			reason = "";
		}
		this.client.endpoints.kickMember(this.guild.id.id,this.user.id.id,reason,cb);
	}
	,ban: function(days,reason,cb) {
		if(reason == null) {
			reason = "";
		}
		if(days == null) {
			days = 0;
		}
		this.client.endpoints.banMember(this.guild.id.id,this.user.id.id,days,reason,cb);
	}
	,hasPermissions: function(p) {
		return (this.getPermissions() & p) == p;
	}
	,getPermissions: function() {
		var p = 0;
		var _g = 0;
		var _g1 = this.roles;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			var _this = this.guild.roles;
			p |= (__map_reserved[x] != null ? _this.getReserved(x) : _this.h[x]).permissions;
		}
		return p;
	}
	,getPermissionList: function() {
		return com_raidandfade_haxicord_utils_DPERMS.PermsAsList(this.getPermissions());
	}
	,getPermissionStrings: function() {
		return com_raidandfade_haxicord_utils_DPERMS.PermsAsNamedList(this.getPermissions());
	}
	,__class__: com_raidandfade_haxicord_types_GuildMember
};
var com_raidandfade_haxicord_types_Message = function(_msg,_client) {
	this.reactions = [];
	this.embeds = [];
	this.attachments = [];
	this.mention_roles = [];
	this.mentions = [];
	this.client = _client;
	this.id = new com_raidandfade_haxicord_types_Snowflake(_msg.id);
	this.channel_id = new com_raidandfade_haxicord_types_Snowflake(_msg.channel_id);
	this.author = this.client._newUser(_msg.author);
	this.content = _msg.content;
	if(_msg.timestamp != null) {
		this.timestamp_str = _msg.timestamp;
	}
	if(_msg.edited_timestamp != null) {
		this.edited_timestamp_str = _msg.edited_timestamp;
	}
	this.tts = _msg.tts;
	this.mention_everyone = _msg.mention_everyone;
	var _g = [];
	var _g1 = 0;
	var _g2 = _msg.mentions;
	while(_g1 < _g2.length) {
		var u = _g2[_g1];
		++_g1;
		_g.push(this.client._newUser(u));
	}
	this.mentions = _g;
	var _g3 = [];
	var _g4 = 0;
	var _g5 = _msg.mention_roles;
	while(_g4 < _g5.length) {
		var r = _g5[_g4];
		++_g4;
		var _this = (js_Boot.__cast(this.client.getChannelUnsafe(_msg.channel_id) , com_raidandfade_haxicord_types_GuildChannel)).getGuild().roles;
		_g3.push(__map_reserved[r] != null ? _this.getReserved(r) : _this.h[r]);
	}
	this.mention_roles = _g3;
	if(_msg.attachments != null) {
		this.attachments = _msg.attachments;
	}
	this.embeds = _msg.embeds;
	if(_msg.reactions != null) {
		this.reactions = _msg.reactions;
	}
	if(_msg.nonce != null) {
		try {
			this.nonce = new com_raidandfade_haxicord_types_Snowflake(_msg.nonce);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			this.nonce = null;
		}
	}
	this.pinned = _msg.pinned;
	this.webhook_id = _msg.webhook_id;
	if(_msg.type != null) {
		this.type = _msg.type;
	}
	if(_msg.activity != null) {
		this.activity = _msg.activity;
	}
	if(_msg.application != null) {
		this.application = _msg.application;
	}
};
com_raidandfade_haxicord_types_Message.__name__ = true;
com_raidandfade_haxicord_types_Message.prototype = {
	get_timestamp: function() {
		return haxe_DateUtils.fromISO8601(this.timestamp_str);
	}
	,get_edited_timestamp: function() {
		return haxe_DateUtils.fromISO8601(this.edited_timestamp_str);
	}
	,_update: function(_msg) {
		if(_msg.edited_timestamp != null) {
			this.edited_timestamp_str = _msg.edited_timestamp;
		}
		if(_msg.content != null) {
			this.content = _msg.content;
		}
		if(_msg.tts != null) {
			this.tts = _msg.tts;
		}
		if(_msg.mention_everyone != null) {
			this.mention_everyone = _msg.mention_everyone;
		}
		if(_msg.mentions != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = _msg.mentions;
			while(_g1 < _g2.length) {
				var u = _g2[_g1];
				++_g1;
				_g.push(this.client._newUser(u));
			}
			this.mentions = _g;
		}
		if(_msg.mention_roles != null) {
			var _g3 = [];
			var _g11 = 0;
			var _g21 = _msg.mention_roles;
			while(_g11 < _g21.length) {
				var r = _g21[_g11];
				++_g11;
				var _this = (js_Boot.__cast(this.client.getChannelUnsafe(_msg.channel_id) , com_raidandfade_haxicord_types_GuildChannel)).getGuild().roles;
				_g3.push(__map_reserved[r] != null ? _this.getReserved(r) : _this.h[r]);
			}
			this.mention_roles = _g3;
		}
		if(_msg.attachments != null) {
			this.attachments = _msg.attachments;
		}
		if(_msg.embeds != null) {
			this.embeds = _msg.embeds;
		}
		if(_msg.reactions != null) {
			this.reactions = _msg.reactions;
		}
		if(_msg.nonce != null) {
			this.nonce = new com_raidandfade_haxicord_types_Snowflake(_msg.nonce);
		}
		if(_msg.pinned != null) {
			this.pinned = _msg.pinned;
		}
		if(_msg.webhook_id != null) {
			this.webhook_id = _msg.webhook_id;
		}
		if(_msg.type != null) {
			this.type = _msg.type;
		}
		if(_msg.activity != null) {
			this.activity = _msg.activity;
		}
		if(_msg.application != null) {
			this.application = _msg.application;
		}
	}
	,_addReaction: function(_u,_e) {
		this.reactions.push({ who : _u.id.id, emoji : _e});
	}
	,_delReaction: function(_u,_e) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.reactions;
		while(_g1 < _g2.length) {
			var r = _g2[_g1];
			++_g1;
			if(!(r.who == _u.id.id && r.emoji == _e)) {
				_g.push(r);
			}
		}
		this.reactions = _g;
	}
	,_purgeReactions: function() {
		this.reactions = [];
	}
	,pin: function(cb) {
		(js_Boot.__cast(this.client.getChannelUnsafe(this.channel_id.id) , com_raidandfade_haxicord_types_MessageChannel)).pinMessage(this.id.id,cb);
	}
	,unpin: function(cb) {
		(js_Boot.__cast(this.client.getChannelUnsafe(this.channel_id.id) , com_raidandfade_haxicord_types_MessageChannel)).unpinMessage(this.id.id,cb);
	}
	,getChannel: function() {
		return js_Boot.__cast(this.client.getChannelUnsafe(this.channel_id.id) , com_raidandfade_haxicord_types_MessageChannel);
	}
	,inGuild: function() {
		return this.getChannel().inGuild();
	}
	,getMember: function() {
		if(this.inGuild()) {
			return this.getGuild().getMemberUnsafe(this.author.id.id);
		} else {
			return null;
		}
	}
	,getGuild: function() {
		if(this.inGuild()) {
			return (js_Boot.__cast(this.getChannel() , com_raidandfade_haxicord_types_TextChannel)).getGuild();
		} else {
			return null;
		}
	}
	,reply: function(msg,cb) {
		this.client.endpoints.sendMessage(this.channel_id.id,msg,cb);
	}
	,edit: function(msg,cb) {
		this.client.endpoints.editMessage(this.channel_id.id,this.id.id,msg,cb);
	}
	,'delete': function(cb) {
		this.client.endpoints.deleteMessage(this.channel_id.id,this.id.id,cb);
	}
	,getReactions: function(e,cb) {
		this.client.endpoints.getReactions(this.channel_id.id,this.id.id,e,cb);
	}
	,react: function(e,cb) {
		this.client.endpoints.createReaction(this.channel_id.id,this.id.id,e,cb);
	}
	,unreact: function(e,cb) {
		this.client.endpoints.deleteOwnReaction(this.channel_id.id,this.id.id,e,cb);
	}
	,removeReaction: function(e,uid,cb) {
		this.client.endpoints.deleteUserReaction(this.channel_id.id,this.id.id,uid,e,cb);
	}
	,removeAllReactions: function(cb) {
		this.client.endpoints.deleteAllReactions(this.channel_id.id,this.id.id,cb);
	}
	,getPermission: function(channel_overrides) {
		if(channel_overrides == null) {
			channel_overrides = false;
		}
		if(channel_overrides || !this.inGuild()) {
			return this.getChannel().getPermission(this.author.id.id);
		} else {
			return this.getMember().getPermissions();
		}
	}
	,hasPermission: function(p,channel_overrides) {
		if(channel_overrides == null) {
			channel_overrides = false;
		}
		if(channel_overrides || !this.inGuild()) {
			if(!this.getChannel().hasPermission(this.author.id.id,p)) {
				return this.getMember().hasPermissions(com_raidandfade_haxicord_utils_DPERMS.ADMINISTRATOR);
			} else {
				return true;
			}
		} else if(!(this.getMember().hasPermissions(p) || this.getMember().hasPermissions(com_raidandfade_haxicord_utils_DPERMS.ADMINISTRATOR))) {
			return this.getGuild().owner_id == this.author.id;
		} else {
			return true;
		}
	}
	,__class__: com_raidandfade_haxicord_types_Message
};
var com_raidandfade_haxicord_types_TextChannel = function(_chan,_client) {
	this.client = _client;
	this.id = new com_raidandfade_haxicord_types_Snowflake(_chan.id);
	this.type = _chan.type;
	this.parent_id = new com_raidandfade_haxicord_types_Snowflake(_chan.parent_id);
	this.guild_id = new com_raidandfade_haxicord_types_Snowflake(_chan.guild_id);
	this.name = _chan.name;
	this.nsfw = _chan.nsfw;
	this.position = _chan.position;
	this.permission_overwrites = _chan.permission_overwrites;
	this.topic = _chan.topic;
	this.last_message_id = new com_raidandfade_haxicord_types_Snowflake(_chan.last_message_id);
	if(_chan.rate_limit_per_user != null) {
		this.rate_limit_per_user = _chan.rate_limit_per_user;
	}
	if(_chan.last_pin_timestamp != null) {
		this.last_pin_timestamp = _chan.last_pin_timestamp;
	}
};
com_raidandfade_haxicord_types_TextChannel.__name__ = true;
com_raidandfade_haxicord_types_TextChannel.__interfaces__ = [com_raidandfade_haxicord_types_MessageChannel];
com_raidandfade_haxicord_types_TextChannel.fromStruct = function(_chan,_client) {
	return new com_raidandfade_haxicord_types_TextChannel(_chan,_client);
};
com_raidandfade_haxicord_types_TextChannel.__super__ = com_raidandfade_haxicord_types_GuildChannel;
com_raidandfade_haxicord_types_TextChannel.prototype = $extend(com_raidandfade_haxicord_types_GuildChannel.prototype,{
	_update: function(_chan) {
		if(_chan.name != null) {
			this.name = _chan.name;
		}
		if(_chan.position != null) {
			this.position = _chan.position;
		}
		if(_chan.permission_overwrites != null) {
			this.permission_overwrites = _chan.permission_overwrites;
		}
		if(_chan.topic != null) {
			this.topic = _chan.topic;
		}
		if(_chan.nsfw != null) {
			this.nsfw = _chan.nsfw;
		}
		if(_chan.rate_limit_per_user != null) {
			this.rate_limit_per_user = _chan.rate_limit_per_user;
		}
		if(_chan.last_pin_timestamp != null) {
			this.last_pin_timestamp = _chan.last_pin_timestamp;
		}
	}
	,inGuild: function() {
		return true;
	}
	,sendMessage: function(mesg,cb) {
		this.client.endpoints.sendMessage(this.id.id,mesg,cb);
	}
	,getMessages: function(format,cb) {
		this.client.endpoints.getMessages(this.id.id,format,cb);
	}
	,getMessage: function(mid,cb) {
		this.client.endpoints.getMessage(this.id.id,mid,cb);
	}
	,deleteMessage: function(mid,cb) {
		this.client.endpoints.deleteMessage(this.id.id,mid,cb);
	}
	,deleteMessages: function(ids,cb) {
		this.client.endpoints.deleteMessages(this.id.id,ids,cb);
	}
	,startTyping: function(cb) {
		this.client.endpoints.startTyping(this.id.id,cb);
	}
	,getPins: function(cb) {
		this.client.endpoints.getChannelPins(this.id.id,cb);
	}
	,pinMessage: function(mid,cb) {
		this.client.endpoints.addChannelPin(this.id.id,mid,cb);
	}
	,unpinMessage: function(mid,cb) {
		this.client.endpoints.deleteChannelPin(this.id.id,mid,cb);
	}
	,__class__: com_raidandfade_haxicord_types_TextChannel
});
var com_raidandfade_haxicord_types_NewsChannel = function(_chan,_client) {
	com_raidandfade_haxicord_types_TextChannel.call(this,_chan,_client);
};
com_raidandfade_haxicord_types_NewsChannel.__name__ = true;
com_raidandfade_haxicord_types_NewsChannel.fromStruct = function(_chan,_client) {
	return new com_raidandfade_haxicord_types_NewsChannel(_chan,_client);
};
com_raidandfade_haxicord_types_NewsChannel.__super__ = com_raidandfade_haxicord_types_TextChannel;
com_raidandfade_haxicord_types_NewsChannel.prototype = $extend(com_raidandfade_haxicord_types_TextChannel.prototype,{
	__class__: com_raidandfade_haxicord_types_NewsChannel
});
var com_raidandfade_haxicord_types_Role = function(_role,_guild,_client) {
	this.client = _client;
	this.id = new com_raidandfade_haxicord_types_Snowflake(_role.id);
	this.name = _role.name;
	this.color = _role.color;
	this.hoist = _role.hoist;
	this.position = _role.position;
	this.permissions = _role.permissions;
	this.managed = _role.managed;
	this.mentionable = _role.mentionable;
	this.guild = _guild;
};
com_raidandfade_haxicord_types_Role.__name__ = true;
com_raidandfade_haxicord_types_Role.prototype = {
	_update: function(_role) {
		if(_role.color != null) {
			this.color = _role.color;
		}
		if(_role.hoist != null) {
			this.hoist = _role.hoist;
		}
		if(_role.position != null) {
			this.position = _role.position;
		}
		if(_role.permissions != null) {
			this.permissions = _role.permissions;
		}
		if(_role.managed != null) {
			this.managed = _role.managed;
		}
		if(_role.mentionable != null) {
			this.mentionable = _role.mentionable;
		}
	}
	,edit: function(rd,cb) {
		this.client.endpoints.editRole(this.guild.id.id,this.id.id,rd,cb);
	}
	,'delete': function(cb) {
		this.client.endpoints.deleteRole(this.guild.id.id,this.id.id,cb);
	}
	,getPermissionList: function() {
		return com_raidandfade_haxicord_utils_DPERMS.PermsAsList(this.permissions);
	}
	,getPermissionStrings: function() {
		return com_raidandfade_haxicord_utils_DPERMS.PermsAsNamedList(this.permissions);
	}
	,__class__: com_raidandfade_haxicord_types_Role
};
var com_raidandfade_haxicord_types_Snowflake = function(flake) {
	if(flake != null) {
		this.id = flake;
		var _f = parseFloat(flake) / 4194304;
		this.timestamp = _f + 1420070400000;
	} else {
		this.id = "-1";
		this.timestamp = -1;
	}
};
com_raidandfade_haxicord_types_Snowflake.__name__ = true;
com_raidandfade_haxicord_types_Snowflake.generate = function() {
	var flake = new com_raidandfade_haxicord_types_Snowflake();
	flake.timestamp = new Date().getTime() / 1000;
	var now = flake.timestamp - 1420070400000;
	flake.id = "" + now * 4194304;
	return flake;
};
com_raidandfade_haxicord_types_Snowflake.eq = function(a,b) {
	return a.id == b.id;
};
com_raidandfade_haxicord_types_Snowflake.prototype = {
	toString: function() {
		return this.id;
	}
	,equals: function(b) {
		return this.id == b.id;
	}
	,__class__: com_raidandfade_haxicord_types_Snowflake
};
var com_raidandfade_haxicord_types_StoreChannel = function(_chan,_client) {
	this.client = _client;
	this.id = new com_raidandfade_haxicord_types_Snowflake(_chan.id);
	this.type = _chan.type;
	this.parent_id = new com_raidandfade_haxicord_types_Snowflake(_chan.parent_id);
	this.guild_id = new com_raidandfade_haxicord_types_Snowflake(_chan.guild_id);
	this.name = _chan.name;
	this.nsfw = _chan.nsfw;
	this.position = _chan.position;
	this.permission_overwrites = _chan.permission_overwrites;
};
com_raidandfade_haxicord_types_StoreChannel.__name__ = true;
com_raidandfade_haxicord_types_StoreChannel.fromStruct = function(_chan,_client) {
	return new com_raidandfade_haxicord_types_StoreChannel(_chan,_client);
};
com_raidandfade_haxicord_types_StoreChannel.__super__ = com_raidandfade_haxicord_types_GuildChannel;
com_raidandfade_haxicord_types_StoreChannel.prototype = $extend(com_raidandfade_haxicord_types_GuildChannel.prototype,{
	_update: function(_chan) {
		if(_chan.name != null) {
			this.name = _chan.name;
		}
		if(_chan.position != null) {
			this.position = _chan.position;
		}
		if(_chan.permission_overwrites != null) {
			this.permission_overwrites = _chan.permission_overwrites;
		}
		if(_chan.nsfw != null) {
			this.nsfw = _chan.nsfw;
		}
	}
	,inGuild: function() {
		return true;
	}
	,__class__: com_raidandfade_haxicord_types_StoreChannel
});
var com_raidandfade_haxicord_types_User = function(_user,_client) {
	this.client = _client;
	this.isLoaded = _user != null;
	if(!this.isLoaded) {
		return;
	}
	this.id = new com_raidandfade_haxicord_types_Snowflake(_user.id);
	this.tag = "<@" + this.id.id + ">";
	this.username = _user.username;
	this.discriminator = _user.discriminator;
	this.avatar = _user.avatar;
	this.avatarUrl = "https://cdn.discordapp.com/avatars/" + _user.id + "/" + _user.avatar + ".png";
	this.bot = _user.bot;
	this.presence = { status : "online"};
	if(_user.mfa_enabled != null) {
		this.mfa_enabled = _user.mfa_enabled;
	}
	if(_user.verified != null) {
		this.verified = _user.verified;
	}
	if(_user.email != null) {
		this.email = _user.email;
	}
	if(_user.flags != null) {
		this.flags = _user.flags;
	}
	if(_user.premium_type != null) {
		this.premium_type = _user.premium_type;
	}
};
com_raidandfade_haxicord_types_User.__name__ = true;
com_raidandfade_haxicord_types_User.prototype = {
	_update: function(_user) {
		if(_user.username != null) {
			this.username = _user.username;
		}
		if(_user.discriminator != null) {
			this.discriminator = _user.discriminator;
		}
		if(_user.avatar != null) {
			this.avatar = _user.avatar;
		}
		if(_user.avatar != null) {
			this.avatarUrl = "https://cdn.discordapp.com/avatars/" + _user.id + "/" + _user.avatar + ".png";
		}
		if(_user.bot != null) {
			this.bot = _user.bot;
		}
		if(_user.mfa_enabled != null) {
			this.mfa_enabled = _user.mfa_enabled;
		}
		if(_user.verified != null) {
			this.verified = _user.verified;
		}
		if(_user.email != null) {
			this.email = _user.email;
		}
		if(_user.flags != null) {
			this.flags = _user.flags;
		}
		if(_user.premium_type != null) {
			this.premium_type = _user.premium_type;
		}
	}
	,load: function() {
		if(this.isLoaded) {
			return;
		}
		this.client.getUser(this.id.id,function(_) {
		});
	}
	,__class__: com_raidandfade_haxicord_types_User
};
var com_raidandfade_haxicord_types_VoiceChannel = function(_chan,_client) {
	this.client = _client;
	this.id = new com_raidandfade_haxicord_types_Snowflake(_chan.id);
	this.type = _chan.type;
	this.parent_id = new com_raidandfade_haxicord_types_Snowflake(_chan.parent_id);
	this.guild_id = new com_raidandfade_haxicord_types_Snowflake(_chan.guild_id);
	this.name = _chan.name;
	this.nsfw = _chan.nsfw;
	this.position = _chan.position;
	this.permission_overwrites = _chan.permission_overwrites;
	this.bitrate = _chan.bitrate;
	this.user_limit = _chan.user_limit;
};
com_raidandfade_haxicord_types_VoiceChannel.__name__ = true;
com_raidandfade_haxicord_types_VoiceChannel.fromStruct = function(_chan,_client) {
	return new com_raidandfade_haxicord_types_VoiceChannel(_chan,_client);
};
com_raidandfade_haxicord_types_VoiceChannel.__super__ = com_raidandfade_haxicord_types_GuildChannel;
com_raidandfade_haxicord_types_VoiceChannel.prototype = $extend(com_raidandfade_haxicord_types_GuildChannel.prototype,{
	_update: function(_chan) {
		if(_chan.name != null) {
			this.name = _chan.name;
		}
		if(_chan.position != null) {
			this.position = _chan.position;
		}
		if(_chan.permission_overwrites != null) {
			this.permission_overwrites = _chan.permission_overwrites;
		}
		if(_chan.bitrate != null) {
			this.bitrate = _chan.bitrate;
		}
		if(_chan.user_limit != null) {
			this.user_limit = _chan.user_limit;
		}
		if(_chan.nsfw != null) {
			this.nsfw = _chan.nsfw;
		}
	}
	,__class__: com_raidandfade_haxicord_types_VoiceChannel
});
var com_raidandfade_haxicord_types_structs_OverwriteType = $hxEnums["com.raidandfade.haxicord.types.structs.OverwriteType"] = { __ename__ : true, __constructs__ : ["Role","Member"]
	,Role: {_hx_index:0,__enum__:"com.raidandfade.haxicord.types.structs.OverwriteType",toString:$estr}
	,Member: {_hx_index:1,__enum__:"com.raidandfade.haxicord.types.structs.OverwriteType",toString:$estr}
};
var com_raidandfade_haxicord_utils_DPERMS = function() { };
com_raidandfade_haxicord_utils_DPERMS.__name__ = true;
com_raidandfade_haxicord_utils_DPERMS.PermsAsNamedList = function(p) {
	var l = [];
	var _g = 0;
	var _g1 = com_raidandfade_haxicord_utils_DPERMS.pvals.length;
	while(_g < _g1) {
		var x = _g++;
		if((p & js_Boot.__cast(com_raidandfade_haxicord_utils_DPERMS.pvals[x] , Int)) > 0) {
			l.push(com_raidandfade_haxicord_utils_DPERMS.pnames[x]);
		}
	}
	return l;
};
com_raidandfade_haxicord_utils_DPERMS.PermsAsList = function(p) {
	var l = [];
	var _g = 0;
	var _g1 = com_raidandfade_haxicord_utils_DPERMS.pvals;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if((p & js_Boot.__cast(x , Int)) > 0) {
			l.push(x);
		}
	}
	return l;
};
com_raidandfade_haxicord_utils_DPERMS.PermsToInt = function(p) {
	var i = 0;
	var _g = 0;
	while(_g < p.length) {
		var x = p[_g];
		++_g;
		i |= x;
	}
	return i;
};
com_raidandfade_haxicord_utils_DPERMS.PermsToString = function(p) {
	var l = com_raidandfade_haxicord_utils_DPERMS.PermsAsNamedList(p);
	return l.join(" | ");
};
com_raidandfade_haxicord_utils_DPERMS.PermArrToString = function(p) {
	var result = new Array(p.length);
	var _g = 0;
	var _g1 = p.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = com_raidandfade_haxicord_utils_DPERMS.permToString(p[i]);
	}
	return result.join(" | ");
};
com_raidandfade_haxicord_utils_DPERMS.permToString = function(d) {
	return com_raidandfade_haxicord_utils_DPERMS.pnames[com_raidandfade_haxicord_utils_DPERMS.pvals.indexOf(d)];
};
var com_raidandfade_haxicord_utils_Https = function() { };
com_raidandfade_haxicord_utils_Https.__name__ = true;
com_raidandfade_haxicord_utils_Https.stringify = function(d) {
	return JSON.stringify(d);
};
com_raidandfade_haxicord_utils_Https.queryString = function(datar,startMark) {
	if(startMark == null) {
		startMark = true;
	}
	try {
		var data = js_Boot.__cast(datar , haxe_ds_StringMap);
		var s = startMark ? "?" : "";
		var c = 0;
		var k = data.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var v = __map_reserved[k1] != null ? data.getReserved(k1) : data.h[k1];
			if(c++ != 0) {
				s += "&";
			}
			s += k1 + "=" + Std.string(v);
		}
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return "";
	}
};
com_raidandfade_haxicord_utils_Https.makeRequest = function(url,method,_callback,_d,_headers,async,isJson) {
	if(isJson == null) {
		isJson = true;
	}
	if(async == null) {
		async = true;
	}
	if(method == null) {
		method = "GET";
	}
	if(async) {
		var url1 = url;
		var method1 = method;
		var _callback1 = _callback;
		var _d1 = _d;
		var _headers1 = _headers;
		var isJson1 = isJson;
		haxe_Timer.delay(function() {
			com_raidandfade_haxicord_utils_Https._makeRequest(url1,method1,_callback1,_d1,_headers1,isJson1);
		},0);
	} else {
		com_raidandfade_haxicord_utils_Https._makeRequest(url,method,_callback,_d,_headers,isJson);
	}
};
com_raidandfade_haxicord_utils_Https.parseJson = function(st,j,forceError) {
	if(forceError == null) {
		forceError = false;
	}
	try {
		if(forceError) {
			return { "status" : st, "error" : JSON.parse(j)};
		} else {
			return { "status" : st, "data" : JSON.parse(j)};
		}
	} catch( d ) {
		haxe_CallStack.lastException = d;
		var d1 = ((d) instanceof js__$Boot_HaxeError) ? d.val : d;
		return { "status" : st, "error" : "Could not parse Json.", "Content" : j};
	}
};
com_raidandfade_haxicord_utils_Https._makeRequest = function(url,method,_callback,_d,_headers,isJson) {
	if(isJson == null) {
		isJson = true;
	}
	if(method == null) {
		method = "GET";
	}
	try {
		var _cb = function(d,e) {
			try {
				_callback(d,e);
			} catch( er ) {
				haxe_CallStack.lastException = er;
				var er1 = ((er) instanceof js__$Boot_HaxeError) ? er.val : er;
				haxe_Log.trace("UNCAUGHT ERROR IN haxe.Https.makeRequest CALLBACK.",{ fileName : "com/raidandfade/haxicord/utils/Https.hx", lineNumber : 100, className : "com.raidandfade.haxicord.utils.Https", methodName : "_makeRequest"});
				haxe_Log.trace(Std.string(er1) + haxe_CallStack.toString(haxe_CallStack.exceptionStack()),{ fileName : "com/raidandfade/haxicord/utils/Https.hx", lineNumber : 101, className : "com.raidandfade.haxicord.utils.Https", methodName : "_makeRequest"});
			}
		};
		if(_headers == null) {
			_headers = new haxe_ds_StringMap();
		}
		method = method.toUpperCase();
		if(!(__map_reserved["User-Agent"] != null ? _headers.existsReserved("User-Agent") : _headers.h.hasOwnProperty("User-Agent"))) {
			var value = com_raidandfade_haxicord_DiscordClient.userAgent;
			if(__map_reserved["User-Agent"] != null) {
				_headers.setReserved("User-Agent",value);
			} else {
				_headers.h["User-Agent"] = value;
			}
		}
		var _data = typeof(_d) == "string" ? _d : com_raidandfade_haxicord_utils_Https.stringify(_d);
		if(["POST","PUT","PATCH"].indexOf(method) > -1 && _data == null) {
			if(__map_reserved["Content-Length"] != null) {
				_headers.setReserved("Content-Length","0");
			} else {
				_headers.h["Content-Length"] = "0";
			}
		}
		var this1 = { };
		var headers = this1;
		var h = _headers.keys();
		while(h.hasNext()) {
			var h1 = h.next();
			headers[h1] = __map_reserved[h1] != null ? _headers.getReserved(h1) : _headers.h[h1];
		}
		var path = js_node_Url.parse(url).pathname;
		var options = { "hostname" : js_node_Url.parse(url).host, "path" : path, "method" : method, "headers" : headers};
		var req = js_node_Https.request(options,function(res) {
			var datas = "";
			res.on("data",function(all) {
				datas += all;
			});
			res.on("end",function() {
				var m = new haxe_ds_StringMap();
				var _g = 0;
				var _g1 = Reflect.fields(res.headers);
				while(_g < _g1.length) {
					var k = _g1[_g];
					++_g;
					var v = res.headers[k];
					var key = k.toLowerCase();
					if(__map_reserved[key] != null) {
						m.setReserved(key,v);
					} else {
						m.h[key] = v;
					}
				}
				if(res.statusCode < 200 || res.statusCode >= 300) {
					var req1 = isJson ? com_raidandfade_haxicord_utils_Https.parseJson(res.statusCode,datas,true) : { status : res.statusCode, data : datas};
					_cb(req1,m);
				} else {
					var req2 = isJson ? com_raidandfade_haxicord_utils_Https.parseJson(res.statusCode,datas) : { status : res.statusCode, data : datas};
					_cb(req2,m);
				}
			});
		});
		req.on("error",function(e1) {
			_cb({ status : 0, error : e1, data : null},null);
		});
		if(["POST","PUT","PATCH"].indexOf(method) > -1 && _data != null) {
			req.write(_data);
		}
		req.end();
	} catch( er2 ) {
		haxe_CallStack.lastException = er2;
		var er3 = ((er2) instanceof js__$Boot_HaxeError) ? er2.val : er2;
		haxe_Log.trace(haxe_CallStack.toString(haxe_CallStack.exceptionStack()),{ fileName : "com/raidandfade/haxicord/utils/Https.hx", lineNumber : 262, className : "com.raidandfade.haxicord.utils.Https", methodName : "_makeRequest"});
		_callback({ status : -1, error : Std.string(er3)},null);
	}
};
var com_raidandfade_haxicord_websocket_WebSocketConnection = function(_host) {
	this.ready = false;
	this.queue = [];
	com_raidandfade_haxicord_websocket_WebSocketConnection.host = _host;
	this.create();
};
com_raidandfade_haxicord_websocket_WebSocketConnection.__name__ = true;
com_raidandfade_haxicord_websocket_WebSocketConnection.prototype = {
	create: function() {
		var _gthis = this;
		haxe_Log.trace("starting",{ fileName : "Source/com/raidandfade/haxicord/websocket/WebSocketConnection.hx", lineNumber : 67, className : "com.raidandfade.haxicord.websocket.WebSocketConnection", methodName : "create"});
		com_raidandfade_haxicord_websocket_WebSocketConnection.ws = haxe_net_WebSocket.create(com_raidandfade_haxicord_websocket_WebSocketConnection.host,[],null,false);
		com_raidandfade_haxicord_websocket_WebSocketConnection.ws.onopen = function() {
			_gthis.ready = true;
			haxe_EntryPoint.runInMainThread(function() {
				var _g = 0;
				var _g1 = _gthis.queue;
				while(_g < _g1.length) {
					var m = _g1[_g];
					++_g;
					_gthis.send(m);
				}
			});
			haxe_EntryPoint.runInMainThread($bind(_gthis,_gthis.onReady));
		};
		com_raidandfade_haxicord_websocket_WebSocketConnection.ws.onmessageString = function(m1) {
			var f = $bind(_gthis,_gthis.onMessage);
			var m2 = m1;
			haxe_EntryPoint.runInMainThread(function() {
				f(m2);
			});
		};
		var buf = new haxe_io_BytesBuffer();
		var z = js_node_Zlib.createInflate();
		com_raidandfade_haxicord_websocket_WebSocketConnection.ws.onmessageBytes = function(bytes) {
			try {
				if(bytes.toHex().length < 8 || HxOverrides.substr(bytes.toHex(),-8,null) != com_raidandfade_haxicord_websocket_WebSocketConnection.ZLIB_SUFFIX) {
					var buf1 = new haxe_io_BytesBuffer();
					buf1.addBytes(bytes,0,bytes.length);
					return;
				}
				var data = bytes.b;
				var buf2 = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length);
				var opts_flush = js_node_Zlib.Z_SYNC_FLUSH;
				var opts_finishFlush = js_node_Zlib.Z_SYNC_FLUSH;
				z.write(buf2,null,function() {
					var x = z.read();
					var f1 = $bind(_gthis,_gthis.onMessage);
					var m3 = x;
					haxe_EntryPoint.runInMainThread(function() {
						f1(m3);
					});
				});
			} catch( e ) {
				haxe_CallStack.lastException = e;
				haxe_Log.trace(Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e) + haxe_CallStack.toString(haxe_CallStack.exceptionStack()),{ fileName : "Source/com/raidandfade/haxicord/websocket/WebSocketConnection.hx", lineNumber : 125, className : "com.raidandfade.haxicord.websocket.WebSocketConnection", methodName : "create"});
			}
		};
		com_raidandfade_haxicord_websocket_WebSocketConnection.ws.onerror = $bind(this,this.onError);
		com_raidandfade_haxicord_websocket_WebSocketConnection.ws.onclose = $bind(this,this._onClose);
	}
	,close: function() {
		com_raidandfade_haxicord_websocket_WebSocketConnection.ws.close();
	}
	,sendJson: function(d) {
		this.send(JSON.stringify(d));
	}
	,send: function(m) {
		if(!this.ready) {
			this.queue.push(m);
		} else {
			com_raidandfade_haxicord_websocket_WebSocketConnection.ws.sendString(m);
		}
	}
	,_onClose: function(m) {
		this.ready = false;
		haxe_Log.trace("died",{ fileName : "Source/com/raidandfade/haxicord/websocket/WebSocketConnection.hx", lineNumber : 171, className : "com.raidandfade.haxicord.websocket.WebSocketConnection", methodName : "_onClose"});
		this.onClose(m);
	}
	,onClose: function(m) {
	}
	,onReady: function() {
	}
	,onError: function(s) {
	}
	,onMessage: function(m) {
	}
	,__class__: com_raidandfade_haxicord_websocket_WebSocketConnection
};
var commands_Command = function() {
};
commands_Command.__name__ = true;
commands_Command.prototype = {
	shortHelp: function() {
		return this.shorthelp;
	}
	,longHelp: function() {
		return this.longhelp;
	}
	,_call: function(m,b) {
	}
	,call: function(_msg,_bot) {
		this._call(_msg,_bot);
		haxe_Log.trace("Command " + this.name + " used by : " + _msg.author.username,{ fileName : "Source/commands/Command.hx", lineNumber : 20, className : "commands.Command", methodName : "call"});
	}
	,__class__: commands_Command
};
var commands_Help = function() {
	this.name = "Help";
	this.shorthelp = "shorthelp";
	this.longhelp = "longhelp";
	commands_Command.call(this);
};
commands_Help.__name__ = true;
commands_Help.__super__ = commands_Command;
commands_Help.prototype = $extend(commands_Command.prototype,{
	_call: function(m,_bot) {
		var commands1 = CommandHandler.getCommands();
		var stringBuf_b = "";
		var o = commands1.keys();
		while(o.hasNext()) {
			var o1 = o.next();
			if((__map_reserved[o1] != null ? commands1.getReserved(o1) : commands1.h[o1]).name == "Help") {
				continue;
			}
			stringBuf_b += Std.string("\n" + (__map_reserved[o1] != null ? commands1.getReserved(o1) : commands1.h[o1]).name + " : " + (__map_reserved[o1] != null ? commands1.getReserved(o1) : commands1.h[o1]).shortHelp());
		}
		m.reply({ embed : { title : "Available Commands", description : stringBuf_b}});
		haxe_Log.trace("Help Given",{ fileName : "Source/commands/Help.hx", lineNumber : 19, className : "commands.Help", methodName : "_call"});
	}
	,__class__: commands_Help
});
var commands_Kick = function() {
	this.name = "kick";
	this.shorthelp = "Kicks the mentioned user.";
	this.longhelp = "Usage : `]kick user \"reason\"`";
	commands_Command.call(this);
};
commands_Kick.__name__ = true;
commands_Kick.__super__ = commands_Command;
commands_Kick.prototype = $extend(commands_Command.prototype,{
	_call: function(m,b) {
		var u = m.getMember();
		var args = CommandHandler.parseArgs(m,this.name);
		var tmp = services_UserService.canKick(u);
	}
	,__class__: commands_Kick
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = true;
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_DateUtils = function() { };
haxe_DateUtils.__name__ = true;
haxe_DateUtils.fromISO8601 = function(iso) {
	var isoreg = new EReg("([1-9][0-9]{3}-(?:(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9])|(0[13-9]|1[0-2])-(29|30)|(0[13578]|1[02])-(31))|([1-9][0-9](?:0[48]|[2468][048]|[13579][26])|([2468][048]|[13579][26])00)-02-29)T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]{1,9})?(Z|[+-][01][0-9]:[0-5][0-9])","");
	if(!isoreg.match(iso)) {
		throw new js__$Boot_HaxeError("Invalid ISO8601 date");
	}
	var year = Std.parseInt(isoreg.matched(1));
	var month = 0;
	var day = 1;
	if(isoreg.matched(2) != null) {
		month = Std.parseInt(isoreg.matched(2));
		day = Std.parseInt(isoreg.matched(3));
	} else if(isoreg.matched(4) != null) {
		month = Std.parseInt(isoreg.matched(4));
		day = Std.parseInt(isoreg.matched(5));
	} else {
		month = Std.parseInt(isoreg.matched(6));
		day = Std.parseInt(isoreg.matched(7));
	}
	var hour = Std.parseInt(isoreg.matched(10));
	var minute = Std.parseInt(isoreg.matched(11));
	var second = Std.parseInt(isoreg.matched(12));
	var fraction = parseFloat("0" + isoreg.matched(13));
	var date = new Date(year,month - 1,day,hour,minute,second);
	var properd = new Date(date.getTime() + fraction);
	return properd;
};
haxe_DateUtils.toISO8601 = function(d) {
	var y = "" + d.getFullYear();
	var mo = "" + (d.getMonth() + 1);
	var da = "" + d.getDate();
	var h = "" + d.getHours();
	var m = "" + d.getMinutes();
	var s = "" + d.getSeconds();
	var ms = "" + d.getTime() % 1000;
	if(mo.length == 1) {
		mo = "0" + mo;
	}
	if(da.length == 1) {
		da = "0" + da;
	}
	if(h.length == 1) {
		h = "0" + h;
	}
	if(m.length == 1) {
		m = "0" + m;
	}
	if(s.length == 1) {
		s = "0" + s;
	}
	if(ms.length == 1) {
		ms = "00" + ms;
	}
	if(ms.length == 2) {
		ms = "0" + ms;
	}
	var str = y + "-" + mo + "-" + da + "T" + h + ":" + m + ":" + s + "." + ms + "Z";
	return str;
};
haxe_DateUtils.getTimezoneOffset = function() {
	return new Date(null,null,null,null,null,null).getTimezoneOffset() * 60;
};
haxe_DateUtils.utcNow = function() {
	var d = new Date();
	var time = d.getTime() + haxe_DateUtils.getTimezoneOffset() * 1000;
	var utcDate = new Date(time);
	return utcDate;
};
haxe_DateUtils.main = function() {
};
var haxe_EntryPoint = function() { };
haxe_EntryPoint.__name__ = true;
haxe_EntryPoint.runInMainThread = function(f) {
	haxe_EntryPoint.pending.push(f);
};
haxe_EntryPoint.addThread = function(f) {
	haxe_EntryPoint.threadCount++;
	haxe_EntryPoint.pending.push(function() {
		f();
		haxe_EntryPoint.threadCount--;
	});
};
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(nextTick < 0) {
		return;
	}
	setTimeout(haxe_EntryPoint.run,nextTick);
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
haxe_MainEvent.__name__ = true;
haxe_MainEvent.prototype = {
	__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
haxe_MainLoop.__name__ = true;
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.addThread = function(f) {
	haxe_EntryPoint.addThread(f);
};
haxe_MainLoop.runInMainThread = function(f) {
	haxe_EntryPoint.runInMainThread(f);
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw new js__$Boot_HaxeError("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = Date.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_List = function() { };
haxe_ds_List.__name__ = true;
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_net_ReadyState = $hxEnums["haxe.net.ReadyState"] = { __ename__ : true, __constructs__ : ["Connecting","Open","Closing","Closed"]
	,Connecting: {_hx_index:0,__enum__:"haxe.net.ReadyState",toString:$estr}
	,Open: {_hx_index:1,__enum__:"haxe.net.ReadyState",toString:$estr}
	,Closing: {_hx_index:2,__enum__:"haxe.net.ReadyState",toString:$estr}
	,Closed: {_hx_index:3,__enum__:"haxe.net.ReadyState",toString:$estr}
};
var haxe_net_WebSocket = function() {
};
haxe_net_WebSocket.__name__ = true;
haxe_net_WebSocket.create = function(url,protocols,origin,debug) {
	if(debug == null) {
		debug = false;
	}
	return new haxe_net_impl_WebSocketNodejs(url);
};
haxe_net_WebSocket.defer = function(callback) {
	haxe_Timer.delay(callback,0);
};
haxe_net_WebSocket.prototype = {
	process: function() {
	}
	,sendString: function(message) {
	}
	,sendBytes: function(message) {
	}
	,close: function() {
	}
	,get_readyState: function() {
		return haxe_net_ReadyState.Closed;
	}
	,onopen: function() {
	}
	,onerror: function(message) {
	}
	,onmessageString: function(message) {
	}
	,onmessageBytes: function(message) {
	}
	,onclose: function(code) {
	}
	,__class__: haxe_net_WebSocket
};
var haxe_net_impl_NodeJsWS = require("ws");
var haxe_net_impl_WebSocketNodejs = function(url,options) {
	var _gthis = this;
	haxe_net_WebSocket.call(this);
	this.impl = new haxe_net_impl_NodeJsWS(url);
	this.impl.on("open",function() {
		_gthis.onopen();
	});
	this.impl.on("close",function(c,r) {
		_gthis.onclose(c);
	});
	this.impl.on("error",function(e) {
		_gthis.onerror(e);
	});
	this.impl.on("message",function(e1) {
		var m = e1;
		if(typeof(m) == "string") {
			_gthis.onmessageString(m);
		} else if(((m) instanceof ArrayBuffer)) {
			haxe_Log.trace("Unhandled websocket onmessage " + m,{ fileName : "haxe/net/impl/WebSocketNodejs.hx", lineNumber : 35, className : "haxe.net.impl.WebSocketNodejs", methodName : "new"});
		} else if(((m) instanceof js_node_buffer_Buffer)) {
			_gthis.onmessageBytes(haxe_io_Bytes.ofData(m));
		} else {
			haxe_Log.trace("Unhandled websocket onmessage " + m,{ fileName : "haxe/net/impl/WebSocketNodejs.hx", lineNumber : 47, className : "haxe.net.impl.WebSocketNodejs", methodName : "new"});
		}
	});
};
haxe_net_impl_WebSocketNodejs.__name__ = true;
haxe_net_impl_WebSocketNodejs.__super__ = haxe_net_WebSocket;
haxe_net_impl_WebSocketNodejs.prototype = $extend(haxe_net_WebSocket.prototype,{
	sendString: function(message) {
		this.impl.send(message);
	}
	,sendBytes: function(message) {
		this.impl.send(message.b.bufferValue);
	}
	,close: function() {
		this.impl.close();
	}
	,get_readyState: function() {
		switch(this.impl.readyState) {
		case 0:
			return haxe_net_ReadyState.Connecting;
		case 1:
			return haxe_net_ReadyState.Open;
		case 2:
			return haxe_net_ReadyState.Closing;
		case 3:
			return haxe_net_ReadyState.Closed;
		default:
			throw new js__$Boot_HaxeError("Unexpected websocket state");
		}
	}
	,__class__: haxe_net_impl_WebSocketNodejs
});
var haxe_zip_Uncompress = function() { };
haxe_zip_Uncompress.__name__ = true;
haxe_zip_Uncompress.run = function(src,bufsize) {
	var data = src.b;
	var buffer = js_node_Zlib.inflateSync(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,src.length),bufsize == null ? { } : { chunkSize : bufsize});
	return js_node_buffer__$Buffer_Helper.bytesOfBuffer(buffer);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_Https = require("https");
var js_node__$KeyValue_KeyValue_$Impl_$ = {};
js_node__$KeyValue_KeyValue_$Impl_$.__name__ = true;
js_node__$KeyValue_KeyValue_$Impl_$.get_key = function(this1) {
	return this1[0];
};
js_node__$KeyValue_KeyValue_$Impl_$.get_value = function(this1) {
	return this1[1];
};
var js_node_Url = require("url");
var js_node_Zlib = require("zlib");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_buffer__$Buffer_Helper = function() { };
js_node_buffer__$Buffer_Helper.__name__ = true;
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var js_node_stream__$Writable_WritableNewOptionsAdapter_$Impl_$ = {};
js_node_stream__$Writable_WritableNewOptionsAdapter_$Impl_$.__name__ = true;
js_node_stream__$Writable_WritableNewOptionsAdapter_$Impl_$.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$ = {};
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$.__name__ = true;
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$._new = function(name,value) {
	var this1 = [name,value];
	return this1;
};
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$.get_name = function(this1) {
	return this1[0];
};
js_node_url__$URLSearchParams_URLSearchParamsEntry_$Impl_$.get_value = function(this1) {
	return this1[1];
};
var services_Modio = function() { };
services_Modio.__name__ = true;
services_Modio.init = function() {
};
services_Modio.getMods = function() {
	var key = Bot.getModioKey();
	var data = null;
	var this1 = { };
	var headers = this1;
	headers["accept"] = "application-json";
	var path = "games/34/mods?api_key=" + key;
	var options = { host : "api.mod.io/v1/", path : path, port : 403, method : "GET", headers : headers};
	var req = js_node_Https.request(options,function(res) {
		res.on("data",function(all) {
			data += all;
		});
		res.on("end",function() {
		});
	});
	req.on("error",function(e) {
		new BotError("MODIO ERROR : " + Std.string(e));
	});
	req.end();
	return data;
};
var services_UserService = function() { };
services_UserService.__name__ = true;
services_UserService.getPerms = function(u,s) {
	var perm = Reflect.field(com_raidandfade_haxicord_utils_DPERMS,s);
	if(u.hasPermissions(perm)) {
		return true;
	} else {
		return false;
	}
};
services_UserService.canKick = function(u) {
	var tmp = u.hasPermissions(com_raidandfade_haxicord_utils_DPERMS.ADMINISTRATOR) || u.hasPermissions(com_raidandfade_haxicord_utils_DPERMS.KICK_MEMBERS);
	return tmp;
};
services_UserService.canBan = function(u) {
	var tmp = u.hasPermissions(com_raidandfade_haxicord_utils_DPERMS.ADMINISTRATOR) || u.hasPermissions(com_raidandfade_haxicord_utils_DPERMS.BAN_MEMBERS);
	return tmp;
};
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = true;
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _ ) {
		haxe_CallStack.lastException = _;
		var _1 = ((_) instanceof js__$Boot_HaxeError) ? _.val : _;
		return false;
	}
};
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = true;
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
	,__class__: sys_io_FileInput
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = true;
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: sys_io_FileOutput
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__ : true, __constructs__ : ["SeekBegin","SeekCur","SeekEnd"]
	,SeekBegin: {_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Bot.prefix = "]";
BotError.error_map = [];
CommandHandler.has_init = false;
CommandHandler.commands = new haxe_ds_StringMap();
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
com_raidandfade_haxicord_DiscordClient.libName = "Haxicord";
com_raidandfade_haxicord_DiscordClient.userAgent = "DiscordBot (https://github.com/RaidAndFade/Haxicord, 0.2.0)";
com_raidandfade_haxicord_DiscordClient.gatewayVersion = 6;
com_raidandfade_haxicord_endpoints_Endpoints.BASEURL = "https://discordapp.com/api/";
com_raidandfade_haxicord_logger_Logger.outPrefix = "[%c{Green}%t%c{Reset}] %c{lightblue}%cn%c{Reset}->%c{LightBlue}%fn()%c{Reset}:%c{LightRed}%l%c{Reset}: ";
com_raidandfade_haxicord_utils_DPERMS.CREATE_INSTANT_INVITE = 1;
com_raidandfade_haxicord_utils_DPERMS.KICK_MEMBERS = 2;
com_raidandfade_haxicord_utils_DPERMS.BAN_MEMBERS = 4;
com_raidandfade_haxicord_utils_DPERMS.ADMINISTRATOR = 8;
com_raidandfade_haxicord_utils_DPERMS.MANAGE_CHANNELS = 16;
com_raidandfade_haxicord_utils_DPERMS.MANAGE_GUILD = 32;
com_raidandfade_haxicord_utils_DPERMS.ADD_REACTIONS = 64;
com_raidandfade_haxicord_utils_DPERMS.VIEW_AUDIT_LOG = 128;
com_raidandfade_haxicord_utils_DPERMS.VIEW_CHANNEL = 1024;
com_raidandfade_haxicord_utils_DPERMS.SEND_MESSAGES = 2048;
com_raidandfade_haxicord_utils_DPERMS.SEND_TTS_MESSAGES = 4096;
com_raidandfade_haxicord_utils_DPERMS.MANAGE_MESSAGES = 8192;
com_raidandfade_haxicord_utils_DPERMS.EMBED_LINKS = 16384;
com_raidandfade_haxicord_utils_DPERMS.ATTACH_FILES = 32768;
com_raidandfade_haxicord_utils_DPERMS.READ_MESSAGE_HISTORY = 65536;
com_raidandfade_haxicord_utils_DPERMS.MENTION_EVERYONE = 131072;
com_raidandfade_haxicord_utils_DPERMS.USE_EXTERNAL_EMOJIS = 262144;
com_raidandfade_haxicord_utils_DPERMS.CONNECT = 1048576;
com_raidandfade_haxicord_utils_DPERMS.SPEAK = 2097152;
com_raidandfade_haxicord_utils_DPERMS.MUTE_MEMBERS = 4194304;
com_raidandfade_haxicord_utils_DPERMS.DEAFEN_MEMBERS = 8388608;
com_raidandfade_haxicord_utils_DPERMS.MOVE_MEMBERS = 16777216;
com_raidandfade_haxicord_utils_DPERMS.USE_VAD = 33554432;
com_raidandfade_haxicord_utils_DPERMS.PRIORITY_SPEAKER = 256;
com_raidandfade_haxicord_utils_DPERMS.CHANGE_NICKNAME = 67108864;
com_raidandfade_haxicord_utils_DPERMS.MANAGE_NICKNAMES = 134217728;
com_raidandfade_haxicord_utils_DPERMS.MANAGE_ROLES = 268435456;
com_raidandfade_haxicord_utils_DPERMS.MANAGE_WEBHOOKS = 536870912;
com_raidandfade_haxicord_utils_DPERMS.MANAGE_EMOJIS = 1073741824;
com_raidandfade_haxicord_utils_DPERMS.pnames = ["CREATE_INSTANT_INVITE","KICK_MEMBERS","BAN_MEMBERS","ADMINISTRATOR","MANAGE_CHANNELS","MANAGE_GUILD","ADD_REACTIONS","VIEW_AUDIT_LOG","VIEW_CHANNEL","SEND_MESSAGES","SEND_TTS_MESSAGES","MANAGE_MESSAGES","EMBED_LINKS","ATTACH_FILES","READ_MESSAGE_HISTORY","MENTION_EVERYONE","USE_EXTERNAL_EMOJIS","CONNECT","SPEAK","MUTE_MEMBERS","DEAFEN_MEMBERS","MOVE_MEMBERS","USE_VAD","PRIORITY_SPEAKER","CHANGE_NICKNAME","MANAGE_NICKNAMES","MANAGE_ROLES","MANAGE_WEBHOOKS","MANAGE_EMOJIS"];
com_raidandfade_haxicord_utils_DPERMS.pvals = [com_raidandfade_haxicord_utils_DPERMS.CREATE_INSTANT_INVITE,com_raidandfade_haxicord_utils_DPERMS.KICK_MEMBERS,com_raidandfade_haxicord_utils_DPERMS.BAN_MEMBERS,com_raidandfade_haxicord_utils_DPERMS.ADMINISTRATOR,com_raidandfade_haxicord_utils_DPERMS.MANAGE_CHANNELS,com_raidandfade_haxicord_utils_DPERMS.MANAGE_GUILD,com_raidandfade_haxicord_utils_DPERMS.ADD_REACTIONS,com_raidandfade_haxicord_utils_DPERMS.VIEW_AUDIT_LOG,com_raidandfade_haxicord_utils_DPERMS.VIEW_CHANNEL,com_raidandfade_haxicord_utils_DPERMS.SEND_MESSAGES,com_raidandfade_haxicord_utils_DPERMS.SEND_TTS_MESSAGES,com_raidandfade_haxicord_utils_DPERMS.MANAGE_MESSAGES,com_raidandfade_haxicord_utils_DPERMS.EMBED_LINKS,com_raidandfade_haxicord_utils_DPERMS.ATTACH_FILES,com_raidandfade_haxicord_utils_DPERMS.READ_MESSAGE_HISTORY,com_raidandfade_haxicord_utils_DPERMS.MENTION_EVERYONE,com_raidandfade_haxicord_utils_DPERMS.USE_EXTERNAL_EMOJIS,com_raidandfade_haxicord_utils_DPERMS.CONNECT,com_raidandfade_haxicord_utils_DPERMS.SPEAK,com_raidandfade_haxicord_utils_DPERMS.MUTE_MEMBERS,com_raidandfade_haxicord_utils_DPERMS.DEAFEN_MEMBERS,com_raidandfade_haxicord_utils_DPERMS.MOVE_MEMBERS,com_raidandfade_haxicord_utils_DPERMS.USE_VAD,com_raidandfade_haxicord_utils_DPERMS.PRIORITY_SPEAKER,com_raidandfade_haxicord_utils_DPERMS.CHANGE_NICKNAME,com_raidandfade_haxicord_utils_DPERMS.MANAGE_NICKNAMES,com_raidandfade_haxicord_utils_DPERMS.MANAGE_ROLES,com_raidandfade_haxicord_utils_DPERMS.MANAGE_WEBHOOKS,com_raidandfade_haxicord_utils_DPERMS.MANAGE_EMOJIS];
com_raidandfade_haxicord_websocket_WebSocketConnection.ZLIB_SUFFIX = "0000ffff";
com_raidandfade_haxicord_websocket_WebSocketConnection.BUFFER_SIZE = 1048576;
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
services_Modio.game_id = 34;
{
	Bot.main();
	haxe_EntryPoint.run();
}
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=bot.js.map