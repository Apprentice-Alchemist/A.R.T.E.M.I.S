// Generated by Haxe 4.1.3
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class Bot {
	static main() {
		lib_Logger.setTrace();
		Bot.start();
	}
	static start() {
		Bot.bot = new discordjs_Client();
		Bot.bot.on("ready",function(e) {
			Bot.bot.user.setPresence({ status : "online", activity : { type : "WATCHING", name : "you."}, afk : false});
		});
		Bot.bot.on("message",function(m) {
			try {
				if(m.author.bot) {
					return;
				} else if(CommandHandler.handle(m)) {
					return;
				} else {
					MessageHandler.handle(m);
				}
			} catch( _g ) {
				let err = haxe_Exception.caught(_g);
				m.channel.send("BORK BORK BORK! AN ERROR HAS OCCURED! <@525025580106907659> \n" + err.get_message());
			}
		});
		Bot.bot.login(Bot.getToken()).then(function(e) {
			haxe_Log.trace("Ready!",{ fileName : "Source/Bot.hx", lineNumber : 46, className : "Bot", methodName : "start"});
			Bot.startTime = new Date();
		},function(e) {
			haxe_Log.trace(e,{ fileName : "Source/Bot.hx", lineNumber : 49, className : "Bot", methodName : "start"});
			haxe_Timer.delay(Bot.start,5000);
		});
	}
	static onReady() {
		haxe_Log.trace("Ready!",{ fileName : "Source/Bot.hx", lineNumber : 55, className : "Bot", methodName : "onReady"});
		haxe_Log.trace("Invite link : " + Std.string(Bot.bot.generateInvite(["ADMINISTATOR"])),{ fileName : "Source/Bot.hx", lineNumber : 56, className : "Bot", methodName : "onReady"});
	}
	static bork(err,ch) {
		ch.send("BORK BORK BORK! AN ERROR HAS OCCURED! <@525025580106907659>");
		ch.send(err);
	}
	static getToken() {
		if(sys_FileSystem.exists("auth.json")) {
			return lib_JsonHandler.read("auth.json").token;
		} else {
			return process.env["token"].toString();
		}
	}
	static getModioKey() {
		if(sys_FileSystem.exists("auth.json")) {
			return lib_JsonHandler.read("auth.json").modio_key;
		} else {
			return process.env["modio_key"].toString();
		}
	}
}
Bot.bot = null;
Bot.startTime = null;
$hxClasses["Bot"] = Bot;
Bot.__name__ = "Bot";
class lib_EvalHandler {
	constructor() {
		this.interp = new hscript_Interp();
		this.parser = new hscript_Parser();
		this.loadVars(this.interp.variables);
	}
	loadVars(v) {
		let _gthis = this;
		v.h = Object.create(null);
		v.h["true"] = true;
		v.h["false"] = false;
		v.h["null"] = null;
		v.h["Math"] = Math;
		v.h["trace"] = $bind(this,this.doTrace);
		v.h["Logger"] = lib_Logger;
		v.h["Settings"] = lib_Settings;
		v.h["Type"] = Type;
		v.h["Reflect"] = Reflect;
		v.h["Bot"] = Bot;
		v.h["CommandHandler"] = CommandHandler;
		v.h["MessageHandler"] = MessageHandler;
		v.h["EReg"] = EReg;
		v.h["getVars"] = function() {
			return _gthis.interp.variables;
		};
	}
	doTrace(s) {
		let tmp = Std.string(s);
		this.logs.push(tmp);
	}
	evaluate(s,loc) {
		s = StringTools.replace(StringTools.replace(s,Bot.getToken(),""),Bot.getModioKey(),"");
		this.loadVars(this.interp.variables);
		if(loc != null) {
			let o = haxe_ds_StringMap.keysIterator(loc.h);
			while(o.hasNext()) {
				let o1 = o.next();
				this.interp.variables.h[o1] = loc.h[o1];
			}
		}
		this.logs = [];
		let p = this.parser.parseString(s);
		if(p == null) {
			return null;
		}
		let tmp = this.interp.execute(p);
		let b_b = "";
		let _g = 0;
		let _g1 = this.logs;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			b_b += Std.string(o + "\n");
		}
		b_b += Std.string(Std.string(tmp));
		return b_b;
	}
}
$hxClasses["lib.EvalHandler"] = lib_EvalHandler;
lib_EvalHandler.__name__ = "lib.EvalHandler";
Object.assign(lib_EvalHandler.prototype, {
	__class__: lib_EvalHandler
	,interp: null
	,parser: null
	,logs: null
});
class hscript_Interp {
	constructor() {
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		this.resetVariables();
		this.initOps();
	}
	resetVariables() {
		this.variables = new haxe_ds_StringMap();
		let _gthis = this;
		this.variables.h["null"] = null;
		this.variables.h["true"] = true;
		this.variables.h["false"] = false;
		let this1 = this.variables;
		let value = Reflect.makeVarArgs(function(el) {
			let inf = _gthis.posInfos();
			let v = el.shift();
			if(el.length > 0) {
				inf.customParams = el;
			}
			haxe_Log.trace(Std.string(v),inf);
		});
		this1.h["trace"] = value;
	}
	posInfos() {
		return { fileName : "hscript", lineNumber : 0};
	}
	initOps() {
		let me = this;
		this.binops = new haxe_ds_StringMap();
		this.binops.h["+"] = function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		};
		this.binops.h["-"] = function(e1,e2) {
			return me.expr(e1) - me.expr(e2);
		};
		this.binops.h["*"] = function(e1,e2) {
			return me.expr(e1) * me.expr(e2);
		};
		this.binops.h["/"] = function(e1,e2) {
			return me.expr(e1) / me.expr(e2);
		};
		this.binops.h["%"] = function(e1,e2) {
			return me.expr(e1) % me.expr(e2);
		};
		this.binops.h["&"] = function(e1,e2) {
			return me.expr(e1) & me.expr(e2);
		};
		this.binops.h["|"] = function(e1,e2) {
			return me.expr(e1) | me.expr(e2);
		};
		this.binops.h["^"] = function(e1,e2) {
			return me.expr(e1) ^ me.expr(e2);
		};
		this.binops.h["<<"] = function(e1,e2) {
			return me.expr(e1) << me.expr(e2);
		};
		this.binops.h[">>"] = function(e1,e2) {
			return me.expr(e1) >> me.expr(e2);
		};
		this.binops.h[">>>"] = function(e1,e2) {
			return me.expr(e1) >>> me.expr(e2);
		};
		this.binops.h["=="] = function(e1,e2) {
			return me.expr(e1) == me.expr(e2);
		};
		this.binops.h["!="] = function(e1,e2) {
			return me.expr(e1) != me.expr(e2);
		};
		this.binops.h[">="] = function(e1,e2) {
			return me.expr(e1) >= me.expr(e2);
		};
		this.binops.h["<="] = function(e1,e2) {
			return me.expr(e1) <= me.expr(e2);
		};
		this.binops.h[">"] = function(e1,e2) {
			return me.expr(e1) > me.expr(e2);
		};
		this.binops.h["<"] = function(e1,e2) {
			return me.expr(e1) < me.expr(e2);
		};
		this.binops.h["||"] = function(e1,e2) {
			if(me.expr(e1) != true) {
				return me.expr(e2) == true;
			} else {
				return true;
			}
		};
		this.binops.h["&&"] = function(e1,e2) {
			if(me.expr(e1) == true) {
				return me.expr(e2) == true;
			} else {
				return false;
			}
		};
		this.binops.h["="] = $bind(this,this.assign);
		this.binops.h["..."] = function(e1,e2) {
			return new IntIterator(me.expr(e1),me.expr(e2));
		};
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v1,v2) {
			return v1 - v2;
		});
		this.assignOp("*=",function(v1,v2) {
			return v1 * v2;
		});
		this.assignOp("/=",function(v1,v2) {
			return v1 / v2;
		});
		this.assignOp("%=",function(v1,v2) {
			return v1 % v2;
		});
		this.assignOp("&=",function(v1,v2) {
			return v1 & v2;
		});
		this.assignOp("|=",function(v1,v2) {
			return v1 | v2;
		});
		this.assignOp("^=",function(v1,v2) {
			return v1 ^ v2;
		});
		this.assignOp("<<=",function(v1,v2) {
			return v1 << v2;
		});
		this.assignOp(">>=",function(v1,v2) {
			return v1 >> v2;
		});
		this.assignOp(">>>=",function(v1,v2) {
			return v1 >>> v2;
		});
	}
	assign(e1,e2) {
		let v = this.expr(e2);
		switch(e1._hx_index) {
		case 1:
			let id = e1.v;
			let l = this.locals.h[id];
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			let f = e1.f;
			let e = e1.e;
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			let index = e1.index;
			let e3 = e1.e;
			let arr = this.expr(e3);
			let index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				arr[index1] = v;
			}
			break;
		default:
			let e4 = hscript_Error.EInvalidOp("=");
			throw haxe_Exception.thrown(e4);
		}
		return v;
	}
	assignOp(op,fop) {
		let me = this;
		this.binops.h[op] = function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		};
	}
	evalAssignOp(op,fop,e1,e2) {
		let v;
		switch(e1._hx_index) {
		case 1:
			let id = e1.v;
			let l = this.locals.h[id];
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			let f = e1.f;
			let e = e1.e;
			let obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			let index = e1.index;
			let e3 = e1.e;
			let arr = this.expr(e3);
			let index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				v = fop((js_Boot.__cast(arr , haxe_IMap)).get(index1),this.expr(e2));
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				v = fop(arr[index1],this.expr(e2));
				arr[index1] = v;
			}
			break;
		default:
			let e4 = hscript_Error.EInvalidOp(op);
			throw haxe_Exception.thrown(e4);
		}
		return v;
	}
	increment(e,prefix,delta) {
		switch(e._hx_index) {
		case 1:
			let id = e.v;
			let l = this.locals.h[id];
			let v = l == null ? this.variables.h[id] : l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					this.variables.h[id] = v;
				} else {
					l.r = v;
				}
			} else if(l == null) {
				this.variables.h[id] = v + delta;
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			let f = e.f;
			let e1 = e.e;
			let obj = this.expr(e1);
			let v1 = this.get(obj,f);
			if(prefix) {
				v1 += delta;
				this.set(obj,f,v1);
			} else {
				this.set(obj,f,v1 + delta);
			}
			return v1;
		case 16:
			let index = e.index;
			let e2 = e.e;
			let arr = this.expr(e2);
			let index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				let v = (js_Boot.__cast(arr , haxe_IMap)).get(index1);
				if(prefix) {
					v += delta;
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
				} else {
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v + delta);
				}
				return v;
			} else {
				let v = arr[index1];
				if(prefix) {
					v += delta;
					arr[index1] = v;
				} else {
					arr[index1] = v + delta;
				}
				return v;
			}
			break;
		default:
			let e3 = hscript_Error.EInvalidOp(delta > 0 ? "++" : "--");
			throw haxe_Exception.thrown(e3);
		}
	}
	execute(expr) {
		this.depth = 0;
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	exprReturn(e) {
		try {
			return this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				let e = _g1;
				switch(e._hx_index) {
				case 0:
					throw haxe_Exception.thrown("Invalid break");
				case 1:
					throw haxe_Exception.thrown("Invalid continue");
				case 2:
					let v = this.returnValue;
					this.returnValue = null;
					return v;
				}
			} else {
				throw _g;
			}
		}
	}
	duplicate(h) {
		let h2 = new haxe_ds_StringMap();
		let k = haxe_ds_StringMap.keysIterator(h.h);
		while(k.hasNext()) {
			let k1 = k.next();
			h2.h[k1] = h.h[k1];
		}
		return h2;
	}
	restore(old) {
		while(this.declared.length > old) {
			let d = this.declared.pop();
			this.locals.h[d.n] = d.old;
		}
	}
	error(e,rethrow) {
		if(rethrow == null) {
			rethrow = false;
		}
		if(rethrow) {
			throw haxe_Exception.thrown(e);
		} else {
			throw haxe_Exception.thrown(e);
		}
	}
	rethrow(e) {
		throw haxe_Exception.thrown(e);
	}
	resolve(id) {
		let l = this.locals.h[id];
		if(l != null) {
			return l.r;
		}
		let v = this.variables.h[id];
		if(v == null && !Object.prototype.hasOwnProperty.call(this.variables.h,id)) {
			let e = hscript_Error.EUnknownVariable(id);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	expr(e) {
		let _gthis = this;
		switch(e._hx_index) {
		case 0:
			let c = e.c;
			switch(c._hx_index) {
			case 0:
				let v = c.v;
				return v;
			case 1:
				let f = c.f;
				return f;
			case 2:
				let s = c.s;
				return s;
			}
			break;
		case 1:
			let id = e.v;
			return this.resolve(id);
		case 2:
			let _g = e.t;
			let e1 = e.e;
			let n = e.n;
			this.declared.push({ n : n, old : this.locals.h[n]});
			let this1 = this.locals;
			let value = e1 == null ? null : this.expr(e1);
			this1.h[n] = { r : value};
			return null;
		case 3:
			let e2 = e.e;
			return this.expr(e2);
		case 4:
			let exprs = e.e;
			let old = this.declared.length;
			let v1 = null;
			let _g1 = 0;
			while(_g1 < exprs.length) {
				let e = exprs[_g1];
				++_g1;
				v1 = this.expr(e);
			}
			this.restore(old);
			return v1;
		case 5:
			let f1 = e.f;
			let e3 = e.e;
			return this.get(this.expr(e3),f1);
		case 6:
			let e21 = e.e2;
			let e11 = e.e1;
			let op = e.op;
			let fop = this.binops.h[op];
			if(fop == null) {
				let e = hscript_Error.EInvalidOp(op);
				throw haxe_Exception.thrown(e);
			}
			return fop(e11,e21);
		case 7:
			let e4 = e.e;
			let prefix = e.prefix;
			let op1 = e.op;
			switch(op1) {
			case "!":
				return this.expr(e4) != true;
			case "++":
				return this.increment(e4,prefix,1);
			case "-":
				return -this.expr(e4);
			case "--":
				return this.increment(e4,prefix,-1);
			case "~":
				return ~this.expr(e4);
			default:
				let e5 = hscript_Error.EInvalidOp(op1);
				throw haxe_Exception.thrown(e5);
			}
			break;
		case 8:
			let params = e.params;
			let e6 = e.e;
			let args = [];
			let _g2 = 0;
			while(_g2 < params.length) {
				let p = params[_g2];
				++_g2;
				args.push(this.expr(p));
			}
			if(e6._hx_index == 5) {
				let f = e6.f;
				let e = e6.e;
				let obj = this.expr(e);
				if(obj == null) {
					let e = hscript_Error.EInvalidAccess(f);
					throw haxe_Exception.thrown(e);
				}
				return this.fcall(obj,f,args);
			} else {
				return this.call(null,this.expr(e6),args);
			}
			break;
		case 9:
			let e22 = e.e2;
			let e12 = e.e1;
			let econd = e.cond;
			if(this.expr(econd) == true) {
				return this.expr(e12);
			} else if(e22 == null) {
				return null;
			} else {
				return this.expr(e22);
			}
			break;
		case 10:
			let e7 = e.e;
			let econd1 = e.cond;
			this.whileLoop(econd1,e7);
			return null;
		case 11:
			let e8 = e.e;
			let it = e.it;
			let v2 = e.v;
			this.forLoop(v2,it,e8);
			return null;
		case 12:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SBreak);
		case 13:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SContinue);
		case 14:
			let _g3 = e.ret;
			let name = e.name;
			let fexpr = e.e;
			let params1 = e.args;
			let capturedLocals = this.duplicate(this.locals);
			let me = this;
			let hasOpt = false;
			let minParams = 0;
			let _g4 = 0;
			while(_g4 < params1.length) {
				let p = params1[_g4];
				++_g4;
				if(p.opt) {
					hasOpt = true;
				} else {
					minParams += 1;
				}
			}
			let f2 = function(args) {
				if((args == null ? 0 : args.length) != params1.length) {
					if(args.length < minParams) {
						let str = "Invalid number of parameters. Got " + args.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						let e = hscript_Error.ECustom(str);
						throw haxe_Exception.thrown(e);
					}
					let args2 = [];
					let extraParams = args.length - minParams;
					let pos = 0;
					let _g = 0;
					while(_g < params1.length) {
						let p = params1[_g];
						++_g;
						if(p.opt) {
							if(extraParams > 0) {
								args2.push(args[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args[pos++]);
						}
					}
					args = args2;
				}
				let old = me.locals;
				let depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				let _g = 0;
				let _g1 = params1.length;
				while(_g < _g1) {
					let i = _g++;
					me.locals.h[params1[i].name] = { r : args[i]};
				}
				let r = null;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						let e = haxe_Exception.caught(_g).unwrap();
						me.locals = old;
						me.depth = depth;
						throw haxe_Exception.thrown(e);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				me.locals = old;
				me.depth = depth;
				return r;
			};
			let f3 = Reflect.makeVarArgs(f2);
			if(name != null) {
				if(this.depth == 0) {
					this.variables.h[name] = f3;
				} else {
					this.declared.push({ n : name, old : this.locals.h[name]});
					let ref = { r : f3};
					this.locals.h[name] = ref;
					capturedLocals.h[name] = ref;
				}
			}
			return f3;
		case 15:
			let e9 = e.e;
			this.returnValue = e9 == null ? null : this.expr(e9);
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SReturn);
		case 16:
			let index = e.index;
			let e10 = e.e;
			let arr = this.expr(e10);
			let index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				return (js_Boot.__cast(arr , haxe_IMap)).get(index1);
			} else {
				return arr[index1];
			}
			break;
		case 17:
			let arr1 = e.e;
			let tmp;
			if(arr1.length > 0) {
				let _g = arr1[0];
				if(_g._hx_index == 6) {
					let _g1 = _g.e2;
					let _g2 = _g.e1;
					tmp = _g.op == "=>";
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				let isAllString = true;
				let isAllInt = true;
				let isAllObject = true;
				let isAllEnum = true;
				let keys = [];
				let values = [];
				let _g = 0;
				while(_g < arr1.length) {
					let e = arr1[_g];
					++_g;
					if(e._hx_index == 6) {
						if(e.op == "=>") {
							let eValue = e.e2;
							let eKey = e.e1;
							let key = this.expr(eKey);
							let value = this.expr(eValue);
							isAllString = isAllString && typeof(key) == "string";
							isAllInt = isAllInt && (typeof(key) == "number" && ((key | 0) === key));
							isAllObject = isAllObject && Reflect.isObject(key);
							isAllEnum = isAllEnum && Reflect.isEnumValue(key);
							keys.push(key);
							values.push(value);
						} else {
							throw haxe_Exception.thrown("=> expected");
						}
					} else {
						throw haxe_Exception.thrown("=> expected");
					}
				}
				let map;
				if(isAllInt) {
					map = new haxe_ds_IntMap();
				} else if(isAllString) {
					map = new haxe_ds_StringMap();
				} else if(isAllEnum) {
					map = new haxe_ds_EnumValueMap();
				} else if(isAllObject) {
					map = new haxe_ds_ObjectMap();
				} else {
					throw haxe_Exception.thrown("Inconsistent key types");
				}
				let _g1 = 0;
				let _g2 = keys.length;
				while(_g1 < _g2) {
					let n = _g1++;
					(js_Boot.__cast(map , haxe_IMap)).set(keys[n],values[n]);
				}
				return map;
			} else {
				let a = [];
				let _g = 0;
				while(_g < arr1.length) {
					let e = arr1[_g];
					++_g;
					a.push(this.expr(e));
				}
				return a;
			}
			break;
		case 18:
			let params2 = e.params;
			let cl = e.cl;
			let a = [];
			let _g5 = 0;
			while(_g5 < params2.length) {
				let e = params2[_g5];
				++_g5;
				a.push(this.expr(e));
			}
			return this.cnew(cl,a);
		case 19:
			let e13 = e.e;
			throw haxe_Exception.thrown(this.expr(e13));
		case 20:
			let _g6 = e.t;
			let ecatch = e.ecatch;
			let n1 = e.v;
			let e14 = e.e;
			let old1 = this.declared.length;
			let oldTry = this.inTry;
			try {
				this.inTry = true;
				let v = this.expr(e14);
				this.restore(old1);
				this.inTry = oldTry;
				return v;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				let _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					let err = _g1;
					this.inTry = oldTry;
					throw haxe_Exception.thrown(err);
				} else {
					let err = _g1;
					this.restore(old1);
					this.inTry = oldTry;
					this.declared.push({ n : n1, old : this.locals.h[n1]});
					this.locals.h[n1] = { r : err};
					let v = this.expr(ecatch);
					this.restore(old1);
					return v;
				}
			}
			break;
		case 21:
			let fl = e.fl;
			let o = { };
			let _g7 = 0;
			while(_g7 < fl.length) {
				let f = fl[_g7];
				++_g7;
				this.set(o,f.name,this.expr(f.e));
			}
			return o;
		case 22:
			let e23 = e.e2;
			let e15 = e.e1;
			let econd2 = e.cond;
			if(this.expr(econd2) == true) {
				return this.expr(e15);
			} else {
				return this.expr(e23);
			}
			break;
		case 23:
			let def = e.defaultExpr;
			let cases = e.cases;
			let e16 = e.e;
			let val = this.expr(e16);
			let match = false;
			let _g8 = 0;
			while(_g8 < cases.length) {
				let c = cases[_g8];
				++_g8;
				let _g = 0;
				let _g1 = c.values;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					if(this.expr(v) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c.expr);
					break;
				}
			}
			if(!match) {
				val = def == null ? null : this.expr(def);
			}
			return val;
		case 24:
			let e17 = e.e;
			let econd3 = e.cond;
			this.doWhileLoop(econd3,e17);
			return null;
		case 25:
			let _g9 = e.args;
			let _g10 = e.name;
			let e18 = e.e;
			return this.expr(e18);
		case 26:
			let _g11 = e.t;
			let e19 = e.e;
			return this.expr(e19);
		}
	}
	doWhileLoop(econd,e) {
		let old = this.declared.length;
		_hx_loop1: while(true) {
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				let _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					let err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
			if(!(this.expr(econd) == true)) {
				break;
			}
		}
		this.restore(old);
	}
	whileLoop(econd,e) {
		let old = this.declared.length;
		_hx_loop1: while(this.expr(econd) == true) try {
			this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				let err = _g1;
				switch(err._hx_index) {
				case 0:
					break _hx_loop1;
				case 1:
					break;
				case 2:
					throw haxe_Exception.thrown(err);
				}
			} else {
				throw _g;
			}
		}
		this.restore(old);
	}
	makeIterator(v) {
		try {
			v = $getIterator(v);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(v.hasNext == null || v.next == null) {
			let e = hscript_Error.EInvalidIterator(v);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	forLoop(n,it,e) {
		let old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.h[n]});
		let it1 = this.makeIterator(this.expr(it));
		_hx_loop1: while(it1.hasNext()) {
			let this1 = this.locals;
			let value = { r : it1.next()};
			this1.h[n] = value;
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				let _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					let err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
		}
		this.restore(old);
	}
	isMap(o) {
		return js_Boot.__implements(o,haxe_IMap);
	}
	getMapValue(map,key) {
		return (js_Boot.__cast(map , haxe_IMap)).get(key);
	}
	setMapValue(map,key,value) {
		(js_Boot.__cast(map , haxe_IMap)).set(key,value);
	}
	get(o,f) {
		if(o == null) {
			let e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		return Reflect.getProperty(o,f);
	}
	set(o,f,v) {
		if(o == null) {
			let e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	fcall(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	call(o,f,args) {
		return f.apply(o,args);
	}
	cnew(cl,args) {
		let c = $hxClasses[cl];
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
}
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = "hscript.Interp";
Object.assign(hscript_Interp.prototype, {
	__class__: hscript_Interp
	,variables: null
	,locals: null
	,binops: null
	,depth: null
	,inTry: null
	,declared: null
	,returnValue: null
});
class haxe_ds_Map {
	static set(this1,key,value) {
		this1.set(key,value);
	}
	static get(this1,key) {
		return this1.get(key);
	}
	static exists(this1,key) {
		return this1.exists(key);
	}
	static remove(this1,key) {
		return this1.remove(key);
	}
	static keys(this1) {
		return this1.keys();
	}
	static iterator(this1) {
		return this1.iterator();
	}
	static keyValueIterator(this1) {
		return this1.keyValueIterator();
	}
	static copy(this1) {
		return this1.copy();
	}
	static toString(this1) {
		return this1.toString();
	}
	static clear(this1) {
		this1.clear();
	}
	static arrayWrite(this1,k,v) {
		this1.set(k,v);
		return v;
	}
	static toStringMap(t) {
		return new haxe_ds_StringMap();
	}
	static toIntMap(t) {
		return new haxe_ds_IntMap();
	}
	static toEnumValueMapMap(t) {
		return new haxe_ds_EnumValueMap();
	}
	static toObjectMap(t) {
		return new haxe_ds_ObjectMap();
	}
	static fromStringMap(map) {
		return map;
	}
	static fromIntMap(map) {
		return map;
	}
	static fromObjectMap(map) {
		return map;
	}
}
class hscript_Parser {
	constructor() {
		this.uid = 0;
		this.preprocesorValues = new haxe_ds_StringMap();
		this.line = 1;
		this.opChars = "+*/-=!><&|^%~";
		this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
		let priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"]];
		this.opPriority = new haxe_ds_StringMap();
		this.opRightAssoc = new haxe_ds_StringMap();
		this.unops = new haxe_ds_StringMap();
		let _g = 0;
		let _g1 = priorities.length;
		while(_g < _g1) {
			let i = _g++;
			let _g1 = 0;
			let _g2 = priorities[i];
			while(_g1 < _g2.length) {
				let x = _g2[_g1];
				++_g1;
				this.opPriority.h[x] = i;
				if(i == 9) {
					this.opRightAssoc.h[x] = true;
				}
			}
		}
		let x = "!";
		this.unops.h[x] = x == "++" || x == "--";
		let x1 = "++";
		this.unops.h[x1] = x1 == "++" || x1 == "--";
		let x2 = "--";
		this.unops.h[x2] = x2 == "++" || x2 == "--";
		let x3 = "-";
		this.unops.h[x3] = x3 == "++" || x3 == "--";
		let x4 = "~";
		this.unops.h[x4] = x4 == "++" || x4 == "--";
	}
	error(err,pmin,pmax) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
	}
	invalidChar(c) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidChar(c));
		}
	}
	initParser(origin) {
		this.preprocStack = [];
		this.tokens = new haxe_ds_GenericStack();
		this.char = -1;
		this.ops = [];
		this.idents = [];
		this.uid = 0;
		let _g = 0;
		let _g1 = this.opChars.length;
		while(_g < _g1) {
			let i = _g++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		let _g2 = 0;
		let _g3 = this.identChars.length;
		while(_g2 < _g3) {
			let i = _g2++;
			this.idents[HxOverrides.cca(this.identChars,i)] = true;
		}
	}
	parseString(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = s;
		this.readPos = 0;
		let a = [];
		while(true) {
			let tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			let _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			this.parseFullExpr(a);
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript_Expr.EBlock(a);
		}
	}
	unexpected(tk) {
		let err = hscript_Error.EUnexpected(this.tokenString(tk));
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
		return null;
	}
	push(tk) {
		let _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
	}
	ensure(tk) {
		let t = this.token();
		if(t != tk) {
			this.unexpected(t);
		}
	}
	ensureToken(tk) {
		let t = this.token();
		if(!Type.enumEq(t,tk)) {
			this.unexpected(t);
		}
	}
	maybe(tk) {
		let t = this.token();
		if(Type.enumEq(t,tk)) {
			return true;
		}
		let _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(t,_this.head);
		return false;
	}
	getIdent() {
		let tk = this.token();
		if(tk == null) {
			this.unexpected(tk);
			return null;
		} else if(tk._hx_index == 2) {
			let id = tk.s;
			return id;
		} else {
			this.unexpected(tk);
			return null;
		}
	}
	expr(e) {
		return e;
	}
	pmin(e) {
		return 0;
	}
	pmax(e) {
		return 0;
	}
	mk(e,pmin,pmax) {
		return e;
	}
	isBlock(e) {
		if(e == null) {
			return false;
		}
		switch(e._hx_index) {
		case 2:
			let _g = e.n;
			let e1 = e.e;
			let t = e.t;
			if(e1 != null) {
				return this.isBlock(e1);
			} else if(t != null) {
				if(t == null) {
					return false;
				} else if(t._hx_index == 2) {
					let _g = t.fields;
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			let _g1 = e.e;
			return true;
		case 6:
			let _g2 = e.e1;
			let _g3 = e.op;
			let e2 = e.e2;
			return this.isBlock(e2);
		case 7:
			let _g4 = e.op;
			let e3 = e.e;
			let prefix = e.prefix;
			if(!prefix) {
				return this.isBlock(e3);
			} else {
				return false;
			}
			break;
		case 9:
			let _g5 = e.cond;
			let e21 = e.e2;
			let e11 = e.e1;
			if(e21 != null) {
				return this.isBlock(e21);
			} else {
				return this.isBlock(e11);
			}
			break;
		case 10:
			let _g6 = e.cond;
			let e4 = e.e;
			return this.isBlock(e4);
		case 11:
			let _g7 = e.it;
			let _g8 = e.v;
			let e5 = e.e;
			return this.isBlock(e5);
		case 14:
			let _g9 = e.ret;
			let _g10 = e.name;
			let _g11 = e.args;
			let e6 = e.e;
			return this.isBlock(e6);
		case 15:
			let e7 = e.e;
			if(e7 != null) {
				return this.isBlock(e7);
			} else {
				return false;
			}
			break;
		case 20:
			let _g12 = e.t;
			let _g13 = e.v;
			let _g14 = e.e;
			let e8 = e.ecatch;
			return this.isBlock(e8);
		case 21:
			let _g15 = e.fl;
			return true;
		case 23:
			let _g16 = e.defaultExpr;
			let _g17 = e.cases;
			let _g18 = e.e;
			return true;
		case 24:
			let _g19 = e.cond;
			let e9 = e.e;
			return this.isBlock(e9);
		case 25:
			let _g20 = e.args;
			let _g21 = e.name;
			let e10 = e.e;
			return this.isBlock(e10);
		default:
			return false;
		}
	}
	parseFullExpr(exprs) {
		let e = this.parseExpr();
		exprs.push(e);
		let tk = this.token();
		while(true) {
			let tmp;
			if(tk == hscript_Token.TComma && e != null) {
				if(e._hx_index == 2) {
					let _g = e.e;
					let _g1 = e.t;
					let _g2 = e.n;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			e = this.parseStructure("var");
			exprs.push(e);
			tk = this.token();
		}
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
	}
	parseObject(p1) {
		let fl = [];
		_hx_loop1: while(true) {
			let tk = this.token();
			let id = null;
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 1:
					let c = tk.c;
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c._hx_index == 2) {
						let s = c.s;
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					let i = tk.s;
					id = i;
					break;
				case 7:
					break _hx_loop1;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
			let t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			fl.push({ name : id, e : this.parseExpr()});
			tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else {
				switch(tk._hx_index) {
				case 7:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		}
		return this.parseExprNext(hscript_Expr.EObject(fl));
	}
	parseExpr() {
		let tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 1:
				let c = tk.c;
				return this.parseExprNext(hscript_Expr.EConst(c));
			case 2:
				let id = tk.s;
				let e = this.parseStructure(id);
				if(e == null) {
					e = hscript_Expr.EIdent(id);
				}
				return this.parseExprNext(e);
			case 3:
				let op = tk.s;
				if(Object.prototype.hasOwnProperty.call(this.unops.h,op)) {
					let start = 0;
					let e = this.parseExpr();
					if(op == "-" && e != null) {
						if(e._hx_index == 0) {
							let _g = e.c;
							switch(_g._hx_index) {
							case 0:
								let i = _g.v;
								return hscript_Expr.EConst(hscript_Const.CInt(-i));
							case 1:
								let f = _g.f;
								return hscript_Expr.EConst(hscript_Const.CFloat(-f));
							default:
							}
						}
					}
					return this.makeUnop(op,e);
				}
				return this.unexpected(tk);
			case 4:
				let e1 = this.parseExpr();
				tk = this.token();
				if(tk != null) {
					switch(tk._hx_index) {
					case 5:
						return this.parseExprNext(hscript_Expr.EParent(e1));
					case 9:
						if(e1._hx_index == 1) {
							let v = e1.v;
							return this.parseLambda([{ name : v}],0);
						}
						break;
					case 14:
						let t = this.parseType();
						tk = this.token();
						if(tk != null) {
							switch(tk._hx_index) {
							case 5:
								return this.parseExprNext(hscript_Expr.ECheckType(e1,t));
							case 9:
								if(e1._hx_index == 1) {
									let v = e1.v;
									return this.parseLambda([{ name : v, t : t}],0);
								}
								break;
							default:
							}
						}
						break;
					default:
					}
				}
				return this.unexpected(tk);
			case 6:
				tk = this.token();
				if(tk == null) {
					let _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				} else {
					switch(tk._hx_index) {
					case 1:
						let c1 = tk.c;
						if(this.allowJSON) {
							if(c1._hx_index == 2) {
								let _g = c1.s;
								let tk2 = this.token();
								let _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk2,_this.head);
								let _this1 = this.tokens;
								_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
								if(tk2 != null) {
									if(tk2._hx_index == 14) {
										return this.parseExprNext(this.parseObject(0));
									}
								}
							} else {
								let _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
							}
						} else {
							let _this = this.tokens;
							_this.head = new haxe_ds_GenericCell(tk,_this.head);
						}
						break;
					case 2:
						let _g = tk.s;
						let tk2 = this.token();
						let _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk2,_this.head);
						let _this1 = this.tokens;
						_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
						if(tk2 != null) {
							if(tk2._hx_index == 14) {
								return this.parseExprNext(this.parseObject(0));
							}
						}
						break;
					case 7:
						return this.parseExprNext(hscript_Expr.EObject([]));
					default:
						let _this2 = this.tokens;
						_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
					}
				}
				let a = [];
				while(true) {
					this.parseFullExpr(a);
					tk = this.token();
					if(tk == hscript_Token.TBrClose || this.resumeErrors && tk == hscript_Token.TEof) {
						break;
					}
					let _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				}
				return hscript_Expr.EBlock(a);
			case 11:
				let a1 = [];
				tk = this.token();
				while(tk != hscript_Token.TBkClose && (!this.resumeErrors || tk != hscript_Token.TEof)) {
					let _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
					a1.push(this.parseExpr());
					tk = this.token();
					if(tk == hscript_Token.TComma) {
						tk = this.token();
					}
				}
				if(a1.length == 1 && a1[0] != null) {
					let _g = a1[0];
					switch(_g._hx_index) {
					case 10:
						let _g1 = _g.e;
						let _g2 = _g.cond;
						let tmp = "__a_" + this.uid++;
						let e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a1[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 11:
						let _g3 = _g.e;
						let _g4 = _g.it;
						let _g5 = _g.v;
						let tmp1 = "__a_" + this.uid++;
						let e1 = hscript_Expr.EBlock([hscript_Expr.EVar(tmp1,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp1,a1[0]),hscript_Expr.EIdent(tmp1)]);
						return this.parseExprNext(e1);
					case 24:
						let _g6 = _g.e;
						let _g7 = _g.cond;
						let tmp2 = "__a_" + this.uid++;
						let e2 = hscript_Expr.EBlock([hscript_Expr.EVar(tmp2,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp2,a1[0]),hscript_Expr.EIdent(tmp2)]);
						return this.parseExprNext(e2);
					default:
					}
				}
				return this.parseExprNext(hscript_Expr.EArrayDecl(a1));
			case 15:
				let id1 = tk.s;
				if(this.allowMetadata) {
					let args = this.parseMetaArgs();
					return hscript_Expr.EMeta(id1,args,this.parseExpr());
				} else {
					return this.unexpected(tk);
				}
				break;
			default:
				return this.unexpected(tk);
			}
		}
	}
	parseLambda(args,pmin) {
		_hx_loop1: while(true) {
			let id = this.getIdent();
			let t = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
			args.push({ name : id, t : t});
			let tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 5:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
		}
		let t = this.token();
		if(!Type.enumEq(t,hscript_Token.TOp("->"))) {
			this.unexpected(t);
		}
		let eret = this.parseExpr();
		return hscript_Expr.EFunction(args,hscript_Expr.EReturn(eret));
	}
	parseMetaArgs() {
		let tk = this.token();
		if(tk != hscript_Token.TPOpen) {
			let _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return null;
		}
		let args = [];
		tk = this.token();
		if(tk != hscript_Token.TPClose) {
			let _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			_hx_loop1: while(true) {
				args.push(this.parseExpr());
				let _g = this.token();
				if(_g == null) {
					let tk = _g;
					this.unexpected(tk);
				} else {
					switch(_g._hx_index) {
					case 5:
						break _hx_loop1;
					case 9:
						break;
					default:
						let tk = _g;
						this.unexpected(tk);
					}
				}
			}
		}
		return args;
	}
	mapCompr(tmp,e) {
		if(e == null) {
			return null;
		}
		let edef;
		switch(e._hx_index) {
		case 3:
			let e2 = e.e;
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			let _g = e.e;
			if(_g.length == 1) {
				let e = _g[0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e)]);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			let e21 = e.e2;
			let e1 = e.e1;
			let cond = e.cond;
			edef = e21 == null ? hscript_Expr.EIf(cond,this.mapCompr(tmp,e1),null) : hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			break;
		case 10:
			let e22 = e.e;
			let cond1 = e.cond;
			edef = hscript_Expr.EWhile(cond1,this.mapCompr(tmp,e22));
			break;
		case 11:
			let e23 = e.e;
			let it = e.it;
			let v = e.v;
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e23));
			break;
		case 24:
			let e24 = e.e;
			let cond2 = e.cond;
			edef = hscript_Expr.EDoWhile(cond2,this.mapCompr(tmp,e24));
			break;
		default:
			edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	makeUnop(op,e) {
		if(e == null && this.resumeErrors) {
			return null;
		}
		switch(e._hx_index) {
		case 6:
			let e2 = e.e2;
			let e1 = e.e1;
			let bop = e.op;
			return hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2);
		case 22:
			let e3 = e.e2;
			let e21 = e.e1;
			let e11 = e.cond;
			return hscript_Expr.ETernary(this.makeUnop(op,e11),e21,e3);
		default:
			return hscript_Expr.EUnop(op,true,e);
		}
	}
	makeBinop(op,e1,e) {
		if(e == null && this.resumeErrors) {
			return hscript_Expr.EBinop(op,e1,e);
		}
		switch(e._hx_index) {
		case 6:
			let e3 = e.e2;
			let e2 = e.e1;
			let op2 = e.op;
			if(this.opPriority.h[op] <= this.opPriority.h[op2] && !Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
			} else {
				return hscript_Expr.EBinop(op,e1,e);
			}
			break;
		case 22:
			let e4 = e.e2;
			let e31 = e.e1;
			let e21 = e.cond;
			if(Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op,e1,e);
			} else {
				return hscript_Expr.ETernary(this.makeBinop(op,e1,e21),e31,e4);
			}
			break;
		default:
			return hscript_Expr.EBinop(op,e1,e);
		}
	}
	parseStructure(id) {
		switch(id) {
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "do":
			let e = this.parseExpr();
			let tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else if(tk._hx_index == 2) {
				if(tk.s != "while") {
					this.unexpected(tk);
				}
			} else {
				this.unexpected(tk);
			}
			let econd = this.parseExpr();
			return hscript_Expr.EDoWhile(econd,e);
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "for":
			let t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			let vname = this.getIdent();
			let t1 = this.token();
			if(!Type.enumEq(t1,hscript_Token.TId("in"))) {
				this.unexpected(t1);
			}
			let eiter = this.parseExpr();
			let t2 = this.token();
			if(t2 != hscript_Token.TPClose) {
				this.unexpected(t2);
			}
			let e1 = this.parseExpr();
			return hscript_Expr.EFor(vname,eiter,e1);
		case "function":
			let tk1 = this.token();
			let name = null;
			if(tk1 == null) {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk1,_this.head);
			} else if(tk1._hx_index == 2) {
				let id = tk1.s;
				name = id;
			} else {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk1,_this.head);
			}
			let inf = this.parseFunctionDecl();
			return hscript_Expr.EFunction(inf.args,inf.body,name,inf.ret);
		case "if":
			let t3 = this.token();
			if(t3 != hscript_Token.TPOpen) {
				this.unexpected(t3);
			}
			let cond = this.parseExpr();
			let t4 = this.token();
			if(t4 != hscript_Token.TPClose) {
				this.unexpected(t4);
			}
			let e11 = this.parseExpr();
			let e2 = null;
			let semic = false;
			let tk2 = this.token();
			if(tk2 == hscript_Token.TSemicolon) {
				semic = true;
				tk2 = this.token();
			}
			if(Type.enumEq(tk2,hscript_Token.TId("else"))) {
				e2 = this.parseExpr();
			} else {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk2,_this.head);
				if(semic) {
					let _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(hscript_Token.TSemicolon,_this.head);
				}
			}
			return hscript_Expr.EIf(cond,e11,e2);
		case "inline":
			if(!this.maybe(hscript_Token.TId("function"))) {
				this.unexpected(hscript_Token.TId("inline"));
			}
			return this.parseStructure("function");
		case "new":
			let a = [];
			a.push(this.getIdent());
			_hx_loop1: while(true) {
				let tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 4:
						break _hx_loop1;
					case 8:
						a.push(this.getIdent());
						break;
					default:
						this.unexpected(tk);
						break _hx_loop1;
					}
				}
			}
			let args = this.parseExprList(hscript_Token.TPClose);
			return hscript_Expr.ENew(a.join("."),args);
		case "return":
			let tk3 = this.token();
			let _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk3,_this.head);
			let e3 = tk3 == hscript_Token.TSemicolon ? null : this.parseExpr();
			return hscript_Expr.EReturn(e3);
		case "switch":
			let e4 = this.parseExpr();
			let def = null;
			let cases = [];
			let t5 = this.token();
			if(t5 != hscript_Token.TBrOpen) {
				this.unexpected(t5);
			}
			_hx_loop2: while(true) {
				let tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 2:
						switch(tk.s) {
						case "case":
							let c = { values : [], expr : null};
							cases.push(c);
							_hx_loop3: while(true) {
								let e = this.parseExpr();
								c.values.push(e);
								tk = this.token();
								if(tk == null) {
									this.unexpected(tk);
									break;
								} else {
									switch(tk._hx_index) {
									case 9:
										break;
									case 14:
										break _hx_loop3;
									default:
										this.unexpected(tk);
										break _hx_loop3;
									}
								}
							}
							let exprs = [];
							_hx_loop4: while(true) {
								tk = this.token();
								let _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk == null) {
									this.parseFullExpr(exprs);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop4;
										} else {
											this.parseFullExpr(exprs);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop4;
										default:
											this.parseFullExpr(exprs);
										}
										break;
									case 7:
										break _hx_loop4;
									default:
										this.parseFullExpr(exprs);
									}
								}
							}
							c.expr = exprs.length == 1 ? exprs[0] : exprs.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs);
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk);
							}
							let t = this.token();
							if(t != hscript_Token.TDoubleDot) {
								this.unexpected(t);
							}
							let exprs1 = [];
							_hx_loop5: while(true) {
								tk = this.token();
								let _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk == null) {
									this.parseFullExpr(exprs1);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop5;
										} else {
											this.parseFullExpr(exprs1);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop5;
										default:
											this.parseFullExpr(exprs1);
										}
										break;
									case 7:
										break _hx_loop5;
									default:
										this.parseFullExpr(exprs1);
									}
								}
							}
							def = exprs1.length == 1 ? exprs1[0] : exprs1.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs1);
							break;
						default:
							this.unexpected(tk);
							break _hx_loop2;
						}
						break;
					case 7:
						break _hx_loop2;
					default:
						this.unexpected(tk);
						break _hx_loop2;
					}
				}
			}
			return hscript_Expr.ESwitch(e4,cases,def);
		case "throw":
			let e5 = this.parseExpr();
			return hscript_Expr.EThrow(e5);
		case "try":
			let e6 = this.parseExpr();
			let t6 = this.token();
			if(!Type.enumEq(t6,hscript_Token.TId("catch"))) {
				this.unexpected(t6);
			}
			let t7 = this.token();
			if(t7 != hscript_Token.TPOpen) {
				this.unexpected(t7);
			}
			let vname1 = this.getIdent();
			let t8 = this.token();
			if(t8 != hscript_Token.TDoubleDot) {
				this.unexpected(t8);
			}
			let t9 = null;
			if(this.allowTypes) {
				t9 = this.parseType();
			} else {
				let t = this.token();
				if(!Type.enumEq(t,hscript_Token.TId("Dynamic"))) {
					this.unexpected(t);
				}
			}
			let t10 = this.token();
			if(t10 != hscript_Token.TPClose) {
				this.unexpected(t10);
			}
			let ec = this.parseExpr();
			return hscript_Expr.ETry(e6,vname1,t9,ec);
		case "var":
			let ident = this.getIdent();
			let tk4 = this.token();
			let t11 = null;
			if(tk4 == hscript_Token.TDoubleDot && this.allowTypes) {
				t11 = this.parseType();
				tk4 = this.token();
			}
			let e7 = null;
			if(Type.enumEq(tk4,hscript_Token.TOp("="))) {
				e7 = this.parseExpr();
			} else {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk4,_this.head);
			}
			return hscript_Expr.EVar(ident,t11,e7);
		case "while":
			let econd1 = this.parseExpr();
			let e8 = this.parseExpr();
			return hscript_Expr.EWhile(econd1,e8);
		default:
			return null;
		}
	}
	parseExprNext(e1) {
		let tk = this.token();
		if(tk == null) {
			let _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return e1;
		} else {
			switch(tk._hx_index) {
			case 3:
				let op = tk.s;
				if(op == "->") {
					switch(e1._hx_index) {
					case 1:
						let i = e1.v;
						let eret = this.parseExpr();
						return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
					case 3:
						let _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							let i = _hx_tmp.v;
							let eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
						}
						break;
					case 26:
						let _hx_tmp1 = e1.e;
						if(_hx_tmp1._hx_index == 1) {
							let t = e1.t;
							let i = _hx_tmp1.v;
							let eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i, t : t}],hscript_Expr.EReturn(eret));
						}
						break;
					default:
					}
					this.unexpected(tk);
				}
				if(this.unops.h[op]) {
					let tmp;
					if(!this.isBlock(e1)) {
						if(e1._hx_index == 3) {
							let _g = e1.e;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						let _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						return e1;
					}
					return this.parseExprNext(hscript_Expr.EUnop(op,false,e1));
				}
				return this.makeBinop(op,e1,this.parseExpr());
			case 4:
				return this.parseExprNext(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)));
			case 8:
				let field = this.getIdent();
				return this.parseExprNext(hscript_Expr.EField(e1,field));
			case 11:
				let e2 = this.parseExpr();
				let t = this.token();
				if(t != hscript_Token.TBkClose) {
					this.unexpected(t);
				}
				return this.parseExprNext(hscript_Expr.EArray(e1,e2));
			case 13:
				let e21 = this.parseExpr();
				let t1 = this.token();
				if(t1 != hscript_Token.TDoubleDot) {
					this.unexpected(t1);
				}
				let e3 = this.parseExpr();
				return hscript_Expr.ETernary(e1,e21,e3);
			default:
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return e1;
			}
		}
	}
	parseFunctionArgs() {
		let args = [];
		let tk = this.token();
		if(tk != hscript_Token.TPClose) {
			let done = false;
			while(!done) {
				let name = null;
				let opt = false;
				if(tk != null) {
					if(tk._hx_index == 13) {
						opt = true;
						tk = this.token();
					}
				}
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else if(tk._hx_index == 2) {
					let id = tk.s;
					name = id;
				} else {
					this.unexpected(tk);
					break;
				}
				let arg = { name : name};
				args.push(arg);
				if(opt) {
					arg.opt = true;
				}
				if(this.allowTypes) {
					if(this.maybe(hscript_Token.TDoubleDot)) {
						arg.t = this.parseType();
					}
					if(this.maybe(hscript_Token.TOp("="))) {
						arg.value = this.parseExpr();
					}
				}
				tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
				} else {
					switch(tk._hx_index) {
					case 5:
						done = true;
						break;
					case 9:
						tk = this.token();
						break;
					default:
						this.unexpected(tk);
					}
				}
			}
		}
		return args;
	}
	parseFunctionDecl() {
		let t = this.token();
		if(t != hscript_Token.TPOpen) {
			this.unexpected(t);
		}
		let args = this.parseFunctionArgs();
		let ret = null;
		if(this.allowTypes) {
			let tk = this.token();
			if(tk != hscript_Token.TDoubleDot) {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				ret = this.parseType();
			}
		}
		return { args : args, ret : ret, body : this.parseExpr()};
	}
	parsePath() {
		let path = [this.getIdent()];
		while(true) {
			let t = this.token();
			if(t != hscript_Token.TDot) {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				break;
			}
			path.push(this.getIdent());
		}
		return path;
	}
	parseType() {
		let t = this.token();
		let _gthis = this;
		if(t == null) {
			return this.unexpected(t);
		} else {
			switch(t._hx_index) {
			case 2:
				let v = t.s;
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				let path = this.parsePath();
				let params = null;
				t = this.token();
				if(t == null) {
					let _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				} else if(t._hx_index == 3) {
					let op = t.s;
					if(op == "<") {
						params = [];
						_hx_loop1: while(true) {
							params.push(this.parseType());
							t = this.token();
							if(t != null) {
								switch(t._hx_index) {
								case 3:
									let op = t.s;
									if(op == ">") {
										break _hx_loop1;
									}
									if(HxOverrides.cca(op,0) == 62) {
										let _this = this.tokens;
										_this.head = new haxe_ds_GenericCell(hscript_Token.TOp(HxOverrides.substr(op,1,null)),_this.head);
										break _hx_loop1;
									}
									break;
								case 9:
									continue;
								default:
								}
							}
							this.unexpected(t);
							break;
						}
					} else {
						let _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(t,_this.head);
					}
				} else {
					let _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				}
				return this.parseTypeNext(hscript_CType.CTPath(path,params));
			case 4:
				let a = this.token();
				let b = this.token();
				let _this1 = this.tokens;
				_this1.head = new haxe_ds_GenericCell(b,_this1.head);
				let _this2 = this.tokens;
				_this2.head = new haxe_ds_GenericCell(a,_this2.head);
				let withReturn = function(args) {
					let _g = _gthis.token();
					if(_g == null) {
						let t = _g;
						_gthis.unexpected(t);
					} else if(_g._hx_index == 3) {
						if(_g.s != "->") {
							let t = _g;
							_gthis.unexpected(t);
						}
					} else {
						let t = _g;
						_gthis.unexpected(t);
					}
					return hscript_CType.CTFun(args,_gthis.parseType());
				};
				if(a == null) {
					let t = this.parseType();
					let _g = this.token();
					if(_g == null) {
						let t = _g;
						return this.unexpected(t);
					} else {
						switch(_g._hx_index) {
						case 5:
							return this.parseTypeNext(hscript_CType.CTParent(t));
						case 9:
							let args = [t];
							while(true) {
								args.push(this.parseType());
								if(!this.maybe(hscript_Token.TComma)) {
									break;
								}
							}
							let t1 = this.token();
							if(t1 != hscript_Token.TPClose) {
								this.unexpected(t1);
							}
							return withReturn(args);
						default:
							let t2 = _g;
							return this.unexpected(t2);
						}
					}
				} else {
					switch(a._hx_index) {
					case 2:
						let _g = a.s;
						if(b == null) {
							let t = this.parseType();
							let _g = this.token();
							if(_g == null) {
								let t = _g;
								return this.unexpected(t);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t));
								case 9:
									let args = [t];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									let t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									let t2 = _g;
									return this.unexpected(t2);
								}
							}
						} else if(b._hx_index == 14) {
							let _g = [];
							let _g1 = 0;
							let _g2 = this.parseFunctionArgs();
							while(_g1 < _g2.length) {
								let arg = _g2[_g1];
								++_g1;
								let _g3 = arg.value;
								if(_g3 != null) {
									let v = _g3;
									if(!this.resumeErrors) {
										throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
									}
								}
								_g.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
							}
							let args = _g;
							return withReturn(args);
						} else {
							let t = this.parseType();
							let _g = this.token();
							if(_g == null) {
								let t = _g;
								return this.unexpected(t);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t));
								case 9:
									let args = [t];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									let t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									let t2 = _g;
									return this.unexpected(t2);
								}
							}
						}
						break;
					case 5:
						let _g1 = [];
						let _g2 = 0;
						let _g3 = this.parseFunctionArgs();
						while(_g2 < _g3.length) {
							let arg = _g3[_g2];
							++_g2;
							let _g = arg.value;
							if(_g != null) {
								let v = _g;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
								}
							}
							_g1.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
						}
						let args = _g1;
						return withReturn(args);
					default:
						let t1 = this.parseType();
						let _g4 = this.token();
						if(_g4 == null) {
							let t = _g4;
							return this.unexpected(t);
						} else {
							switch(_g4._hx_index) {
							case 5:
								return this.parseTypeNext(hscript_CType.CTParent(t1));
							case 9:
								let args1 = [t1];
								while(true) {
									args1.push(this.parseType());
									if(!this.maybe(hscript_Token.TComma)) {
										break;
									}
								}
								let t2 = this.token();
								if(t2 != hscript_Token.TPClose) {
									this.unexpected(t2);
								}
								return withReturn(args1);
							default:
								let t3 = _g4;
								return this.unexpected(t3);
							}
						}
					}
				}
				break;
			case 6:
				let fields = [];
				let meta = null;
				_hx_loop8: while(true) {
					t = this.token();
					if(t == null) {
						this.unexpected(t);
						break;
					} else {
						switch(t._hx_index) {
						case 2:
							let _g = t.s;
							if(_g == "var") {
								let name = this.getIdent();
								let t = this.token();
								if(t != hscript_Token.TDoubleDot) {
									this.unexpected(t);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								meta = null;
								let t1 = this.token();
								if(t1 != hscript_Token.TSemicolon) {
									this.unexpected(t1);
								}
							} else {
								let name = _g;
								let t1 = this.token();
								if(t1 != hscript_Token.TDoubleDot) {
									this.unexpected(t1);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								t = this.token();
								if(t == null) {
									this.unexpected(t);
								} else {
									switch(t._hx_index) {
									case 7:
										break _hx_loop8;
									case 9:
										break;
									default:
										this.unexpected(t);
									}
								}
							}
							break;
						case 7:
							break _hx_loop8;
						case 15:
							let name = t.s;
							if(meta == null) {
								meta = [];
							}
							meta.push({ name : name, params : this.parseMetaArgs()});
							break;
						default:
							this.unexpected(t);
							break _hx_loop8;
						}
					}
				}
				return this.parseTypeNext(hscript_CType.CTAnon(fields));
			default:
				return this.unexpected(t);
			}
		}
	}
	parseTypeNext(t) {
		let tk = this.token();
		if(tk == null) {
			let _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		} else if(tk._hx_index == 3) {
			let op = tk.s;
			if(op != "->") {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return t;
			}
		} else {
			let _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		}
		let t2 = this.parseType();
		if(t2._hx_index == 1) {
			let _g = t2.ret;
			let args = t2.args;
			args.unshift(t);
			return t2;
		} else {
			return hscript_CType.CTFun([t],t2);
		}
	}
	parseExprList(etk) {
		let args = [];
		let tk = this.token();
		if(tk == etk) {
			return args;
		}
		let _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk == null) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			} else if(tk._hx_index != 9) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			}
		}
		return args;
	}
	parseModule(content,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = content;
		this.readPos = 0;
		this.allowTypes = true;
		this.allowMetadata = true;
		let decls = [];
		while(true) {
			let tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			let _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			decls.push(this.parseModuleDecl());
		}
		return decls;
	}
	parseMetadata() {
		let meta = [];
		while(true) {
			let tk = this.token();
			if(tk == null) {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			} else if(tk._hx_index == 15) {
				let name = tk.s;
				meta.push({ name : name, params : this.parseMetaArgs()});
			} else {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			}
		}
		return meta;
	}
	parseParams() {
		if(this.maybe(hscript_Token.TOp("<"))) {
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidOp("Unsupported class type parameters"));
			}
		}
		return { };
	}
	parseModuleDecl() {
		let meta = this.parseMetadata();
		let ident = this.getIdent();
		let isPrivate = false;
		let isExtern = false;
		_hx_loop1: while(true) {
			switch(ident) {
			case "extern":
				isExtern = true;
				break;
			case "private":
				isPrivate = true;
				break;
			default:
				break _hx_loop1;
			}
			ident = this.getIdent();
		}
		switch(ident) {
		case "class":
			let name = this.getIdent();
			let params = this.parseParams();
			let extend = null;
			let implement = [];
			_hx_loop2: while(true) {
				let t = this.token();
				if(t == null) {
					let _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				} else if(t._hx_index == 2) {
					switch(t.s) {
					case "extends":
						extend = this.parseType();
						break;
					case "implements":
						implement.push(this.parseType());
						break;
					default:
						let _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(t,_this.head);
						break _hx_loop2;
					}
				} else {
					let _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				}
			}
			let fields = [];
			let t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			while(!this.maybe(hscript_Token.TBrClose)) fields.push(this.parseField());
			return hscript_ModuleDecl.DClass({ name : name, meta : meta, params : params, extend : extend, implement : implement, fields : fields, isPrivate : isPrivate, isExtern : isExtern});
		case "import":
			let path = [this.getIdent()];
			let star = false;
			while(true) {
				let t = this.token();
				if(t != hscript_Token.TDot) {
					let _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				}
				t = this.token();
				if(t == null) {
					this.unexpected(t);
				} else {
					switch(t._hx_index) {
					case 2:
						let id = t.s;
						path.push(id);
						break;
					case 3:
						if(t.s == "*") {
							star = true;
						} else {
							this.unexpected(t);
						}
						break;
					default:
						this.unexpected(t);
					}
				}
			}
			let t1 = this.token();
			if(t1 != hscript_Token.TSemicolon) {
				this.unexpected(t1);
			}
			return hscript_ModuleDecl.DImport(path,star);
		case "package":
			let path1 = this.parsePath();
			let t2 = this.token();
			if(t2 != hscript_Token.TSemicolon) {
				this.unexpected(t2);
			}
			return hscript_ModuleDecl.DPackage(path1);
		case "typedef":
			let name1 = this.getIdent();
			let params1 = this.parseParams();
			let t3 = this.token();
			if(!Type.enumEq(t3,hscript_Token.TOp("="))) {
				this.unexpected(t3);
			}
			let t4 = this.parseType();
			return hscript_ModuleDecl.DTypedef({ name : name1, meta : meta, params : params1, isPrivate : isPrivate, t : t4});
		default:
			this.unexpected(hscript_Token.TId(ident));
		}
		return null;
	}
	parseField() {
		let meta = this.parseMetadata();
		let access = [];
		_hx_loop1: while(true) {
			let id = this.getIdent();
			switch(id) {
			case "function":
				let name = this.getIdent();
				let inf = this.parseFunctionDecl();
				return { name : name, meta : meta, access : access, kind : hscript_FieldKind.KFunction({ args : inf.args, expr : inf.body, ret : inf.ret})};
			case "inline":
				access.push(hscript_FieldAccess.AInline);
				break;
			case "macro":
				access.push(hscript_FieldAccess.AMacro);
				break;
			case "override":
				access.push(hscript_FieldAccess.AOverride);
				break;
			case "private":
				access.push(hscript_FieldAccess.APrivate);
				break;
			case "public":
				access.push(hscript_FieldAccess.APublic);
				break;
			case "static":
				access.push(hscript_FieldAccess.AStatic);
				break;
			case "var":
				let name1 = this.getIdent();
				let get = null;
				let set = null;
				if(this.maybe(hscript_Token.TPOpen)) {
					get = this.getIdent();
					let t = this.token();
					if(t != hscript_Token.TComma) {
						this.unexpected(t);
					}
					set = this.getIdent();
					let t1 = this.token();
					if(t1 != hscript_Token.TPClose) {
						this.unexpected(t1);
					}
				}
				let type = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
				let expr = this.maybe(hscript_Token.TOp("=")) ? this.parseExpr() : null;
				if(expr != null) {
					if(this.isBlock(expr)) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						let t = this.token();
						if(t != hscript_Token.TSemicolon) {
							this.unexpected(t);
						}
					}
				} else {
					let tmp;
					if(type != null) {
						if(type == null) {
							tmp = false;
						} else if(type._hx_index == 2) {
							let _g = type.fields;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
					if(tmp) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						let t = this.token();
						if(t != hscript_Token.TSemicolon) {
							this.unexpected(t);
						}
					}
				}
				return { name : name1, meta : meta, access : access, kind : hscript_FieldKind.KVar({ get : get, set : set, type : type, expr : expr})};
			default:
				this.unexpected(hscript_Token.TId(id));
				break _hx_loop1;
			}
		}
		return null;
	}
	readChar() {
		return this.input.charCodeAt(this.readPos++);
	}
	readString(until) {
		let c = 0;
		let b_b = "";
		let esc = false;
		let old = this.line;
		let s = this.input;
		while(true) {
			let c = this.input.charCodeAt(this.readPos++);
			if(c != c) {
				this.line = old;
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
				}
				break;
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 34:case 39:case 92:
					b_b += String.fromCodePoint(c);
					break;
				case 47:
					if(this.allowJSON) {
						b_b += String.fromCodePoint(c);
					} else {
						this.invalidChar(c);
					}
					break;
				case 110:
					b_b += String.fromCodePoint(10);
					break;
				case 114:
					b_b += String.fromCodePoint(13);
					break;
				case 116:
					b_b += String.fromCodePoint(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c);
					}
					let k = 0;
					let _g = 0;
					while(_g < 4) {
						let i = _g++;
						k <<= 4;
						let char = this.input.charCodeAt(this.readPos++);
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char - 87;
							break;
						default:
							if(char != char) {
								this.line = old;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
								}
							}
							this.invalidChar(char);
						}
					}
					b_b += String.fromCodePoint(k);
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) {
				esc = true;
			} else if(c == until) {
				break;
			} else {
				if(c == 10) {
					this.line++;
				}
				b_b += String.fromCodePoint(c);
			}
		}
		return b_b;
	}
	token() {
		if(this.tokens.head != null) {
			let _this = this.tokens;
			let k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		let char;
		if(this.char < 0) {
			char = this.input.charCodeAt(this.readPos++);
		} else {
			char = this.char;
			this.char = -1;
		}
		while(true) {
			if(char != char) {
				this.char = char;
				return hscript_Token.TEof;
			}
			switch(char) {
			case 0:
				return hscript_Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 35:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char]) {
					let id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return this.preprocess(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 34:case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(char)));
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				char = this.input.charCodeAt(this.readPos++);
				switch(char) {
				case 46:
					char = this.input.charCodeAt(this.readPos++);
					if(char != 46) {
						this.invalidChar(char);
					}
					return hscript_Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					let n = char - 48;
					let exp = 1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						exp *= 10;
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + (char - 48);
							break;
						default:
							this.char = char;
							return hscript_Token.TConst(hscript_Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this.char = char;
					return hscript_Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				let n1 = (char - 48) * 1.0;
				let exp1 = 0.;
				while(true) {
					char = this.input.charCodeAt(this.readPos++);
					exp1 *= 10;
					switch(char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.input.charCodeAt(this.readPos++) == 46) {
								let _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(hscript_Token.TOp("..."),_this.head);
								let i = n1 | 0;
								return hscript_Token.TConst(i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
							}
							this.invalidChar(char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + (char - 48);
						break;
					case 69:case 101:
						let tk = this.token();
						let pow = null;
						if(tk == null) {
							let _this = this.tokens;
							_this.head = new haxe_ds_GenericCell(tk,_this.head);
						} else {
							switch(tk._hx_index) {
							case 1:
								let _g = tk.c;
								if(_g._hx_index == 0) {
									let e = _g.v;
									pow = e;
								} else {
									let _this = this.tokens;
									_this.head = new haxe_ds_GenericCell(tk,_this.head);
								}
								break;
							case 3:
								if(tk.s == "-") {
									tk = this.token();
									if(tk == null) {
										let _this = this.tokens;
										_this.head = new haxe_ds_GenericCell(tk,_this.head);
									} else if(tk._hx_index == 1) {
										let _g = tk.c;
										if(_g._hx_index == 0) {
											let e = _g.v;
											pow = -e;
										} else {
											let _this = this.tokens;
											_this.head = new haxe_ds_GenericCell(tk,_this.head);
										}
									} else {
										let _this = this.tokens;
										_this.head = new haxe_ds_GenericCell(tk,_this.head);
									}
								} else {
									let _this = this.tokens;
									_this.head = new haxe_ds_GenericCell(tk,_this.head);
								}
								break;
							default:
								let _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
							}
						}
						if(pow == null) {
							this.invalidChar(char);
						}
						return hscript_Token.TConst(hscript_Const.CFloat(Math.pow(10,pow) / exp1 * n1 * 10));
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar(char);
						}
						let n = 0;
						while(true) {
							char = this.input.charCodeAt(this.readPos++);
							switch(char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n = (n << 4) + char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n = (n << 4) + (char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n = (n << 4) + (char - 87);
								break;
							default:
								this.char = char;
								return hscript_Token.TConst(hscript_Const.CInt(n));
							}
						}
						break;
					default:
						this.char = char;
						let i = n1 | 0;
						return hscript_Token.TConst(exp1 > 0 ? hscript_Const.CFloat(n1 * 10 / exp1) : i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript_Token.TDoubleDot;
			case 59:
				return hscript_Token.TSemicolon;
			case 61:
				char = this.input.charCodeAt(this.readPos++);
				if(char == 61) {
					return hscript_Token.TOp("==");
				} else if(char == 62) {
					return hscript_Token.TOp("=>");
				}
				this.char = char;
				return hscript_Token.TOp("=");
			case 63:
				return hscript_Token.TQuestion;
			case 64:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char] || char == 58) {
					let id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TMeta(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			default:
				if(this.ops[char]) {
					let op = String.fromCodePoint(char);
					let prev = -1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.ops[char] || prev == 61) {
							if(HxOverrides.cca(op,0) == 47) {
								return this.tokenComment(op,char);
							}
							this.char = char;
							return hscript_Token.TOp(op);
						}
						prev = char;
						op += String.fromCodePoint(char);
					}
				}
				if(this.idents[char]) {
					let id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TId(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
			}
			char = this.input.charCodeAt(this.readPos++);
		}
	}
	preprocValue(id) {
		return this.preprocesorValues.h[id];
	}
	parsePreproCond() {
		let tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 2:
				let id = tk.s;
				return hscript_Expr.EIdent(id);
			case 3:
				if(tk.s == "!") {
					return hscript_Expr.EUnop("!",true,this.parsePreproCond());
				} else {
					return this.unexpected(tk);
				}
				break;
			case 4:
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(hscript_Token.TPOpen,_this.head);
				return this.parseExpr();
			default:
				return this.unexpected(tk);
			}
		}
	}
	evalPreproCond(e) {
		switch(e._hx_index) {
		case 1:
			let id = e.v;
			return this.preprocValue(id) != null;
		case 3:
			let e1 = e.e;
			return this.evalPreproCond(e1);
		case 6:
			let _g = e.e2;
			let _g1 = e.e1;
			switch(e.op) {
			case "&&":
				let e2 = _g;
				let e11 = _g1;
				if(this.evalPreproCond(e11)) {
					return this.evalPreproCond(e2);
				} else {
					return false;
				}
				break;
			case "||":
				let e21 = _g;
				let e12 = _g1;
				if(!this.evalPreproCond(e12)) {
					return this.evalPreproCond(e21);
				} else {
					return true;
				}
				break;
			default:
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
				}
				return false;
			}
			break;
		case 7:
			let _g2 = e.prefix;
			if(e.op == "!") {
				let e1 = e.e;
				return !this.evalPreproCond(e1);
			} else {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
				}
				return false;
			}
			break;
		default:
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
			}
			return false;
		}
	}
	preprocess(id) {
		switch(id) {
		case "else":case "elseif":
			if(this.preprocStack.length > 0) {
				if(this.preprocStack[this.preprocStack.length - 1].r) {
					this.preprocStack[this.preprocStack.length - 1].r = false;
					this.skipTokens();
					return this.token();
				} else if(id == "else") {
					this.preprocStack.pop();
					this.preprocStack.push({ r : true});
					return this.token();
				} else {
					this.preprocStack.pop();
					return this.preprocess("if");
				}
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "end":
			if(this.preprocStack.length > 0) {
				this.preprocStack.pop();
				return this.token();
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "if":
			let e = this.parsePreproCond();
			if(this.evalPreproCond(e)) {
				this.preprocStack.push({ r : true});
				return this.token();
			}
			this.preprocStack.push({ r : false});
			this.skipTokens();
			return this.token();
		default:
			return hscript_Token.TPrepro(id);
		}
	}
	skipTokens() {
		let spos = this.preprocStack.length - 1;
		let obj = this.preprocStack[spos];
		let pos = this.readPos;
		while(true) {
			let tk = this.token();
			if(tk == hscript_Token.TEof) {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Unclosed"));
				}
			}
			if(this.preprocStack[spos] != obj) {
				let _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			}
		}
	}
	tokenComment(op,char) {
		let c = HxOverrides.cca(op,1);
		let s = this.input;
		if(c == 47) {
			while(char != 13 && char != 10) {
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					break;
				}
			}
			this.char = char;
			return this.token();
		}
		if(c == 42) {
			let old = this.line;
			if(op == "/**/") {
				this.char = char;
				return this.token();
			}
			while(true) {
				while(char != 42) {
					if(char == 10) {
						this.line++;
					}
					char = this.input.charCodeAt(this.readPos++);
					if(char != char) {
						this.line = old;
						if(!this.resumeErrors) {
							throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
						}
						break;
					}
				}
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					this.line = old;
					if(!this.resumeErrors) {
						throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
					}
					break;
				}
				if(char == 47) {
					break;
				}
			}
			return this.token();
		}
		this.char = char;
		return hscript_Token.TOp(op);
	}
	constString(c) {
		switch(c._hx_index) {
		case 0:
			let v = c.v;
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			let f = c.f;
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			let s = c.s;
			return s;
		}
	}
	tokenString(t) {
		switch(t._hx_index) {
		case 0:
			return "<eof>";
		case 1:
			let c = t.c;
			return this.constString(c);
		case 2:
			let s = t.s;
			return s;
		case 3:
			let s1 = t.s;
			return s1;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		case 15:
			let id = t.s;
			return "@" + id;
		case 16:
			let id1 = t.s;
			return "#" + id1;
		}
	}
}
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = "hscript.Parser";
Object.assign(hscript_Parser.prototype, {
	__class__: hscript_Parser
	,line: null
	,opChars: null
	,identChars: null
	,opPriority: null
	,opRightAssoc: null
	,unops: null
	,preprocesorValues: null
	,allowJSON: null
	,allowTypes: null
	,allowMetadata: null
	,resumeErrors: null
	,input: null
	,readPos: null
	,char: null
	,ops: null
	,idents: null
	,uid: null
	,tokens: null
	,preprocStack: null
});
class CommandHandler {
	static addCommand(cname,cclass) {
		cname = cname.toLowerCase();
		let this1 = CommandHandler.commands == null ? CommandHandler.commands = new haxe_ds_StringMap() : CommandHandler.commands;
		if(Object.prototype.hasOwnProperty.call(this1.h,cname)) {
			throw haxe_Exception.thrown("Command " + cname + " set twice");
		}
		(CommandHandler.commands == null ? CommandHandler.commands = new haxe_ds_StringMap() : CommandHandler.commands).h[cname] = cclass;
	}
	static getCommands() {
		if(CommandHandler.commands == null) {
			return CommandHandler.commands = new haxe_ds_StringMap();
		} else {
			return CommandHandler.commands;
		}
	}
	static handle(m) {
		if(m.content.substring(0,Bot.prefix.length) == Bot.prefix) {
			let command = m.content.substring(Bot.prefix.length,m.content.indexOf(" ") > 0 ? m.content.indexOf(" ") : m.content.length);
			switch(command) {
			case "eval":
				CommandHandler.doEval(m);
				return true;
			case "help":
				let commands = CommandHandler.commands == null ? CommandHandler.commands = new haxe_ds_StringMap() : CommandHandler.commands;
				let b_b = "";
				let o = haxe_ds_StringMap.keysIterator(commands.h);
				while(o.hasNext()) {
					let o1 = o.next();
					if(commands.h[o1].hidden) {
						continue;
					}
					b_b += Std.string("\n" + commands.h[o1].name + " : " + commands.h[o1].shorthelp);
				}
				let embed = new discordjs_MessageEmbed();
				embed.setTitle("Available Commands :");
				embed.setColor("BLUE");
				embed.setDescription(b_b);
				m.channel.send(embed);
				return true;
			case "info":
				haxe_Log.trace("info",{ fileName : "Source/CommandHandler.hx", lineNumber : 30, className : "CommandHandler", methodName : "handle"});
				let embed1 = new discordjs_MessageEmbed();
				embed1.setTitle("Info").setColor("BLUE");
				embed1.addField("Host OS",Sys.systemName());
				embed1.addField("Start Time",HxOverrides.dateStr(Bot.startTime));
				m.channel.send(embed1);
				return true;
			case "logs":
				m.channel.send(null,{ files : [{ name : "logs.txt", attachment : js_node_buffer_Buffer.from(js_node_Fs.readFileSync("logs.txt",{ encoding : "utf8"}))}]});
				return true;
			default:
				let o1 = haxe_ds_StringMap.valueIterator((CommandHandler.commands == null ? CommandHandler.commands = new haxe_ds_StringMap() : CommandHandler.commands).h);
				while(o1.hasNext()) {
					let o = o1.next();
					if(command == o.name) {
						o.call(m,CommandHandler.bot);
						return true;
					}
				}
			}
		}
		return false;
	}
	static doEval(m) {
		if(m.author.id != "525025580106907659") {
			return m.reply("You are not allowed to use this command!");
		}
		let content = HxOverrides.substr(m.cleanContent,Bot.prefix.length + "eval ".length,null);
		let answer = CommandHandler.eval;
		let _g = new haxe_ds_StringMap();
		_g.h["message"] = m;
		let answer1 = answer.evaluate(content,_g);
		return m.reply(new discordjs_MessageEmbed().setDescription(answer1));
	}
	static config(m) {
		if(m.author.id != "525025580106907659") {
			m.reply("You are not allowed to use this command!");
			return;
		}
		let content = HxOverrides.substr(m.content,(Bot.prefix + "config ").length,null);
		let args = content.split(" ");
		haxe_Log.trace(args.join("$"),{ fileName : "Source/CommandHandler.hx", lineNumber : 81, className : "CommandHandler", methodName : "config"});
		let it_current = 0;
		let it_array = args;
		let switches_h = Object.create(null);
		while(it_current < it_array.length) {
			let arg = it_array[it_current++];
			haxe_Log.trace("arg " + arg,{ fileName : "Source/CommandHandler.hx", lineNumber : 87, className : "CommandHandler", methodName : "config"});
			if(StringTools.startsWith(arg,"--")) {
				let val = it_array[it_current++];
				haxe_Log.trace("value " + val,{ fileName : "Source/CommandHandler.hx", lineNumber : 91, className : "CommandHandler", methodName : "config"});
				switches_h[HxOverrides.substr(arg,2,null)] = val;
				continue;
			}
		}
		let isUser = switches_h["guild"] != "true";
		if(!isUser) {
			if(!isUser) {
				lib_Settings.getGuild(m.guild.id).h[switches_h["option"]] = switches_h["value"];
				lib_Settings.save();
			}
		}
		m.reply("Settings Update " + switches_h["options"] + " " + switches_h["value"]);
	}
}
CommandHandler.commands = null;
$hxClasses["CommandHandler"] = CommandHandler;
CommandHandler.__name__ = "CommandHandler";
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	matchedLeft() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	matchedRight() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		let sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	matchedPos() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	matchSub(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			let b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			let b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	split(s) {
		let d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	replace(s,by) {
		return s.replace(this.r,by);
	}
	map(s,f) {
		let offset = 0;
		let buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			let p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	static escape(s) {
		return s.replace(EReg.escapeRe,"\\$&");
	}
}
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
	,r: null
});
class EnumValue {
	static match(this1,pattern) {
		return false;
	}
}
class HxOverrides {
	static dateStr(date) {
		let m = date.getMonth() + 1;
		let d = date.getDate();
		let h = date.getHours();
		let mi = date.getMinutes();
		let s = date.getSeconds();
		return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
	}
	static strDate(s) {
		switch(s.length) {
		case 8:
			let k = s.split(":");
			let d = new Date();
			d["setTime"](0);
			d["setUTCHours"](k[0]);
			d["setUTCMinutes"](k[1]);
			d["setUTCSeconds"](k[2]);
			return d;
		case 10:
			let k1 = s.split("-");
			return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
		case 19:
			let k2 = s.split(" ");
			let y = k2[0].split("-");
			let t = k2[1].split(":");
			return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
		default:
			throw haxe_Exception.thrown("Invalid date format : " + s);
		}
	}
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static indexOf(a,obj,i) {
		let len = a.length;
		if(i < 0) {
			i += len;
			if(i < 0) {
				i = 0;
			}
		}
		while(i < len) {
			if(((a[i]) === obj)) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static lastIndexOf(a,obj,i) {
		let len = a.length;
		if(i >= len) {
			i = len - 1;
		} else if(i < 0) {
			i += len;
		}
		while(i >= 0) {
			if(((a[i]) === obj)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
	static keyValueIter(a) {
		return new haxe_iterators_ArrayKeyValueIterator(a);
	}
	static now() {
		return Date.now();
	}
}
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
class IntIterator {
	constructor(min,max) {
		this.min = min;
		this.max = max;
	}
	hasNext() {
		return this.min < this.max;
	}
	next() {
		return this.min++;
	}
}
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
Object.assign(IntIterator.prototype, {
	__class__: IntIterator
	,min: null
	,max: null
});
class Lambda {
	static array(it) {
		let a = [];
		let i = $getIterator(it);
		while(i.hasNext()) {
			let i1 = i.next();
			a.push(i1);
		}
		return a;
	}
	static list(it) {
		let l = new haxe_ds_List();
		let i = $getIterator(it);
		while(i.hasNext()) {
			let i1 = i.next();
			l.add(i1);
		}
		return l;
	}
	static map(it,f) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			_g.push(f(x1));
		}
		return _g;
	}
	static mapi(it,f) {
		let i = 0;
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			_g.push(f(i++,x1));
		}
		return _g;
	}
	static flatten(it) {
		let _g = [];
		let e = $getIterator(it);
		while(e.hasNext()) {
			let e1 = e.next();
			let x = $getIterator(e1);
			while(x.hasNext()) {
				let x1 = x.next();
				_g.push(x1);
			}
		}
		return _g;
	}
	static flatMap(it,f) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			_g.push(f(x1));
		}
		let _g1 = [];
		let e = $getIterator(_g);
		while(e.hasNext()) {
			let e1 = e.next();
			let x = $getIterator(e1);
			while(x.hasNext()) {
				let x1 = x.next();
				_g1.push(x1);
			}
		}
		return _g1;
	}
	static has(it,elt) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(x1 == elt) {
				return true;
			}
		}
		return false;
	}
	static exists(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(f(x1)) {
				return true;
			}
		}
		return false;
	}
	static foreach(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(!f(x1)) {
				return false;
			}
		}
		return true;
	}
	static iter(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			f(x1);
		}
	}
	static filter(it,f) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(f(x1)) {
				_g.push(x1);
			}
		}
		return _g;
	}
	static fold(it,f,first) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			first = f(x1,first);
		}
		return first;
	}
	static foldi(it,f,first) {
		let i = 0;
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			first = f(x1,first,i);
			++i;
		}
		return first;
	}
	static count(it,pred) {
		let n = 0;
		if(pred == null) {
			let _ = $getIterator(it);
			while(_.hasNext()) {
				let _1 = _.next();
				++n;
			}
		} else {
			let x = $getIterator(it);
			while(x.hasNext()) {
				let x1 = x.next();
				if(pred(x1)) {
					++n;
				}
			}
		}
		return n;
	}
	static empty(it) {
		return !$getIterator(it).hasNext();
	}
	static indexOf(it,v) {
		let i = 0;
		let v2 = $getIterator(it);
		while(v2.hasNext()) {
			let v21 = v2.next();
			if(v == v21) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static find(it,f) {
		let v = $getIterator(it);
		while(v.hasNext()) {
			let v1 = v.next();
			if(f(v1)) {
				return v1;
			}
		}
		return null;
	}
	static findIndex(it,f) {
		let i = 0;
		let v = $getIterator(it);
		while(v.hasNext()) {
			let v1 = v.next();
			if(f(v1)) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static concat(a,b) {
		let l = [];
		let x = $getIterator(a);
		while(x.hasNext()) {
			let x1 = x.next();
			l.push(x1);
		}
		let x1 = $getIterator(b);
		while(x1.hasNext()) {
			let x = x1.next();
			l.push(x);
		}
		return l;
	}
}
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Math.__name__ = "Math";
class MessageHandler {
	static handle(m) {
		let content = m.content.toLowerCase();
		if(content.indexOf("good bot") != -1) {
			m.channel.send("Thanks, I do my best!");
			return;
		} else {
			return;
		}
	}
}
$hxClasses["MessageHandler"] = MessageHandler;
MessageHandler.__name__ = "MessageHandler";
class Reflect {
	static hasField(o,field) {
		return Object.prototype.hasOwnProperty.call(o,field);
	}
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return null;
		}
	}
	static setField(o,field,value) {
		o[field] = value;
	}
	static getProperty(o,field) {
		let tmp;
		if(o == null) {
			return null;
		} else {
			let tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
	static setProperty(o,field,value) {
		let tmp;
		let tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[field] = value;
		}
	}
	static callMethod(o,func,args) {
		return func.apply(o,args);
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compare(a,b) {
		if(a == b) {
			return 0;
		} else if(a > b) {
			return 1;
		} else {
			return -1;
		}
	}
	static compareMethods(f1,f2) {
		if(f1 == f2) {
			return true;
		}
		if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
			return false;
		}
		if(f1.scope == f2.scope && f1.method == f2.method) {
			return f1.method != null;
		} else {
			return false;
		}
	}
	static isObject(v) {
		if(v == null) {
			return false;
		}
		let t = typeof(v);
		if(!(t == "string" || t == "object" && v.__enum__ == null)) {
			if(t == "function") {
				return (v.__name__ || v.__ename__) != null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static isEnumValue(v) {
		if(v != null) {
			return v.__enum__ != null;
		} else {
			return false;
		}
	}
	static deleteField(o,field) {
		if(!Object.prototype.hasOwnProperty.call(o,field)) {
			return false;
		}
		delete(o[field]);
		return true;
	}
	static copy(o) {
		if(o == null) {
			return null;
		}
		let o2 = { };
		let _g = 0;
		let _g1 = Reflect.fields(o);
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			o2[f] = Reflect.field(o,f);
		}
		return o2;
	}
	static makeVarArgs(f) {
		return function() {
			let a = Array.prototype.slice;
			let a1 = arguments;
			let a2 = a.call(a1);
			return f(a2);
		};
	}
}
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
class Std {
	static is(v,t) {
		return js_Boot.__instanceof(v,t);
	}
	static isOfType(v,t) {
		return js_Boot.__instanceof(v,t);
	}
	static downcast(value,c) {
		if(js_Boot.__downcastCheck(value,c)) {
			return value;
		} else {
			return null;
		}
	}
	static instance(value,c) {
		if(js_Boot.__downcastCheck(value,c)) {
			return value;
		} else {
			return null;
		}
	}
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static int(x) {
		return x | 0;
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
	static parseFloat(x) {
		return parseFloat(x);
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
	get_length() {
		return this.b.length;
	}
	add(x) {
		this.b += Std.string(x);
	}
	addChar(c) {
		this.b += String.fromCodePoint(c);
	}
	addSub(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	toString() {
		return this.b;
	}
}
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
	,b: null
	,__properties__: {get_length: "get_length"}
});
class haxe_SysTools {
	static quoteUnixArg(argument) {
		if(argument == "") {
			return "''";
		}
		if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
			return argument;
		}
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
	static quoteWinArg(argument,escapeMetaCharacters) {
		if(!new EReg("^[^ \t\\\\\"]+$","").match(argument)) {
			let result_b = "";
			let needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "";
			if(needquote) {
				result_b += "\"";
			}
			let bs_buf = new StringBuf();
			let _g = 0;
			let _g1 = argument.length;
			while(_g < _g1) {
				let i = _g++;
				let _g1 = HxOverrides.cca(argument,i);
				if(_g1 == null) {
					let c = _g1;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c);
				} else {
					switch(_g1) {
					case 34:
						let bs = bs_buf.b;
						result_b += bs == null ? "null" : "" + bs;
						result_b += bs == null ? "null" : "" + bs;
						bs_buf = new StringBuf();
						result_b += "\\\"";
						break;
					case 92:
						bs_buf.b += "\\";
						break;
					default:
						let c = _g1;
						if(bs_buf.b.length > 0) {
							result_b += Std.string(bs_buf.b);
							bs_buf = new StringBuf();
						}
						result_b += String.fromCodePoint(c);
					}
				}
			}
			result_b += Std.string(bs_buf.b);
			if(needquote) {
				result_b += Std.string(bs_buf.b);
				result_b += "\"";
			}
			argument = result_b;
		}
		if(escapeMetaCharacters) {
			let result_b = "";
			let _g = 0;
			let _g1 = argument.length;
			while(_g < _g1) {
				let i = _g++;
				let c = HxOverrides.cca(argument,i);
				if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
					result_b += String.fromCodePoint(94);
				}
				result_b += String.fromCodePoint(c);
			}
			return result_b;
		} else {
			return argument;
		}
	}
}
$hxClasses["haxe.SysTools"] = haxe_SysTools;
haxe_SysTools.__name__ = "haxe.SysTools";
class StringTools {
	static urlEncode(s) {
		return encodeURIComponent(s);
	}
	static urlDecode(s) {
		return decodeURIComponent(s.split("+").join(" "));
	}
	static htmlEscape(s,quotes) {
		let buf_b = "";
		let _g_offset = 0;
		let _g_s = s;
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static htmlUnescape(s) {
		return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
	}
	static contains(s,value) {
		return s.indexOf(value) != -1;
	}
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static endsWith(s,end) {
		let elen = end.length;
		let slen = s.length;
		if(slen >= elen) {
			return s.indexOf(end,slen - elen) == slen - elen;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static rpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		buf_b += s == null ? "null" : "" + s;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
	static hex(n,digits) {
		let s = "";
		let hexChars = "0123456789ABCDEF";
		while(true) {
			s = hexChars.charAt(n & 15) + s;
			n >>>= 4;
			if(!(n > 0)) {
				break;
			}
		}
		if(digits != null) {
			while(s.length < digits) s = "0" + s;
		}
		return s;
	}
	static fastCodeAt(s,index) {
		return s.charCodeAt(index);
	}
	static iterator(s) {
		return new haxe_iterators_StringIterator(s);
	}
	static keyValueIterator(s) {
		return new haxe_iterators_StringKeyValueIterator(s);
	}
	static isEof(c) {
		return c != c;
	}
	static quoteUnixArg(argument) {
		if(argument == "") {
			return "''";
		} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
			return argument;
		} else {
			return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
		}
	}
	static quoteWinArg(argument,escapeMetaCharacters) {
		let argument1 = argument;
		if(!new EReg("^[^ \t\\\\\"]+$","").match(argument1)) {
			let result_b = "";
			let needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "";
			if(needquote) {
				result_b += "\"";
			}
			let bs_buf = new StringBuf();
			let _g = 0;
			let _g1 = argument1.length;
			while(_g < _g1) {
				let i = _g++;
				let _g1 = HxOverrides.cca(argument1,i);
				if(_g1 == null) {
					let c = _g1;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c);
				} else {
					switch(_g1) {
					case 34:
						let bs = bs_buf.b;
						result_b += Std.string(bs);
						result_b += Std.string(bs);
						bs_buf = new StringBuf();
						result_b += "\\\"";
						break;
					case 92:
						bs_buf.b += "\\";
						break;
					default:
						let c = _g1;
						if(bs_buf.b.length > 0) {
							result_b += Std.string(bs_buf.b);
							bs_buf = new StringBuf();
						}
						result_b += String.fromCodePoint(c);
					}
				}
			}
			result_b += Std.string(bs_buf.b);
			if(needquote) {
				result_b += Std.string(bs_buf.b);
				result_b += "\"";
			}
			argument1 = result_b;
		}
		if(escapeMetaCharacters) {
			let result_b = "";
			let _g = 0;
			let _g1 = argument1.length;
			while(_g < _g1) {
				let i = _g++;
				let c = HxOverrides.cca(argument1,i);
				if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
					result_b += String.fromCodePoint(94);
				}
				result_b += String.fromCodePoint(c);
			}
			return result_b;
		} else {
			return argument1;
		}
	}
	static utf16CodePointAt(s,index) {
		let c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		return c;
	}
}
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
class Sys {
	static print(v) {
		process.stdout.write(Std.string(v));
	}
	static println(v) {
		process.stdout.write(Std.string(v));
		process.stdout.write("\n");
	}
	static args() {
		return process.argv.slice(2);
	}
	static getEnv(s) {
		return process.env[s];
	}
	static putEnv(s,v) {
		process.env[s] = v;
	}
	static environment() {
		let m = new haxe_ds_StringMap();
		let _g = 0;
		let _g1 = Reflect.fields(process.env);
		while(_g < _g1.length) {
			let key = _g1[_g];
			++_g;
			let v = process.env[key];
			m.h[key] = v;
		}
		return m;
	}
	static setTimeLocale(loc) {
		return false;
	}
	static getCwd() {
		return process.cwd();
	}
	static setCwd(s) {
		process.chdir(s);
	}
	static systemName() {
		let _g = process.platform;
		switch(_g) {
		case "darwin":
			return "Mac";
		case "freebsd":
			return "BSD";
		case "linux":
			return "Linux";
		case "win32":
			return "Windows";
		default:
			let other = _g;
			return other;
		}
	}
	static command(cmd,args) {
		if(args == null) {
			return js_node_ChildProcess.spawnSync(cmd,{ shell : true, stdio : "inherit"}).status;
		} else {
			return js_node_ChildProcess.spawnSync(cmd,args,{ stdio : "inherit"}).status;
		}
	}
	static exit(code) {
		process.exit(code);
	}
	static time() {
		return Date.now() / 1000;
	}
	static cpuTime() {
		return process.uptime();
	}
	static executablePath() {
		return process.argv[0];
	}
	static programPath() {
		return __filename;
	}
	static getChar(echo) {
		throw haxe_Exception.thrown("Sys.getChar is currently not implemented on node.js");
	}
	static sleep(seconds) {
		let end = Date.now() + seconds * 1000;
		while(Date.now() <= end) {
		}
	}
	static stdin() {
		return new _$Sys_FileInput(0);
	}
	static stdout() {
		return new _$Sys_FileOutput(1);
	}
	static stderr() {
		return new _$Sys_FileOutput(2);
	}
}
$hxClasses["Sys"] = Sys;
Sys.__name__ = "Sys";
class haxe_io_Output {
	writeByte(c) {
		throw haxe_Exception.thrown("Not implemented");
	}
	writeBytes(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		let b = s.b;
		let k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	flush() {
	}
	close() {
	}
	set_bigEndian(b) {
		this.bigEndian = b;
		return b;
	}
	write(s) {
		let l = s.length;
		let p = 0;
		while(l > 0) {
			let k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	writeFullBytes(s,pos,len) {
		while(len > 0) {
			let k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	writeFloat(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	writeDouble(x) {
		let i64 = haxe_io_FPHelper.doubleToI64(x);
		if(this.bigEndian) {
			this.writeInt32(i64.high);
			this.writeInt32(i64.low);
		} else {
			this.writeInt32(i64.low);
			this.writeInt32(i64.high);
		}
	}
	writeInt8(x) {
		if(x < -128 || x >= 128) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeByte(x & 255);
	}
	writeInt16(x) {
		if(x < -32768 || x >= 32768) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	writeUInt16(x) {
		if(x < 0 || x >= 65536) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	writeInt24(x) {
		if(x < -8388608 || x >= 8388608) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeUInt24(x & 16777215);
	}
	writeUInt24(x) {
		if(x < 0 || x >= 16777216) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 16);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16);
		}
	}
	writeInt32(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	prepare(nbytes) {
	}
	writeInput(i,bufsize) {
		if(bufsize == null) {
			bufsize = 4096;
		}
		let buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		try {
			while(true) {
				let len = i.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw haxe_Exception.thrown(haxe_io_Error.Blocked);
				}
				let p = 0;
				while(len > 0) {
					let k = this.writeBytes(buf,p,len);
					if(k == 0) {
						throw haxe_Exception.thrown(haxe_io_Error.Blocked);
					}
					p += k;
					len -= k;
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
	}
	writeString(s,encoding) {
		let b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
}
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
Object.assign(haxe_io_Output.prototype, {
	__class__: haxe_io_Output
	,bigEndian: null
	,__properties__: {set_bigEndian: "set_bigEndian"}
});
class _$Sys_FileOutput extends haxe_io_Output {
	constructor(fd) {
		super();
		this.fd = fd;
	}
	writeByte(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	writeBytes(s,pos,len) {
		let data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	writeString(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	flush() {
		js_node_Fs.fsyncSync(this.fd);
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
}
$hxClasses["_Sys.FileOutput"] = _$Sys_FileOutput;
_$Sys_FileOutput.__name__ = "_Sys.FileOutput";
_$Sys_FileOutput.__super__ = haxe_io_Output;
Object.assign(_$Sys_FileOutput.prototype, {
	__class__: _$Sys_FileOutput
	,fd: null
});
class haxe_io_Input {
	readByte() {
		throw haxe_Exception.thrown("Not implemented");
	}
	readBytes(s,pos,len) {
		let k = len;
		let b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	close() {
	}
	set_bigEndian(b) {
		this.bigEndian = b;
		return b;
	}
	readAll(bufsize) {
		if(bufsize == null) {
			bufsize = 16384;
		}
		let buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		let total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				let len = this.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw haxe_Exception.thrown(haxe_io_Error.Blocked);
				}
				total.addBytes(buf,0,len);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return total.getBytes();
	}
	readFullBytes(s,pos,len) {
		while(len > 0) {
			let k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	read(nbytes) {
		let s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		let p = 0;
		while(nbytes > 0) {
			let k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	readUntil(end) {
		let buf = new haxe_io_BytesBuffer();
		let last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	readLine() {
		let buf = new haxe_io_BytesBuffer();
		let last;
		let s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				let e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	readFloat() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	readDouble() {
		let i1 = this.readInt32();
		let i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	readInt8() {
		let n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	readInt16() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	readUInt16() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	readInt24() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let ch3 = this.readByte();
		let n = this.bigEndian ? ch3 | ch2 << 8 | ch1 << 16 : ch1 | ch2 << 8 | ch3 << 16;
		if((n & 8388608) != 0) {
			return n - 16777216;
		}
		return n;
	}
	readUInt24() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	readInt32() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let ch3 = this.readByte();
		let ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	readString(len,encoding) {
		let b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	getDoubleSig(bytes) {
		return ((bytes[1] & 15) << 16 | bytes[2] << 8 | bytes[3]) * 4294967296. + (bytes[4] >> 7) * 2147483648 + ((bytes[4] & 127) << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7]);
	}
}
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
Object.assign(haxe_io_Input.prototype, {
	__class__: haxe_io_Input
	,bigEndian: null
	,__properties__: {set_bigEndian: "set_bigEndian"}
});
class _$Sys_FileInput extends haxe_io_Input {
	constructor(fd) {
		super();
		this.fd = fd;
	}
	readByte() {
		let buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	readBytes(s,pos,len) {
		let data = s.b;
		let buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
}
$hxClasses["_Sys.FileInput"] = _$Sys_FileInput;
_$Sys_FileInput.__name__ = "_Sys.FileInput";
_$Sys_FileInput.__super__ = haxe_io_Input;
Object.assign(_$Sys_FileInput.prototype, {
	__class__: _$Sys_FileInput
	,fd: null
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
class Type {
	static getClass(o) {
		return js_Boot.getClass(o);
	}
	static getEnum(o) {
		if(o == null) {
			return null;
		}
		return $hxEnums[o.__enum__];
	}
	static getSuperClass(c) {
		return c.__super__;
	}
	static getClassName(c) {
		return c.__name__;
	}
	static getEnumName(e) {
		return e.__ename__;
	}
	static resolveClass(name) {
		return $hxClasses[name];
	}
	static resolveEnum(name) {
		return $hxEnums[name];
	}
	static createInstance(cl,args) {
		let ctor = Function.prototype.bind.apply(cl,[null].concat(args));
		return new (ctor);
	}
	static createEmptyInstance(cl) {
		return Object.create(cl.prototype);
	}
	static createEnum(e,constr,params) {
		let f = Reflect.field(e,constr);
		if(f == null) {
			throw haxe_Exception.thrown("No such constructor " + constr);
		}
		if(Reflect.isFunction(f)) {
			if(params == null) {
				throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
			}
			return f.apply(e,params);
		}
		if(params != null && params.length != 0) {
			throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
		}
		return f;
	}
	static createEnumIndex(e,index,params) {
		let c = e.__constructs__[index];
		if(c == null) {
			throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
		}
		return Type.createEnum(e,c,params);
	}
	static getInstanceFields(c) {
		let result = [];
		while(c != null) {
			let _g = 0;
			let _g1 = Object.getOwnPropertyNames(c.prototype);
			while(_g < _g1.length) {
				let name = _g1[_g];
				++_g;
				switch(name) {
				case "__class__":case "__properties__":case "constructor":
					break;
				default:
					if(result.indexOf(name) == -1) {
						result.push(name);
					}
				}
			}
			c = c.__super__;
		}
		return result;
	}
	static getClassFields(c) {
		let a = Object.getOwnPropertyNames(c);
		HxOverrides.remove(a,"__id__");
		HxOverrides.remove(a,"hx__closures__");
		HxOverrides.remove(a,"__name__");
		HxOverrides.remove(a,"__interfaces__");
		HxOverrides.remove(a,"__isInterface__");
		HxOverrides.remove(a,"__properties__");
		HxOverrides.remove(a,"__instanceFields__");
		HxOverrides.remove(a,"__super__");
		HxOverrides.remove(a,"__meta__");
		HxOverrides.remove(a,"prototype");
		HxOverrides.remove(a,"name");
		HxOverrides.remove(a,"length");
		return a;
	}
	static getEnumConstructs(e) {
		return e.__constructs__.slice();
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			let e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			let c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
	static enumEq(a,b) {
		if(a == b) {
			return true;
		}
		try {
			let e = a.__enum__;
			if(e == null || e != b.__enum__) {
				return false;
			}
			if(a._hx_index != b._hx_index) {
				return false;
			}
			let enm = $hxEnums[e];
			let ctorName = enm.__constructs__[a._hx_index];
			let params = enm[ctorName].__params__;
			let _g = 0;
			while(_g < params.length) {
				let f = params[_g];
				++_g;
				if(!Type.enumEq(a[f],b[f])) {
					return false;
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return false;
		}
		return true;
	}
	static enumConstructor(e) {
		return $hxEnums[e.__enum__].__constructs__[e._hx_index];
	}
	static enumParameters(e) {
		let enm = $hxEnums[e.__enum__];
		let ctorName = enm.__constructs__[e._hx_index];
		let params = enm[ctorName].__params__;
		if(params != null) {
			let _g = [];
			let _g1 = 0;
			while(_g1 < params.length) {
				let p = params[_g1];
				++_g1;
				_g.push(e[p]);
			}
			return _g;
		} else {
			return [];
		}
	}
	static enumIndex(e) {
		return e._hx_index;
	}
	static allEnums(e) {
		return e.__empty_constructs__.slice();
	}
}
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
class commands_Command {
}
$hxClasses["commands.Command"] = commands_Command;
commands_Command.__name__ = "commands.Command";
commands_Command.__isInterface__ = true;
Object.assign(commands_Command.prototype, {
	__class__: commands_Command
	,name: null
	,shorthelp: null
	,longhelp: null
	,hidden: null
	,call: null
});
class commands_Ghost {
	constructor() {
		this.hidden = false;
		this.longhelp = "Reposts the message, and deletes the orignal one.";
		this.shorthelp = "Reposts the message, and deletes the orignal one";
		this.name = "ghost";
	}
	call(m,b) {
		let content = m.content;
		let msg = content.substring((Bot.prefix + "ghost ").length,content.length);
		m.delete();
		m.channel.send(msg).catch(function(err) {
			Bot.bork(err,m.channel);
		});
	}
}
$hxClasses["commands.Ghost"] = commands_Ghost;
commands_Ghost.__name__ = "commands.Ghost";
commands_Ghost.__interfaces__ = [commands_Command];
Object.assign(commands_Ghost.prototype, {
	__class__: commands_Ghost
	,name: null
	,shorthelp: null
	,longhelp: null
	,hidden: null
});
class commands_Mod {
	constructor() {
		this.hidden = true;
		this.name = "mod";
		this.shorthelp = "Get a mod!";
		this.longhelp = "Returns a mod, usage : `]mod mod_name`";
	}
	processMods(data,channel) {
		try {
			haxe_Log.trace("Mods processed!",{ fileName : "Source/commands/Mod.hx", lineNumber : 28, className : "commands.Mod", methodName : "processMods"});
			let json = new haxe_format_JsonParser(data).doParse();
			let data1 = json.data;
			if(json.result_count > 1) {
				let b_b = "";
				let _g = 0;
				let _g1 = json.result_count;
				while(_g < _g1) {
					let o = _g++;
					b_b += Std.string(data1[o].name + "\n");
				}
				channel.send("There are multiple mods matching that input : \n" + b_b);
			} else if(json.result_count == 1) {
				let mod = data1[0];
				let embed = new discordjs_MessageEmbed();
				embed.setDescription(mod.summary);
				embed.setTitle(mod.name);
				embed.addField("Id",mod.id,true);
				embed.setColor("BLUE");
				channel.send(embed);
			} else {
				haxe_Log.trace("Mod not found : " + HxOverrides.substr(this.lastMessage.content,this.lastMessage.content.indexOf(" "),null),{ fileName : "Source/commands/Mod.hx", lineNumber : 46, className : "commands.Mod", methodName : "processMods"});
				channel.send(null,{ content : "No such mod : " + HxOverrides.substr(this.lastMessage.content,this.lastMessage.content.indexOf(" "),null)});
			}
		} catch( _g ) {
			let e = haxe_Exception.caught(_g);
			channel.send(e.get_message());
		}
	}
	call(m,b) {
		try {
			let tmp = "https://api.mod.io/v1/games/34/mods?api_key=" + Bot.getModioKey() + "&_q=";
			let _g = $bind(this,this.processMods);
			let channel = m.channel;
			let tmp1 = function(data) {
				_g(data,channel);
			};
			lib_Modio.makeRequest(tmp + HxOverrides.substr(m.content,m.content.indexOf(" "),null)).then(tmp1,function(e) {
				m.reply("Modio error" + "\n" + e);
			});
		} catch( _g ) {
			let e = haxe_Exception.caught(_g);
			haxe_Log.trace(e,{ fileName : "Source/commands/Mod.hx", lineNumber : 61, className : "commands.Mod", methodName : "call"});
		}
	}
}
$hxClasses["commands.Mod"] = commands_Mod;
commands_Mod.__name__ = "commands.Mod";
commands_Mod.__interfaces__ = [commands_Command];
Object.assign(commands_Mod.prototype, {
	__class__: commands_Mod
	,name: null
	,shorthelp: null
	,longhelp: null
	,hidden: null
	,lastMessage: null
});
class commands_Moderation {
	constructor(type) {
		this.hidden = true;
		this.longhelp = "Kicks the mentioned user";
		this.shorthelp = "Kicks the mentioned user.";
		this.name = "kick";
		this.name = type;
		this.type = type;
		let tmp;
		switch(type) {
		case "ban":
			tmp = "Bans the mentioned user";
			break;
		case "mute":
			tmp = "Mutes the mentioned user";
			break;
		case "purge":
			tmp = "Purges a bunch of messages";
			break;
		case "softban":
			tmp = "Softbans the user";
			break;
		case "warn":
			tmp = "Warns the user";
			break;
		default:
			tmp = this.shorthelp;
		}
		this.shorthelp = this.longhelp = tmp;
	}
	call(m,b) {
		switch(this.type) {
		case "ban":
			this.ban(m,b);
			break;
		case "kick":
			this.kick(m,b);
			break;
		case "mute":
			this.mute(m,b);
			break;
		case "purge":
			m.channel.bulkDelete(Std.parseInt(StringTools.rtrim(StringTools.ltrim(HxOverrides.substr(m.content,(Bot.prefix + "purge ").length,null)))),false).catch(function(e) {
				Bot.bork(e,m.channel);
			});
			break;
		case "softban":
			return;
		case "warn":
			this.warn(m,b);
			break;
		}
	}
	kick(m,b) {
		m.guild.members.fetch(m.author.id).then(function(e) {
			if(e.hasPermission("KICK_MEMBERS",{ admin_override : true, owner_override : true})) {
				m.guild.members.fetch(m.mentions.users.entries().next().value[1].id).then(function(e) {
					if(e.kickable) {
						let reason = HxOverrides.substr(m.content,m.content.indexOf(">"),null);
						e.send("You were kicked from " + e.guild.name + " because : " + reason).catch(function(e) {
							haxe_Log.trace(e,{ fileName : "Source/commands/Moderation.hx", lineNumber : 65, className : "commands.Moderation", methodName : "kick"});
						});
						m.channel.send(e.name + " was kicked because :" + reason);
						e.kick(reason);
					} else {
						m.reply("Failed to kick user!");
					}
				});
			} else {
				m.reply("You do not have the required permissions to kick users!");
			}
		});
	}
	ban(m,b) {
		m.guild.members.fetch(m.author.id).then(function(e) {
			if(e.hasPermission("BAN_MEMBERS",{ admin_override : true, owner_override : true})) {
				m.guild.members.fetch(m.mentions.users.entries().next().value[1].id).then(function(e) {
					if(e.bannable) {
						let reason = HxOverrides.substr(m.content,m.content.indexOf(">") + 2,null);
						e.send("You were banned from " + e.guild.name + " because : " + reason).catch(function(e) {
							haxe_Log.trace(e,{ fileName : "Source/commands/Moderation.hx", lineNumber : 86, className : "commands.Moderation", methodName : "ban"});
						});
						m.channel.send(e.name + " was banned because :" + reason);
						e.ban(reason);
					} else {
						m.reply("Failed to ban user!");
					}
				});
			} else {
				m.reply("You do not have the required permissions to ban users!");
			}
		});
	}
	warn(m,b) {
		m.reply("Not Implemented");
	}
	mute(m,b) {
		m.reply("Not implemented.");
	}
}
$hxClasses["commands.Moderation"] = commands_Moderation;
commands_Moderation.__name__ = "commands.Moderation";
commands_Moderation.__interfaces__ = [commands_Command];
Object.assign(commands_Moderation.prototype, {
	__class__: commands_Moderation
	,name: null
	,shorthelp: null
	,longhelp: null
	,hidden: null
	,type: null
});
var discordjs_Base = require("discord.js").Base;
var discordjs_BaseManager = require("discord.js").BaseManager;
var discordjs_Channel = require("discord.js").Channel;
var discordjs_ChannelManager = require("discord.js").ChannelManager;
var js_node_events_EventEmitter = require("events").EventEmitter;
var discordjs_Client = require("discord.js").Client;
var discordjs_TextBasedChannel = require("discord.js").TextBasedChannel;
var discordjs_User = require("discord.js").User;
var discordjs_ClientUser = require("discord.js").ClientUser;
var discordjs_Collection = require("discord.js").Collection;
var discordjs_GuildChannel = require("discord.js").GuildChannel;
var discordjs_TextChannel = require("discord.js").Message;
var discordjs_DMChannel = require("discord.js").DMChannel;
var discordjs_Guild = require("discord.js").Guild;
var discordjs_GuildMember = require("discord.js").GuildMember;
var discordjs_GuildMemberManager = require("discord.js").GuildMemberManager;
var discordjs_GuildMemberRoleManager = require("discord.js").GuildMemberRoleManager;
var discordjs_Message = require("discord.js").Message;
var discordjs_MessageEmbed = require("discord.js").MessageEmbed;
var discordjs_MessageManager = require("discord.js").MessageManager;
var discordjs_MessageMentions = require("discord.js").MessageMentions;
var discordjs_MessageReaction = require("discord.js").MessageReaction;
var discordjs_Presence = require("discord.js").Presence;
var discordjs_Role = require("discord.js").Role;
var discordjs_RoleManager = require("discord.js").RoleManager;
var discordjs_UserManager = require("discord.js").UserManager;
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
class haxe_CallStack {
	static get_length(this1) {
		return this1.length;
	}
	static callStack() {
		return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
	}
	static exceptionStack() {
		let eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
		return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
	}
	static toString(stack) {
		let b = new StringBuf();
		let _g = 0;
		let _g1 = stack;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			b.b += "\nCalled from ";
			haxe_CallStack.itemToString(b,s);
		}
		return b.b;
	}
	static subtract(this1,stack) {
		let startIndex = -1;
		let i = -1;
		while(++i < this1.length) {
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) {
				let j = _g++;
				if(haxe_CallStack.equalItems(this1[i],stack[j])) {
					if(startIndex < 0) {
						startIndex = i;
					}
					++i;
					if(i >= this1.length) {
						break;
					}
				} else {
					startIndex = -1;
				}
			}
			if(startIndex >= 0) {
				break;
			}
		}
		if(startIndex >= 0) {
			return this1.slice(0,startIndex);
		} else {
			return this1;
		}
	}
	static copy(this1) {
		return this1.slice();
	}
	static get(this1,index) {
		return this1[index];
	}
	static asArray(this1) {
		return this1;
	}
	static equalItems(item1,item2) {
		if(item1 == null) {
			if(item2 == null) {
				return true;
			} else {
				return false;
			}
		} else {
			switch(item1._hx_index) {
			case 0:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 0) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 1) {
					let m1 = item1.m;
					let m2 = item2.m;
					return m1 == m2;
				} else {
					return false;
				}
				break;
			case 2:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 2) {
					let item11 = item1.s;
					let file1 = item1.file;
					let line1 = item1.line;
					let col1 = item1.column;
					let col2 = item2.column;
					let line2 = item2.line;
					let file2 = item2.file;
					let item21 = item2.s;
					if(file1 == file2 && line1 == line2 && col1 == col2) {
						return haxe_CallStack.equalItems(item11,item21);
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 3:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 3) {
					let class1 = item1.classname;
					let method1 = item1.method;
					let method2 = item2.method;
					let class2 = item2.classname;
					if(class1 == class2) {
						return method1 == method2;
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 4:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 4) {
					let v1 = item1.v;
					let v2 = item2.v;
					return v1 == v2;
				} else {
					return false;
				}
				break;
			}
		}
	}
	static exceptionToString(e) {
		if(e.get_previous() == null) {
			let tmp = "Exception: " + e.get_message();
			let tmp1 = e.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		}
		let result = "";
		let e1 = e;
		let prev = null;
		while(e1 != null) {
			if(prev == null) {
				let result1 = "Exception: " + e1.get_message();
				let tmp = e1.get_stack();
				result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
			} else {
				let prevStack = haxe_CallStack.subtract(e1.get_stack(),prev.get_stack());
				result = "Exception: " + e1.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
			}
			prev = e1;
			e1 = e1.get_previous();
		}
		return result;
	}
	static itemToString(b,s) {
		switch(s._hx_index) {
		case 0:
			b.b += "a C function";
			break;
		case 1:
			let m = s.m;
			b.b += "module ";
			b.b += m == null ? "null" : "" + m;
			break;
		case 2:
			let col = s.column;
			let line = s.line;
			let file = s.file;
			let s1 = s.s;
			if(s1 != null) {
				haxe_CallStack.itemToString(b,s1);
				b.b += " (";
			}
			b.b += file == null ? "null" : "" + file;
			b.b += " line ";
			b.b += line == null ? "null" : "" + line;
			if(col != null) {
				b.b += " column ";
				b.b += col == null ? "null" : "" + col;
			}
			if(s1 != null) {
				b.b += ")";
			}
			break;
		case 3:
			let meth = s.method;
			let cname = s.classname;
			b.b += Std.string(cname == null ? "<unknown>" : cname);
			b.b += ".";
			b.b += meth == null ? "null" : "" + meth;
			break;
		case 4:
			let n = s.v;
			b.b += "local function #";
			b.b += n == null ? "null" : "" + n;
			break;
		}
	}
}
haxe_CallStack.__properties__ = {get_length: "get_length"};
class haxe_IMap {
}
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
	,get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,clear: null
});
class haxe_DynamicAccess {
	static _new() {
		let this1 = { };
		return this1;
	}
	static get(this1,key) {
		return this1[key];
	}
	static set(this1,key,value) {
		return this1[key] = value;
	}
	static exists(this1,key) {
		return Object.prototype.hasOwnProperty.call(this1,key);
	}
	static remove(this1,key) {
		return Reflect.deleteField(this1,key);
	}
	static keys(this1) {
		return Reflect.fields(this1);
	}
	static copy(this1) {
		return Reflect.copy(this1);
	}
	static iterator(this1) {
		return new haxe_iterators_DynamicAccessIterator(this1);
	}
	static keyValueIterator(this1) {
		return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
	}
}
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
		this.__skipStack = 0;
		let old = Error.prepareStackTrace;
		Error.prepareStackTrace = function(e) { return e.stack; }
		if(((native) instanceof Error)) {
			this.stack = native.stack;
		} else {
			let e = null;
			if(Error.captureStackTrace) {
				Error.captureStackTrace(this,haxe_Exception);
				e = this;
			} else {
				e = new Error();
				if(typeof(e.stack) == "undefined") {
					try { throw e; } catch(_) {}
					this.__skipStack++;
				}
			}
			this.stack = e.stack;
		}
		Error.prepareStackTrace = old;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	details() {
		if(this.get_previous() == null) {
			let tmp = "Exception: " + this.get_message();
			let tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			let result = "";
			let e = this;
			let prev = null;
			while(e != null) {
				if(prev == null) {
					let result1 = "Exception: " + e.get_message();
					let tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					let prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	__shiftStack() {
		this.__skipStack++;
	}
	get_message() {
		return this.message;
	}
	get_previous() {
		return this.__previousException;
	}
	get_native() {
		return this.__nativeException;
	}
	get_stack() {
		let _g = this.__exceptionStack;
		if(_g == null) {
			let value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			let s = _g;
			return s;
		}
	}
	setProperty(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	get___exceptionStack() {
		return this.__exceptionStack;
	}
	set___exceptionStack(value) {
		this.setProperty("__exceptionStack",value);
		return value;
	}
	get___skipStack() {
		return this.__skipStack;
	}
	set___skipStack(value) {
		this.setProperty("__skipStack",value);
		return value;
	}
	get___nativeException() {
		return this.__nativeException;
	}
	set___nativeException(value) {
		this.setProperty("__nativeException",value);
		return value;
	}
	get___previousException() {
		return this.__previousException;
	}
	set___previousException(value) {
		this.setProperty("__previousException",value);
		return value;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			e.__skipStack++;
			return e;
		}
	}
}
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
	,__skipStack: null
	,__nativeException: null
	,__previousException: null
	,__properties__: {set___exceptionStack: "set___exceptionStack",get___exceptionStack: "get___exceptionStack",get_native: "get_native",get_previous: "get_previous",get_stack: "get_stack",get_message: "get_message"}
});
class haxe_Int32 {
	static negate(this1) {
		return ~this1 + 1 | 0;
	}
	static preIncrement(this1) {
		this1 = ++this1 | 0;
		return this1;
	}
	static postIncrement(this1) {
		let ret = this1++;
		this1 |= 0;
		return ret;
	}
	static preDecrement(this1) {
		this1 = --this1 | 0;
		return this1;
	}
	static postDecrement(this1) {
		let ret = this1--;
		this1 |= 0;
		return ret;
	}
	static add(a,b) {
		return a + b | 0;
	}
	static addInt(a,b) {
		return a + b | 0;
	}
	static sub(a,b) {
		return a - b | 0;
	}
	static subInt(a,b) {
		return a - b | 0;
	}
	static intSub(a,b) {
		return a - b | 0;
	}
	static mul(a,b) {
		return haxe_Int32._mul(a,b);
	}
	static mulInt(a,b) {
		return haxe_Int32._mul(a,b);
	}
	static toFloat(this1) {
		return this1;
	}
	static ucompare(a,b) {
		if(a < 0) {
			if(b < 0) {
				return ~b - ~a | 0;
			} else {
				return 1;
			}
		}
		if(b < 0) {
			return -1;
		} else {
			return a - b | 0;
		}
	}
	static clamp(x) {
		return x | 0;
	}
}
class haxe_Int64 {
	static _new(x) {
		let this1 = x;
		return this1;
	}
	static copy(this1) {
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		return this2;
	}
	static make(high,low) {
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static ofInt(x) {
		let this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
		return this1;
	}
	static toInt(x) {
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		return x.low;
	}
	static is(val) {
		return ((val) instanceof haxe__$Int64__$_$_$Int64);
	}
	static isInt64(val) {
		return ((val) instanceof haxe__$Int64__$_$_$Int64);
	}
	static getHigh(x) {
		return x.high;
	}
	static getLow(x) {
		return x.low;
	}
	static isNeg(x) {
		return x.high < 0;
	}
	static isZero(x) {
		let b_high = 0;
		let b_low = 0;
		if(x.high == b_high) {
			return x.low == b_low;
		} else {
			return false;
		}
	}
	static compare(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		if(a.high < 0) {
			if(b.high < 0) {
				return v;
			} else {
				return -1;
			}
		} else if(b.high >= 0) {
			return v;
		} else {
			return 1;
		}
	}
	static ucompare(a,b) {
		let v = haxe_Int32.ucompare(a.high,b.high);
		if(v != 0) {
			return v;
		} else {
			return haxe_Int32.ucompare(a.low,b.low);
		}
	}
	static toStr(x) {
		return haxe_Int64.toString(x);
	}
	static toString(this1) {
		let i = this1;
		let b_high = 0;
		let b_low = 0;
		if(i.high == b_high && i.low == b_low) {
			return "0";
		}
		let str = "";
		let neg = false;
		if(i.high < 0) {
			neg = true;
		}
		let this2 = new haxe__$Int64__$_$_$Int64(0,10);
		let ten = this2;
		while(true) {
			let b_high = 0;
			let b_low = 0;
			if(!(i.high != b_high || i.low != b_low)) {
				break;
			}
			let r = haxe_Int64.divMod(i,ten);
			if(r.modulus.high < 0) {
				let x = r.modulus;
				let high = ~x.high;
				let low = ~x.low + 1 | 0;
				if(low == 0) {
					let ret = high++;
					high = high | 0;
				}
				let this_high = high;
				let this_low = low;
				str = this_low + str;
				let x1 = r.quotient;
				let high1 = ~x1.high;
				let low1 = ~x1.low + 1 | 0;
				if(low1 == 0) {
					let ret = high1++;
					high1 = high1 | 0;
				}
				let this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
				i = this1;
			} else {
				str = r.modulus.low + str;
				i = r.quotient;
			}
		}
		if(neg) {
			str = "-" + str;
		}
		return str;
	}
	static parseString(sParam) {
		return haxe_Int64Helper.parseString(sParam);
	}
	static fromFloat(f) {
		return haxe_Int64Helper.fromFloat(f);
	}
	static divMod(dividend,divisor) {
		if(divisor.high == 0) {
			switch(divisor.low) {
			case 0:
				throw haxe_Exception.thrown("divide by zero");
			case 1:
				let this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
				let this2 = new haxe__$Int64__$_$_$Int64(0,0);
				return { quotient : this1, modulus : this2};
			}
		}
		let divSign = dividend.high < 0 != divisor.high < 0;
		let modulus;
		if(dividend.high < 0) {
			let high = ~dividend.high;
			let low = ~dividend.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			modulus = this1;
		} else {
			let this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			modulus = this1;
		}
		if(divisor.high < 0) {
			let high = ~divisor.high;
			let low = ~divisor.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			divisor = this1;
		}
		let this3 = new haxe__$Int64__$_$_$Int64(0,0);
		let quotient = this3;
		let this4 = new haxe__$Int64__$_$_$Int64(0,1);
		let mask = this4;
		while(!(divisor.high < 0)) {
			let v = haxe_Int32.ucompare(divisor.high,modulus.high);
			let cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
			let b = 1;
			b &= 63;
			if(b == 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
				divisor = this1;
			} else if(b < 32) {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
				divisor = this1;
			} else {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
				divisor = this1;
			}
			let b1 = 1;
			b1 &= 63;
			if(b1 == 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
				mask = this1;
			} else if(b1 < 32) {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
				mask = this1;
			} else {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
				mask = this1;
			}
			if(cmp >= 0) {
				break;
			}
		}
		while(true) {
			let b_high = 0;
			let b_low = 0;
			if(!(mask.high != b_high || mask.low != b_low)) {
				break;
			}
			let v = haxe_Int32.ucompare(modulus.high,divisor.high);
			if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
				quotient = this1;
				let high = modulus.high - divisor.high | 0;
				let low = modulus.low - divisor.low | 0;
				if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
					let ret = high--;
					high = high | 0;
				}
				let this2 = new haxe__$Int64__$_$_$Int64(high,low);
				modulus = this2;
			}
			let b = 1;
			b &= 63;
			if(b == 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
				mask = this1;
			} else if(b < 32) {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b);
				mask = this1;
			} else {
				let this1 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
				mask = this1;
			}
			let b1 = 1;
			b1 &= 63;
			if(b1 == 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
				divisor = this1;
			} else if(b1 < 32) {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1);
				divisor = this1;
			} else {
				let this1 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
				divisor = this1;
			}
		}
		if(divSign) {
			let high = ~quotient.high;
			let low = ~quotient.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			quotient = this1;
		}
		if(dividend.high < 0) {
			let high = ~modulus.high;
			let low = ~modulus.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			modulus = this1;
		}
		return { quotient : quotient, modulus : modulus};
	}
	static neg(x) {
		let high = ~x.high;
		let low = ~x.low + 1 | 0;
		if(low == 0) {
			let ret = high++;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static preIncrement(this1) {
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		let ret = this1.low++;
		this1.low = this1.low | 0;
		if(this1.low == 0) {
			let ret = this1.high++;
			this1.high = this1.high | 0;
		}
		return this1;
	}
	static postIncrement(this1) {
		let ret = this1;
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		let ret1 = this1.low++;
		this1.low = this1.low | 0;
		if(this1.low == 0) {
			let ret = this1.high++;
			this1.high = this1.high | 0;
		}
		return ret;
	}
	static preDecrement(this1) {
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		if(this1.low == 0) {
			let ret = this1.high--;
			this1.high = this1.high | 0;
		}
		let ret = this1.low--;
		this1.low = this1.low | 0;
		return this1;
	}
	static postDecrement(this1) {
		let ret = this1;
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		if(this1.low == 0) {
			let ret = this1.high--;
			this1.high = this1.high | 0;
		}
		let ret1 = this1.low--;
		this1.low = this1.low | 0;
		return ret;
	}
	static add(a,b) {
		let high = a.high + b.high | 0;
		let low = a.low + b.low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			let ret = high++;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static addInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let high = a.high + b_high | 0;
		let low = a.low + b_low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			let ret = high++;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static sub(a,b) {
		let high = a.high - b.high | 0;
		let low = a.low - b.low | 0;
		if(haxe_Int32.ucompare(a.low,b.low) < 0) {
			let ret = high--;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static subInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let high = a.high - b_high | 0;
		let low = a.low - b_low | 0;
		if(haxe_Int32.ucompare(a.low,b_low) < 0) {
			let ret = high--;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static intSub(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let high = a_high - b.high | 0;
		let low = a_low - b.low | 0;
		if(haxe_Int32.ucompare(a_low,b.low) < 0) {
			let ret = high--;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static mul(a,b) {
		let mask = 65535;
		let al = a.low & mask;
		let ah = a.low >>> 16;
		let bl = b.low & mask;
		let bh = b.low >>> 16;
		let p00 = haxe_Int32._mul(al,bl);
		let p10 = haxe_Int32._mul(ah,bl);
		let p01 = haxe_Int32._mul(al,bh);
		let p11 = haxe_Int32._mul(ah,bh);
		let low = p00;
		let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 <<= 16;
		low = low + p01 | 0;
		if(haxe_Int32.ucompare(low,p01) < 0) {
			let ret = high++;
			high = high | 0;
		}
		p10 <<= 16;
		low = low + p10 | 0;
		if(haxe_Int32.ucompare(low,p10) < 0) {
			let ret = high++;
			high = high | 0;
		}
		high = high + (haxe_Int32._mul(a.low,b.high) + haxe_Int32._mul(a.high,b.low) | 0) | 0;
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static mulInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let mask = 65535;
		let al = a.low & mask;
		let ah = a.low >>> 16;
		let bl = b_low & mask;
		let bh = b_low >>> 16;
		let p00 = haxe_Int32._mul(al,bl);
		let p10 = haxe_Int32._mul(ah,bl);
		let p01 = haxe_Int32._mul(al,bh);
		let p11 = haxe_Int32._mul(ah,bh);
		let low = p00;
		let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 <<= 16;
		low = low + p01 | 0;
		if(haxe_Int32.ucompare(low,p01) < 0) {
			let ret = high++;
			high = high | 0;
		}
		p10 <<= 16;
		low = low + p10 | 0;
		if(haxe_Int32.ucompare(low,p10) < 0) {
			let ret = high++;
			high = high | 0;
		}
		high = high + (haxe_Int32._mul(a.low,b_high) + haxe_Int32._mul(a.high,b_low) | 0) | 0;
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static div(a,b) {
		return haxe_Int64.divMod(a,b).quotient;
	}
	static divInt(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
		return haxe_Int64.divMod(a,this1).quotient;
	}
	static intDiv(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
		let x = haxe_Int64.divMod(this1,b).quotient;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		let x1 = x.low;
		let this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		return this2;
	}
	static mod(a,b) {
		return haxe_Int64.divMod(a,b).modulus;
	}
	static modInt(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
		let x = haxe_Int64.divMod(a,this1).modulus;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		let x1 = x.low;
		let this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		return this2;
	}
	static intMod(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
		let x = haxe_Int64.divMod(this1,b).modulus;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		let x1 = x.low;
		let this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		return this2;
	}
	static eq(a,b) {
		if(a.high == b.high) {
			return a.low == b.low;
		} else {
			return false;
		}
	}
	static eqInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		if(a.high == b_high) {
			return a.low == b_low;
		} else {
			return false;
		}
	}
	static neq(a,b) {
		if(a.high == b.high) {
			return a.low != b.low;
		} else {
			return true;
		}
	}
	static neqInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		if(a.high == b_high) {
			return a.low != b_low;
		} else {
			return true;
		}
	}
	static lt(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
	}
	static ltInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b_low);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
	}
	static intLt(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a_low,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
	}
	static lte(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
	}
	static lteInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b_low);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) <= 0;
	}
	static intLte(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a_low,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
	}
	static gt(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
	}
	static gtInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b_low);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) > 0;
	}
	static intGt(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a_low,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
	}
	static gte(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
	}
	static gteInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b_low);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) >= 0;
	}
	static intGte(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a_low,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
	}
	static complement(a) {
		let this1 = new haxe__$Int64__$_$_$Int64(~a.high,~a.low);
		return this1;
	}
	static and(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
		return this1;
	}
	static or(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a.high | b.high,a.low | b.low);
		return this1;
	}
	static xor(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a.high ^ b.high,a.low ^ b.low);
		return this1;
	}
	static shl(a,b) {
		b &= 63;
		if(b == 0) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			return this1;
		} else if(b < 32) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
			return this1;
		} else {
			let this1 = new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
			return this1;
		}
	}
	static shr(a,b) {
		b &= 63;
		if(b == 0) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			return this1;
		} else if(b < 32) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high >> b,a.high << 32 - b | a.low >>> b);
			return this1;
		} else {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high >> 31,a.high >> b - 32);
			return this1;
		}
	}
	static ushr(a,b) {
		b &= 63;
		if(b == 0) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			return this1;
		} else if(b < 32) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
			return this1;
		} else {
			let this1 = new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
			return this1;
		}
	}
	static get_high(this1) {
		return this1.high;
	}
	static set_high(this1,x) {
		return this1.high = x;
	}
	static get_low(this1) {
		return this1.low;
	}
	static set_low(this1,x) {
		return this1.low = x;
	}
}
haxe_Int64.__properties__ = {get_low: "get_low",get_high: "get_high"};
class haxe__$Int64__$_$_$Int64 {
	constructor(high,low) {
		this.high = high;
		this.low = low;
	}
	toString() {
		return haxe_Int64.toString(this);
	}
}
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
Object.assign(haxe__$Int64__$_$_$Int64.prototype, {
	__class__: haxe__$Int64__$_$_$Int64
	,high: null
	,low: null
});
class haxe_Int64Helper {
	static parseString(sParam) {
		let base_high = 0;
		let base_low = 10;
		let this1 = new haxe__$Int64__$_$_$Int64(0,0);
		let current = this1;
		let this2 = new haxe__$Int64__$_$_$Int64(0,1);
		let multiplier = this2;
		let sIsNegative = false;
		let s = StringTools.trim(sParam);
		if(s.charAt(0) == "-") {
			sIsNegative = true;
			s = s.substring(1,s.length);
		}
		let len = s.length;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			let digitInt = HxOverrides.cca(s,len - 1 - i) - 48;
			if(digitInt < 0 || digitInt > 9) {
				throw haxe_Exception.thrown("NumberFormatError");
			}
			if(digitInt != 0) {
				let digit_high = digitInt >> 31;
				let digit_low = digitInt;
				if(sIsNegative) {
					let mask = 65535;
					let al = multiplier.low & mask;
					let ah = multiplier.low >>> 16;
					let bl = digit_low & mask;
					let bh = digit_low >>> 16;
					let p00 = haxe_Int32._mul(al,bl);
					let p10 = haxe_Int32._mul(ah,bl);
					let p01 = haxe_Int32._mul(al,bh);
					let p11 = haxe_Int32._mul(ah,bh);
					let low = p00;
					let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
					p01 <<= 16;
					low = low + p01 | 0;
					if(haxe_Int32.ucompare(low,p01) < 0) {
						let ret = high++;
						high = high | 0;
					}
					p10 <<= 16;
					low = low + p10 | 0;
					if(haxe_Int32.ucompare(low,p10) < 0) {
						let ret = high++;
						high = high | 0;
					}
					high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
					let b_high = high;
					let b_low = low;
					let high1 = current.high - b_high | 0;
					let low1 = current.low - b_low | 0;
					if(haxe_Int32.ucompare(current.low,b_low) < 0) {
						let ret = high1--;
						high1 = high1 | 0;
					}
					let this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
					current = this1;
					if(!(current.high < 0)) {
						throw haxe_Exception.thrown("NumberFormatError: Underflow");
					}
				} else {
					let mask = 65535;
					let al = multiplier.low & mask;
					let ah = multiplier.low >>> 16;
					let bl = digit_low & mask;
					let bh = digit_low >>> 16;
					let p00 = haxe_Int32._mul(al,bl);
					let p10 = haxe_Int32._mul(ah,bl);
					let p01 = haxe_Int32._mul(al,bh);
					let p11 = haxe_Int32._mul(ah,bh);
					let low = p00;
					let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
					p01 <<= 16;
					low = low + p01 | 0;
					if(haxe_Int32.ucompare(low,p01) < 0) {
						let ret = high++;
						high = high | 0;
					}
					p10 <<= 16;
					low = low + p10 | 0;
					if(haxe_Int32.ucompare(low,p10) < 0) {
						let ret = high++;
						high = high | 0;
					}
					high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
					let b_high = high;
					let b_low = low;
					let high1 = current.high + b_high | 0;
					let low1 = current.low + b_low | 0;
					if(haxe_Int32.ucompare(low1,current.low) < 0) {
						let ret = high1++;
						high1 = high1 | 0;
					}
					let this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
					current = this1;
					if(current.high < 0) {
						throw haxe_Exception.thrown("NumberFormatError: Overflow");
					}
				}
			}
			let mask = 65535;
			let al = multiplier.low & mask;
			let ah = multiplier.low >>> 16;
			let bl = base_low & mask;
			let bh = base_low >>> 16;
			let p00 = haxe_Int32._mul(al,bl);
			let p10 = haxe_Int32._mul(ah,bl);
			let p01 = haxe_Int32._mul(al,bh);
			let p11 = haxe_Int32._mul(ah,bh);
			let low = p00;
			let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
			p01 <<= 16;
			low = low + p01 | 0;
			if(haxe_Int32.ucompare(low,p01) < 0) {
				let ret = high++;
				high = high | 0;
			}
			p10 <<= 16;
			low = low + p10 | 0;
			if(haxe_Int32.ucompare(low,p10) < 0) {
				let ret = high++;
				high = high | 0;
			}
			high = high + (haxe_Int32._mul(multiplier.low,base_high) + haxe_Int32._mul(multiplier.high,base_low) | 0) | 0;
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			multiplier = this1;
		}
		return current;
	}
	static fromFloat(f) {
		if(isNaN(f) || !isFinite(f)) {
			throw haxe_Exception.thrown("Number is NaN or Infinite");
		}
		let noFractions = f - f % 1;
		if(noFractions > 9007199254740991) {
			throw haxe_Exception.thrown("Conversion overflow");
		}
		if(noFractions < -9007199254740991) {
			throw haxe_Exception.thrown("Conversion underflow");
		}
		let this1 = new haxe__$Int64__$_$_$Int64(0,0);
		let result = this1;
		let neg = noFractions < 0;
		let rest = neg ? -noFractions : noFractions;
		let i = 0;
		while(rest >= 1) {
			let curr = rest % 2;
			rest /= 2;
			if(curr >= 1) {
				let a_high = 0;
				let a_low = 1;
				let b = i;
				b &= 63;
				let b1;
				if(b == 0) {
					let this1 = new haxe__$Int64__$_$_$Int64(a_high,a_low);
					b1 = this1;
				} else if(b < 32) {
					let this1 = new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b);
					b1 = this1;
				} else {
					let this1 = new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
					b1 = this1;
				}
				let high = result.high + b1.high | 0;
				let low = result.low + b1.low | 0;
				if(haxe_Int32.ucompare(low,result.low) < 0) {
					let ret = high++;
					high = high | 0;
				}
				let this1 = new haxe__$Int64__$_$_$Int64(high,low);
				result = this1;
			}
			++i;
		}
		if(neg) {
			let high = ~result.high;
			let low = ~result.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			result = this1;
		}
		return result;
	}
}
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
class haxe_Json {
	static parse(text) {
		return new haxe_format_JsonParser(text).doParse();
	}
	static stringify(value,replacer,space) {
		return haxe_format_JsonPrinter.print(value,replacer,space);
	}
}
$hxClasses["haxe.Json"] = haxe_Json;
haxe_Json.__name__ = "haxe.Json";
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				str += ", " + Std.string(v);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
class haxe_NativeStackTrace {
	static saveStack(e) {
		haxe_NativeStackTrace.lastError = e;
	}
	static callStack() {
		let e = new Error("");
		let stack = haxe_NativeStackTrace.tryHaxeStack(e);
		if(typeof(stack) == "undefined") {
			try {
				throw e;
			} catch( _g ) {
			}
			stack = e.stack;
		}
		return haxe_NativeStackTrace.normalize(stack,2);
	}
	static exceptionStack() {
		return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
	}
	static toHaxe(s,skip) {
		if(skip == null) {
			skip = 0;
		}
		if(s == null) {
			return [];
		} else if(typeof(s) == "string") {
			let stack = s.split("\n");
			if(stack[0] == "Error") {
				stack.shift();
			}
			let m = [];
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) {
				let i = _g++;
				if(skip > i) {
					continue;
				}
				let line = stack[i];
				let matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
				if(matched != null) {
					let path = matched[1].split(".");
					if(path[0] == "$hxClasses") {
						path.shift();
					}
					let meth = path.pop();
					let file = matched[2];
					let line = Std.parseInt(matched[3]);
					let column = Std.parseInt(matched[4]);
					m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line,column));
				} else {
					m.push(haxe_StackItem.Module(StringTools.trim(line)));
				}
			}
			return m;
		} else if(skip > 0 && Array.isArray(s)) {
			return s.slice(skip);
		} else {
			return s;
		}
	}
	static tryHaxeStack(e) {
		if(e == null) {
			return [];
		}
		let oldValue = Error.prepareStackTrace;
		Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
		let stack = e.stack;
		Error.prepareStackTrace = oldValue;
		return stack;
	}
	static prepareHxStackTrace(e,callsites) {
		let stack = [];
		let _g = 0;
		while(_g < callsites.length) {
			let site = callsites[_g];
			++_g;
			if(haxe_NativeStackTrace.wrapCallSite != null) {
				site = haxe_NativeStackTrace.wrapCallSite(site);
			}
			let method = null;
			let fullName = site.getFunctionName();
			if(fullName != null) {
				let idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					let className = fullName.substring(0,idx);
					let methodName = fullName.substring(idx + 1);
					method = haxe_StackItem.Method(className,methodName);
				} else {
					method = haxe_StackItem.Method(null,fullName);
				}
			}
			let fileName = site.getFileName();
			let fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
				fileName = fileName.substring(fileAddr + 6);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	}
	static normalize(stack,skipItems) {
		if(skipItems == null) {
			skipItems = 0;
		}
		if(Array.isArray(stack) && skipItems > 0) {
			return stack.slice(skipItems);
		} else if(typeof(stack) == "string") {
			switch(stack.substring(0,6)) {
			case "Error\n":case "Error:":
				++skipItems;
				break;
			default:
			}
			return haxe_NativeStackTrace.skipLines(stack,skipItems);
		} else {
			return stack;
		}
	}
	static skipLines(stack,skip,pos) {
		if(pos == null) {
			pos = 0;
		}
		if(skip > 0) {
			pos = stack.indexOf("\n",pos);
			if(pos < 0) {
				return "";
			} else {
				return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
			}
		} else {
			return stack.substring(pos);
		}
	}
}
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
class haxe_Serializer {
	constructor() {
		this.buf = new StringBuf();
		this.cache = [];
		this.useCache = haxe_Serializer.USE_CACHE;
		this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
		this.shash = new haxe_ds_StringMap();
		this.scount = 0;
	}
	toString() {
		return this.buf.b;
	}
	serializeString(s) {
		let x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	serializeRef(v) {
		let vt = typeof(v);
		let _g = 0;
		let _g1 = this.cache.length;
		while(_g < _g1) {
			let i = _g++;
			let ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	serializeFields(v) {
		let _g = 0;
		let _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	serialize(v) {
		let _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			let v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			let v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				let className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			let c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				let ucount = 0;
				this.buf.b += "a";
				let l = v["length"];
				let _g1 = 0;
				let _g2 = l;
				while(_g1 < _g2) {
					let i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				let d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				let v3 = v;
				let k = v3.keys();
				while(k.hasNext()) {
					let k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				let v4 = v;
				let _g_head = v4.h;
				while(_g_head != null) {
					let val = _g_head.item;
					_g_head = _g_head.next;
					let i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				let v5 = v;
				let k1 = v5.keys();
				while(k1.hasNext()) {
					let k = k1.next();
					let id = Reflect.field(k,"__id__");
					Reflect.deleteField(k,"__id__");
					this.serialize(k);
					k["__id__"] = id;
					this.serialize(v5.h[k.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				let v6 = v;
				let k2 = haxe_ds_StringMap.keysIterator(v6.h);
				while(k2.hasNext()) {
					let k = k2.next();
					this.serializeString(k);
					this.serialize(v6.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				let v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				let i = 0;
				let max = v7.length - 2;
				let b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					let this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					let _g = 0;
					let _g1 = haxe_Serializer.BASE64.length;
					while(_g < _g1) {
						let i = _g++;
						b64[i] = HxOverrides.cca(haxe_Serializer.BASE64,i);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					let b1 = v7.b[i++];
					let b2 = v7.b[i++];
					let b3 = v7.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					let b1 = v7.b[i++];
					let b2 = v7.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					let b1 = v7.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			let e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				let e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]);
			}
			this.buf.b += ":";
			let params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			let _g3 = 0;
			while(_g3 < params.length) {
				let p = params[_g3];
				++_g3;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	serializeException(e) {
		this.buf.b += "x";
		this.serialize(e);
	}
	static run(v) {
		let s = new haxe_Serializer();
		s.serialize(v);
		return s.toString();
	}
}
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
Object.assign(haxe_Serializer.prototype, {
	__class__: haxe_Serializer
	,buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
});
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
	static measure(f,pos) {
		let hrtime = process.hrtime();
		let t0 = hrtime[0] + hrtime[1] / 1e9;
		let r = f();
		let tmp = haxe_Log.trace;
		let hrtime1 = process.hrtime();
		tmp(hrtime1[0] + hrtime1[1] / 1e9 - t0 + "s",pos);
		return r;
	}
	static stamp() {
		let hrtime = process.hrtime();
		return hrtime[0] + hrtime[1] / 1e9;
	}
}
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
	,id: null
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
		this.__skipStack++;
	}
	unwrap() {
		return this.value;
	}
}
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
	,value: null
});
class haxe_crypto_Sha256 {
	constructor() {
	}
	doEncode(m,l) {
		let K = [1116352408,1899447441,-1245643825,-373957723,961987163,1508970993,-1841331548,-1424204075,-670586216,310598401,607225278,1426881987,1925078388,-2132889090,-1680079193,-1046744716,-459576895,-272742522,264347078,604807628,770255983,1249150122,1555081692,1996064986,-1740746414,-1473132947,-1341970488,-1084653625,-958395405,-710438585,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,-2117940946,-1838011259,-1564481375,-1474664885,-1035236496,-949202525,-778901479,-694614492,-200395387,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,-2067236844,-1933114872,-1866530822,-1538233109,-1090935817,-965641998];
		let HASH = [1779033703,-1150833019,1013904242,-1521486534,1359893119,-1694144372,528734635,1541459225];
		let W = [];
		W[64] = 0;
		let a;
		let b;
		let c;
		let d;
		let e;
		let f;
		let g;
		let h;
		let T1;
		let T2;
		m[l >> 5] |= 128 << 24 - l % 32;
		m[(l + 64 >> 9 << 4) + 15] = l;
		let i = 0;
		while(i < m.length) {
			a = HASH[0];
			b = HASH[1];
			c = HASH[2];
			d = HASH[3];
			e = HASH[4];
			f = HASH[5];
			g = HASH[6];
			h = HASH[7];
			let _g = 0;
			while(_g < 64) {
				let j = _g++;
				if(j < 16) {
					W[j] = m[j + i];
				} else {
					let x = W[j - 2];
					let x1 = (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
					let y = W[j - 7];
					let lsw = (x1 & 65535) + (y & 65535);
					let msw = (x1 >> 16) + (y >> 16) + (lsw >> 16);
					let x2 = msw << 16 | lsw & 65535;
					let x3 = W[j - 15];
					let y1 = (x3 >>> 7 | x3 << 25) ^ (x3 >>> 18 | x3 << 14) ^ x3 >>> 3;
					let lsw1 = (x2 & 65535) + (y1 & 65535);
					let msw1 = (x2 >> 16) + (y1 >> 16) + (lsw1 >> 16);
					let x4 = msw1 << 16 | lsw1 & 65535;
					let y2 = W[j - 16];
					let lsw2 = (x4 & 65535) + (y2 & 65535);
					let msw2 = (x4 >> 16) + (y2 >> 16) + (lsw2 >> 16);
					W[j] = msw2 << 16 | lsw2 & 65535;
				}
				let y = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
				let lsw = (h & 65535) + (y & 65535);
				let msw = (h >> 16) + (y >> 16) + (lsw >> 16);
				let x = msw << 16 | lsw & 65535;
				let y1 = e & f ^ ~e & g;
				let lsw1 = (x & 65535) + (y1 & 65535);
				let msw1 = (x >> 16) + (y1 >> 16) + (lsw1 >> 16);
				let x1 = msw1 << 16 | lsw1 & 65535;
				let y2 = K[j];
				let lsw2 = (x1 & 65535) + (y2 & 65535);
				let msw2 = (x1 >> 16) + (y2 >> 16) + (lsw2 >> 16);
				let x2 = msw2 << 16 | lsw2 & 65535;
				let y3 = W[j];
				let lsw3 = (x2 & 65535) + (y3 & 65535);
				let msw3 = (x2 >> 16) + (y3 >> 16) + (lsw3 >> 16);
				T1 = msw3 << 16 | lsw3 & 65535;
				let x3 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);
				let y4 = a & b ^ a & c ^ b & c;
				let lsw4 = (x3 & 65535) + (y4 & 65535);
				let msw4 = (x3 >> 16) + (y4 >> 16) + (lsw4 >> 16);
				T2 = msw4 << 16 | lsw4 & 65535;
				h = g;
				g = f;
				f = e;
				let lsw5 = (d & 65535) + (T1 & 65535);
				let msw5 = (d >> 16) + (T1 >> 16) + (lsw5 >> 16);
				e = msw5 << 16 | lsw5 & 65535;
				d = c;
				c = b;
				b = a;
				let lsw6 = (T1 & 65535) + (T2 & 65535);
				let msw6 = (T1 >> 16) + (T2 >> 16) + (lsw6 >> 16);
				a = msw6 << 16 | lsw6 & 65535;
			}
			let y = HASH[0];
			let lsw = (a & 65535) + (y & 65535);
			let msw = (a >> 16) + (y >> 16) + (lsw >> 16);
			HASH[0] = msw << 16 | lsw & 65535;
			let y1 = HASH[1];
			let lsw1 = (b & 65535) + (y1 & 65535);
			let msw1 = (b >> 16) + (y1 >> 16) + (lsw1 >> 16);
			HASH[1] = msw1 << 16 | lsw1 & 65535;
			let y2 = HASH[2];
			let lsw2 = (c & 65535) + (y2 & 65535);
			let msw2 = (c >> 16) + (y2 >> 16) + (lsw2 >> 16);
			HASH[2] = msw2 << 16 | lsw2 & 65535;
			let y3 = HASH[3];
			let lsw3 = (d & 65535) + (y3 & 65535);
			let msw3 = (d >> 16) + (y3 >> 16) + (lsw3 >> 16);
			HASH[3] = msw3 << 16 | lsw3 & 65535;
			let y4 = HASH[4];
			let lsw4 = (e & 65535) + (y4 & 65535);
			let msw4 = (e >> 16) + (y4 >> 16) + (lsw4 >> 16);
			HASH[4] = msw4 << 16 | lsw4 & 65535;
			let y5 = HASH[5];
			let lsw5 = (f & 65535) + (y5 & 65535);
			let msw5 = (f >> 16) + (y5 >> 16) + (lsw5 >> 16);
			HASH[5] = msw5 << 16 | lsw5 & 65535;
			let y6 = HASH[6];
			let lsw6 = (g & 65535) + (y6 & 65535);
			let msw6 = (g >> 16) + (y6 >> 16) + (lsw6 >> 16);
			HASH[6] = msw6 << 16 | lsw6 & 65535;
			let y7 = HASH[7];
			let lsw7 = (h & 65535) + (y7 & 65535);
			let msw7 = (h >> 16) + (y7 >> 16) + (lsw7 >> 16);
			HASH[7] = msw7 << 16 | lsw7 & 65535;
			i += 16;
		}
		return HASH;
	}
	hex(a) {
		let str = "";
		let _g = 0;
		while(_g < a.length) {
			let num = a[_g];
			++_g;
			str += StringTools.hex(num,8);
		}
		return str.toLowerCase();
	}
	static encode(s) {
		let sh = new haxe_crypto_Sha256();
		let h = sh.doEncode(haxe_crypto_Sha256.str2blks(s),s.length * 8);
		return sh.hex(h);
	}
	static make(b) {
		let h = new haxe_crypto_Sha256().doEncode(haxe_crypto_Sha256.bytes2blks(b),b.length * 8);
		let out = new haxe_io_Bytes(new ArrayBuffer(32));
		let p = 0;
		let _g = 0;
		while(_g < 8) {
			let i = _g++;
			out.b[p++] = h[i] >>> 24;
			out.b[p++] = h[i] >> 16 & 255;
			out.b[p++] = h[i] >> 8 & 255;
			out.b[p++] = h[i] & 255;
		}
		return out;
	}
	static str2blks(s) {
		let s1 = haxe_io_Bytes.ofString(s);
		let nblk = (s1.length + 8 >> 6) + 1;
		let blks = [];
		let _g = 0;
		let _g1 = nblk * 16;
		while(_g < _g1) {
			let i = _g++;
			blks[i] = 0;
		}
		let _g2 = 0;
		let _g3 = s1.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let p = i >> 2;
			blks[p] |= s1.b[i] << 24 - ((i & 3) << 3);
		}
		let i = s1.length;
		let p = i >> 2;
		blks[p] |= 128 << 24 - ((i & 3) << 3);
		blks[nblk * 16 - 1] = s1.length * 8;
		return blks;
	}
	static bytes2blks(b) {
		let nblk = (b.length + 8 >> 6) + 1;
		let blks = [];
		let _g = 0;
		let _g1 = nblk * 16;
		while(_g < _g1) {
			let i = _g++;
			blks[i] = 0;
		}
		let _g2 = 0;
		let _g3 = b.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let p = i >> 2;
			blks[p] |= b.b[i] << 24 - ((i & 3) << 3);
		}
		let i = b.length;
		let p = i >> 2;
		blks[p] |= 128 << 24 - ((i & 3) << 3);
		blks[nblk * 16 - 1] = b.length * 8;
		return blks;
	}
}
$hxClasses["haxe.crypto.Sha256"] = haxe_crypto_Sha256;
haxe_crypto_Sha256.__name__ = "haxe.crypto.Sha256";
Object.assign(haxe_crypto_Sha256.prototype, {
	__class__: haxe_crypto_Sha256
});
class haxe_ds_BalancedTree {
	constructor() {
	}
	set(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	get(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	remove(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	exists(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	iterator() {
		let ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	keys() {
		let ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	copy() {
		let copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	setLoop(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		let c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			let nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			let nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	removeLoop(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		let c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	keysLoop(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	merge(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		let t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	minBinding(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	removeMinBinding(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	balance(l,k,v,r) {
		let hl = l == null ? 0 : l._height;
		let hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			let _this = l.left;
			let _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			let _this = r.right;
			let _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	compare(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	toString() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	clear() {
		this.root = null;
	}
	static iteratorLoop(node,acc) {
		if(node != null) {
			haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
			acc.push(node.value);
			haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
		}
	}
}
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_BalancedTree.prototype, {
	__class__: haxe_ds_BalancedTree
	,root: null
});
class haxe_ds_TreeNode {
	constructor(l,k,v,r,h) {
		if(h == null) {
			h = -1;
		}
		this.left = l;
		this.key = k;
		this.value = v;
		this.right = r;
		if(h == -1) {
			let tmp;
			let _this = this.left;
			let _this1 = this.right;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				let _this = this.left;
				tmp = _this == null ? 0 : _this._height;
			} else {
				let _this = this.right;
				tmp = _this == null ? 0 : _this._height;
			}
			this._height = tmp + 1;
		} else {
			this._height = h;
		}
	}
	toString() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
}
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
Object.assign(haxe_ds_TreeNode.prototype, {
	__class__: haxe_ds_TreeNode
	,left: null
	,right: null
	,key: null
	,value: null
	,_height: null
});
class haxe_ds_EnumValueMap extends haxe_ds_BalancedTree {
	constructor() {
		super();
	}
	compare(k1,k2) {
		let d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		let p1 = Type.enumParameters(k1);
		let p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	compareArgs(a1,a2) {
		let ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		let _g = 0;
		let _g1 = a1.length;
		while(_g < _g1) {
			let i = _g++;
			let d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	compareArg(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	copy() {
		let copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
}
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
Object.assign(haxe_ds_EnumValueMap.prototype, {
	__class__: haxe_ds_EnumValueMap
});
class haxe_ds_GenericCell {
	constructor(elt,next) {
		this.elt = elt;
		this.next = next;
	}
}
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
Object.assign(haxe_ds_GenericCell.prototype, {
	__class__: haxe_ds_GenericCell
	,elt: null
	,next: null
});
class haxe_ds_GenericStack {
	constructor() {
	}
	add(item) {
		this.head = new haxe_ds_GenericCell(item,this.head);
	}
	first() {
		if(this.head == null) {
			return null;
		} else {
			return this.head.elt;
		}
	}
	pop() {
		let k = this.head;
		if(k == null) {
			return null;
		} else {
			this.head = k.next;
			return k.elt;
		}
	}
	isEmpty() {
		return this.head == null;
	}
	remove(v) {
		let prev = null;
		let l = this.head;
		while(l != null) {
			if(l.elt == v) {
				if(prev == null) {
					this.head = l.next;
				} else {
					prev.next = l.next;
				}
				break;
			}
			prev = l;
			l = l.next;
		}
		return l != null;
	}
	iterator() {
		let l = this.head;
		return { hasNext : function() {
			return l != null;
		}, next : function() {
			let k = l;
			l = k.next;
			return k.elt;
		}};
	}
	toString() {
		let a = [];
		let l = this.head;
		while(l != null) {
			a.push(l.elt);
			l = l.next;
		}
		return "{" + a.join(",") + "}";
	}
}
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
Object.assign(haxe_ds_GenericStack.prototype, {
	__class__: haxe_ds_GenericStack
	,head: null
});
class haxe_ds_HashMap {
	static _new() {
		let this1 = new haxe_ds__$HashMap_HashMapData();
		return this1;
	}
	static set(this1,k,v) {
		let _this = this1.keys;
		let key = k.hashCode();
		_this.h[key] = k;
		let _this1 = this1.values;
		let key1 = k.hashCode();
		_this1.h[key1] = v;
	}
	static get(this1,k) {
		let _this = this1.values;
		let key = k.hashCode();
		return _this.h[key];
	}
	static exists(this1,k) {
		let _this = this1.values;
		let key = k.hashCode();
		return _this.h.hasOwnProperty(key);
	}
	static remove(this1,k) {
		this1.values.remove(k.hashCode());
		return this1.keys.remove(k.hashCode());
	}
	static keys(this1) {
		return this1.keys.iterator();
	}
	static copy(this1) {
		let copied = new haxe_ds__$HashMap_HashMapData();
		copied.keys = this1.keys.copy();
		copied.values = this1.values.copy();
		return copied;
	}
	static iterator(this1) {
		return this1.values.iterator();
	}
	static keyValueIterator(this1) {
		return new haxe_iterators_HashMapKeyValueIterator(this1);
	}
	static clear(this1) {
		this1.keys.h = { };
		this1.values.h = { };
	}
}
class haxe_ds__$HashMap_HashMapData {
	constructor() {
		this.keys = new haxe_ds_IntMap();
		this.values = new haxe_ds_IntMap();
	}
}
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = "haxe.ds._HashMap.HashMapData";
Object.assign(haxe_ds__$HashMap_HashMapData.prototype, {
	__class__: haxe_ds__$HashMap_HashMapData
	,keys: null
	,values: null
});
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	set(key,value) {
		this.h[key] = value;
	}
	get(key) {
		return this.h[key];
	}
	exists(key) {
		return this.h.hasOwnProperty(key);
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	copy() {
		let copied = new haxe_ds_IntMap();
		let key = this.keys();
		while(key.hasNext()) {
			let key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	toString() {
		let s_b = "";
		s_b += "{";
		let it = this.keys();
		let i = it;
		while(i.hasNext()) {
			let i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	clear() {
		this.h = { };
	}
}
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
	,h: null
});
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		let x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		let x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	first() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	last() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	pop() {
		if(this.h == null) {
			return null;
		}
		let x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	isEmpty() {
		return this.h == null;
	}
	clear() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	remove(v) {
		let prev = null;
		let l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	iterator() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	keyValueIterator() {
		return new haxe_ds__$List_ListKeyValueIterator(this.h);
	}
	toString() {
		let s_b = "";
		let first = true;
		let l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	join(sep) {
		let s_b = "";
		let first = true;
		let l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	filter(f) {
		let l2 = new haxe_ds_List();
		let l = this.h;
		while(l != null) {
			let v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	map(f) {
		let b = new haxe_ds_List();
		let l = this.h;
		while(l != null) {
			let v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
}
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
	,h: null
	,q: null
	,length: null
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
	,item: null
	,next: null
});
class haxe_ds__$List_ListIterator {
	constructor(head) {
		this.head = head;
	}
	hasNext() {
		return this.head != null;
	}
	next() {
		let val = this.head.item;
		this.head = this.head.next;
		return val;
	}
}
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
Object.assign(haxe_ds__$List_ListIterator.prototype, {
	__class__: haxe_ds__$List_ListIterator
	,head: null
});
class haxe_ds__$List_ListKeyValueIterator {
	constructor(head) {
		this.head = head;
		this.idx = 0;
	}
	hasNext() {
		return this.head != null;
	}
	next() {
		let val = this.head.item;
		this.head = this.head.next;
		return { value : val, key : this.idx++};
	}
}
$hxClasses["haxe.ds._List.ListKeyValueIterator"] = haxe_ds__$List_ListKeyValueIterator;
haxe_ds__$List_ListKeyValueIterator.__name__ = "haxe.ds._List.ListKeyValueIterator";
Object.assign(haxe_ds__$List_ListKeyValueIterator.prototype, {
	__class__: haxe_ds__$List_ListKeyValueIterator
	,idx: null
	,head: null
});
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		let id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	exists(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	remove(key) {
		let id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	copy() {
		let copied = new haxe_ds_ObjectMap();
		let key = this.keys();
		while(key.hasNext()) {
			let key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	toString() {
		let s_b = "";
		s_b += "{";
		let it = this.keys();
		let i = it;
		while(i.hasNext()) {
			let i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	clear() {
		this.h = { __keys__ : { }};
	}
	static assignId(obj) {
		return (obj.__id__ = $global.$haxeUID++);
	}
	static getId(obj) {
		return obj.__id__;
	}
}
haxe_ds_ObjectMap.count = null;
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
	,h: null
});
class haxe_ds_ReadOnlyArray {
	static get_length(this1) {
		return this1.length;
	}
	static get(this1,i) {
		return this1[i];
	}
}
haxe_ds_ReadOnlyArray.__properties__ = {get_length: "get_length"};
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	exists(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	get(key) {
		return this.h[key];
	}
	set(key,value) {
		this.h[key] = value;
	}
	remove(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	keys() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	iterator() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	keyValueIterator() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	copy() {
		return haxe_ds_StringMap.createCopy(this.h);
	}
	clear() {
		this.h = Object.create(null);
	}
	toString() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	static keysIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return keys[idx - 1];
		}};
	}
	static valueIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return h[keys[idx - 1]];
		}};
	}
	static kvIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			let k = keys[idx - 1];
			return { key : k, value : h[k]};
		}};
	}
	static createCopy(h) {
		let copy = new haxe_ds_StringMap();
		for (var key in h) copy.h[key] = h[key];
		return copy;
	}
	static stringify(h) {
		let s = "{";
		let first = true;
		for (var key in h) {
			if (first) first = false; else s += ',';
			s += key + ' => ' + Std.string(h[key]);
		}
		return s + "}";
	}
}
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
	,h: null
});
class haxe_ds_Vector {
	static _new(length) {
		let this1 = new Array(length);
		return this1;
	}
	static get(this1,index) {
		return this1[index];
	}
	static set(this1,index,val) {
		return this1[index] = val;
	}
	static get_length(this1) {
		return this1.length;
	}
	static blit(src,srcPos,dest,destPos,len) {
		if(src == dest) {
			if(srcPos < destPos) {
				let i = srcPos + len;
				let j = destPos + len;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let k = _g++;
					--i;
					--j;
					src[j] = src[i];
				}
			} else if(srcPos > destPos) {
				let i = srcPos;
				let j = destPos;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let k = _g++;
					src[j] = src[i];
					++i;
					++j;
				}
			}
		} else {
			let _g = 0;
			let _g1 = len;
			while(_g < _g1) {
				let i = _g++;
				dest[destPos + i] = src[srcPos + i];
			}
		}
	}
	static toArray(this1) {
		return this1.slice(0);
	}
	static toData(this1) {
		return this1;
	}
	static fromData(data) {
		return data;
	}
	static fromArrayCopy(array) {
		return array.slice(0);
	}
	static copy(this1) {
		let this2 = new Array(this1.length);
		let r = this2;
		haxe_ds_Vector.blit(this1,0,r,0,this1.length);
		return r;
	}
	static join(this1,sep) {
		let b_b = "";
		let len = this1.length;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			b_b += Std.string(Std.string(this1[i]));
			if(i < len - 1) {
				b_b += sep == null ? "null" : "" + sep;
			}
		}
		return b_b;
	}
	static map(this1,f) {
		let length = this1.length;
		let this2 = new Array(length);
		let r = this2;
		let len = length;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			let v = f(this1[i]);
			r[i] = v;
		}
		return r;
	}
	static sort(this1,f) {
		this1.sort(f);
	}
}
haxe_ds_Vector.__properties__ = {get_length: "get_length"};
class haxe_ds_WeakMap {
	constructor() {
		throw haxe_Exception.thrown("Not implemented for this platform");
	}
	set(key,value) {
	}
	get(key) {
		return null;
	}
	exists(key) {
		return false;
	}
	remove(key) {
		return false;
	}
	keys() {
		return null;
	}
	iterator() {
		return null;
	}
	keyValueIterator() {
		return null;
	}
	copy() {
		return null;
	}
	toString() {
		return null;
	}
	clear() {
	}
}
$hxClasses["haxe.ds.WeakMap"] = haxe_ds_WeakMap;
haxe_ds_WeakMap.__name__ = "haxe.ds.WeakMap";
haxe_ds_WeakMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_WeakMap.prototype, {
	__class__: haxe_ds_WeakMap
});
class haxe_format_JsonParser {
	constructor(str) {
		this.str = str;
		this.pos = 0;
	}
	doParse() {
		let result = this.parseRec();
		let c;
		while(true) {
			c = this.str.charCodeAt(this.pos++);
			let c1 = c;
			if(!(c1 == c1)) {
				break;
			}
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				this.invalidChar();
			}
		}
		return result;
	}
	parseRec() {
		while(true) {
			let c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				return this.parseString();
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				let c1 = c;
				let start = this.pos - 1;
				let minus = c1 == 45;
				let digit = !minus;
				let zero = c1 == 48;
				let point = false;
				let e = false;
				let pm = false;
				let end = false;
				while(true) {
					c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point || e) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				let f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
				let i = f | 0;
				if(i == f) {
					return i;
				} else {
					return f;
				}
				break;
			case 91:
				let arr = [];
				let comma = null;
				while(true) {
					let c = this.str.charCodeAt(this.pos++);
					switch(c) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						if(comma == false) {
							this.invalidChar();
						}
						return arr;
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				let save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				let save1 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				let save2 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				let obj = { };
				let field = null;
				let comma1 = null;
				while(true) {
					let c = this.str.charCodeAt(this.pos++);
					switch(c) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(field != null || comma1) {
							this.invalidChar();
						}
						field = this.parseString();
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						obj[field] = this.parseRec();
						field = null;
						comma1 = true;
						break;
					case 125:
						if(field != null || comma1 == false) {
							this.invalidChar();
						}
						return obj;
					default:
						this.invalidChar();
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	parseString() {
		let start = this.pos;
		let buf = null;
		let prev = -1;
		while(true) {
			let c = this.str.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				let s = this.str;
				let len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.str.charCodeAt(this.pos++);
				if(c != 117 && prev != -1) {
					buf.b += String.fromCodePoint(65533);
					prev = -1;
				}
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					let uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					if(prev != -1) {
						if(uc < 56320 || uc > 57343) {
							buf.b += String.fromCodePoint(65533);
							prev = -1;
						} else {
							buf.b += String.fromCodePoint(((prev - 55296 << 10) + (uc - 56320) + 65536));
							prev = -1;
						}
					} else if(uc >= 55296 && uc <= 56319) {
						prev = uc;
					} else {
						buf.b += String.fromCodePoint(uc);
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid escape sequence \\" + String.fromCodePoint(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) {
				throw haxe_Exception.thrown("Unclosed string");
			}
		}
		if(prev != -1) {
			buf.b += String.fromCodePoint(65533);
			prev = -1;
		}
		if(buf == null) {
			return HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			let s = this.str;
			let len = this.pos - start - 1;
			buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
			return buf.b;
		}
	}
	parseNumber(c) {
		let start = this.pos - 1;
		let minus = c == 45;
		let digit = !minus;
		let zero = c == 48;
		let point = false;
		let e = false;
		let pm = false;
		let end = false;
		while(true) {
			c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point || e) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
			if(end) {
				break;
			}
		}
		let f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
		let i = f | 0;
		if(i == f) {
			return i;
		} else {
			return f;
		}
	}
	nextChar() {
		return this.str.charCodeAt(this.pos++);
	}
	invalidChar() {
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	invalidNumber(start) {
		throw haxe_Exception.thrown("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
	static parse(str) {
		return new haxe_format_JsonParser(str).doParse();
	}
}
$hxClasses["haxe.format.JsonParser"] = haxe_format_JsonParser;
haxe_format_JsonParser.__name__ = "haxe.format.JsonParser";
Object.assign(haxe_format_JsonParser.prototype, {
	__class__: haxe_format_JsonParser
	,str: null
	,pos: null
});
class haxe_format_JsonPrinter {
	constructor(replacer,space) {
		this.replacer = replacer;
		this.indent = space;
		this.pretty = space != null;
		this.nind = 0;
		this.buf = new StringBuf();
	}
	ipad() {
		if(this.pretty) {
			let v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
			this.buf.b += Std.string(v);
		}
	}
	newl() {
		if(this.pretty) {
			this.buf.b += String.fromCodePoint(10);
		}
	}
	write(k,v) {
		if(this.replacer != null) {
			v = this.replacer(k,v);
		}
		let _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "null";
			break;
		case 1:
			this.buf.b += Std.string(v);
			break;
		case 2:
			let v1 = isFinite(v) ? Std.string(v) : "null";
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += Std.string(v);
			break;
		case 4:
			this.fieldsString(v,Reflect.fields(v));
			break;
		case 5:
			this.buf.b += "\"<fun>\"";
			break;
		case 6:
			let c = _g.c;
			if(c == String) {
				this.quote(v);
			} else if(c == Array) {
				let v1 = v;
				this.buf.b += String.fromCodePoint(91);
				let len = v1.length;
				let last = len - 1;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let i = _g++;
					if(i > 0) {
						this.buf.b += String.fromCodePoint(44);
					} else {
						this.nind++;
					}
					if(this.pretty) {
						this.buf.b += String.fromCodePoint(10);
					}
					if(this.pretty) {
						let v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
						this.buf.b += Std.string(v);
					}
					this.write(i,v1[i]);
					if(i == last) {
						this.nind--;
						if(this.pretty) {
							this.buf.b += String.fromCodePoint(10);
						}
						if(this.pretty) {
							let v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
							this.buf.b += Std.string(v);
						}
					}
				}
				this.buf.b += String.fromCodePoint(93);
			} else if(c == haxe_ds_StringMap) {
				let v1 = v;
				let o = { };
				let k = haxe_ds_StringMap.keysIterator(v1.h);
				while(k.hasNext()) {
					let k1 = k.next();
					o[k1] = v1.h[k1];
				}
				let v2 = o;
				this.fieldsString(v2,Reflect.fields(v2));
			} else if(c == Date) {
				let v1 = v;
				this.quote(HxOverrides.dateStr(v1));
			} else {
				this.classString(v);
			}
			break;
		case 7:
			let _g1 = _g.e;
			let i = v._hx_index;
			this.buf.b += Std.string(i);
			break;
		case 8:
			this.buf.b += "\"???\"";
			break;
		}
	}
	classString(v) {
		this.fieldsString(v,Type.getInstanceFields(js_Boot.getClass(v)));
	}
	objString(v) {
		this.fieldsString(v,Reflect.fields(v));
	}
	fieldsString(v,fields) {
		this.buf.b += String.fromCodePoint(123);
		let len = fields.length;
		let last = len - 1;
		let first = true;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			let f = fields[i];
			let value = Reflect.field(v,f);
			if(Reflect.isFunction(value)) {
				continue;
			}
			if(first) {
				this.nind++;
				first = false;
			} else {
				this.buf.b += String.fromCodePoint(44);
			}
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				let v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
				this.buf.b += Std.string(v);
			}
			this.quote(f);
			this.buf.b += String.fromCodePoint(58);
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(32);
			}
			this.write(f,value);
			if(i == last) {
				this.nind--;
				if(this.pretty) {
					this.buf.b += String.fromCodePoint(10);
				}
				if(this.pretty) {
					let v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
					this.buf.b += Std.string(v);
				}
			}
		}
		this.buf.b += String.fromCodePoint(125);
	}
	quote(s) {
		this.buf.b += String.fromCodePoint(34);
		let i = 0;
		while(true) {
			let c = s.charCodeAt(i++);
			if(c != c) {
				break;
			}
			switch(c) {
			case 8:
				this.buf.b += "\\b";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			default:
				this.buf.b += String.fromCodePoint(c);
			}
		}
		this.buf.b += String.fromCodePoint(34);
	}
	static print(o,replacer,space) {
		let printer = new haxe_format_JsonPrinter(replacer,space);
		printer.write("",o);
		return printer.buf.b;
	}
}
$hxClasses["haxe.format.JsonPrinter"] = haxe_format_JsonPrinter;
haxe_format_JsonPrinter.__name__ = "haxe.format.JsonPrinter";
Object.assign(haxe_format_JsonPrinter.prototype, {
	__class__: haxe_format_JsonPrinter
	,buf: null
	,replacer: null
	,indent: null
	,pretty: null
	,nind: null
});
class haxe_http_HttpBase {
	constructor(url) {
		if(haxe_http_HttpBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(url);
	}
	_hx_constructor(url) {
		this.url = url;
		this.headers = [];
		this.params = [];
		this.emptyOnData = $bind(this,this.onData);
	}
	setHeader(name,value) {
		let _g = 0;
		let _g1 = this.headers.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.headers[i].name == name) {
				this.headers[i] = { name : name, value : value};
				return;
			}
		}
		this.headers.push({ name : name, value : value});
	}
	addHeader(header,value) {
		this.headers.push({ name : header, value : value});
	}
	setParameter(name,value) {
		let _g = 0;
		let _g1 = this.params.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.params[i].name == name) {
				this.params[i] = { name : name, value : value};
				return;
			}
		}
		this.params.push({ name : name, value : value});
	}
	addParameter(name,value) {
		this.params.push({ name : name, value : value});
	}
	setPostData(data) {
		this.postData = data;
		this.postBytes = null;
	}
	setPostBytes(data) {
		this.postBytes = data;
		this.postData = null;
	}
	request(post) {
		throw haxe_Exception.thrown("not implemented");
	}
	onData(data) {
	}
	onBytes(data) {
	}
	onError(msg) {
	}
	onStatus(status) {
	}
	hasOnData() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	success(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	get_responseData() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
}
$hxClasses["haxe.http.HttpBase"] = haxe_http_HttpBase;
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
Object.assign(haxe_http_HttpBase.prototype, {
	__class__: haxe_http_HttpBase
	,url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
	,__properties__: {get_responseData: "get_responseData"}
});
class haxe_http_HttpJs extends haxe_http_HttpBase {
	constructor(url) {
		haxe_http_HttpBase._hx_skip_constructor = true;
		super();
		haxe_http_HttpBase._hx_skip_constructor = false;
		this._hx_constructor(url);
	}
	_hx_constructor(url) {
		this.async = true;
		this.withCredentials = false;
		super._hx_constructor(url);
	}
	cancel() {
		if(this.req == null) {
			return;
		}
		this.req.abort();
		this.req = null;
	}
	request(post) {
		this.responseAsString = null;
		this.responseBytes = null;
		let r = this.req = js_Browser.createXMLHttpRequest();
		let _gthis = this;
		let onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			let s;
			try {
				s = r.status;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined" && $global.location != null) {
				let protocol = $global.location.protocol.toLowerCase();
				let rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				let isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				let onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					let onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		let uri;
		let _g = this.postBytes;
		let _g1 = this.postData;
		if(_g1 == null) {
			if(_g == null) {
				uri = null;
			} else {
				let bytes = _g;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g == null) {
			let str = _g1;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			let _g = 0;
			let _g1 = this.params;
			while(_g < _g1.length) {
				let p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				let s = p.name;
				let value = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				let s1 = p.value;
				uri = value + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				let question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		let _g2 = 0;
		let _g3 = this.headers;
		while(_g2 < _g3.length) {
			let h = _g3[_g2];
			++_g2;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	static requestUrl(url) {
		let h = new haxe_http_HttpJs(url);
		h.async = false;
		let r = null;
		h.onData = function(d) {
			r = d;
		};
		h.onError = function(e) {
			throw haxe_Exception.thrown(e);
		};
		h.request(false);
		return r;
	}
}
$hxClasses["haxe.http.HttpJs"] = haxe_http_HttpJs;
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
Object.assign(haxe_http_HttpJs.prototype, {
	__class__: haxe_http_HttpJs
	,async: null
	,withCredentials: null
	,req: null
});
class haxe_http_HttpNodeJs extends haxe_http_HttpBase {
	constructor(url) {
		super(url);
	}
	cancel() {
		if(this.req == null) {
			return;
		}
		this.req.abort();
		this.req = null;
	}
	request(post) {
		this.responseAsString = null;
		this.responseBytes = null;
		let parsedUrl = js_node_Url.parse(this.url);
		let _gthis = this;
		let secure = parsedUrl.protocol == "https:";
		let host = parsedUrl.hostname;
		let path = parsedUrl.path;
		let port = parsedUrl.port != null ? Std.parseInt(parsedUrl.port) : secure ? 443 : 80;
		let h = { };
		let _g = 0;
		let _g1 = this.headers;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			let arr = Reflect.field(h,i.name);
			if(arr == null) {
				arr = [];
				h[i.name] = arr;
			}
			arr.push(i.value);
		}
		if(this.postData != null || this.postBytes != null) {
			post = true;
		}
		let uri = null;
		let _g2 = 0;
		let _g3 = this.params;
		while(_g2 < _g3.length) {
			let p = _g3[_g2];
			++_g2;
			if(uri == null) {
				uri = "";
			} else {
				uri += "&";
			}
			let s = p.name;
			let uri1 = encodeURIComponent(s) + "=";
			let s1 = p.value;
			uri += uri1 + encodeURIComponent(s1);
		}
		let question = path.split("?").length <= 1;
		if(uri != null) {
			path += (question ? "?" : "&") + uri;
		}
		let opts = { protocol : parsedUrl.protocol, hostname : host, port : port, method : post ? "POST" : "GET", path : path, headers : h};
		let httpResponse = function(res) {
			res.setEncoding("binary");
			let s = res.statusCode;
			if(s != null) {
				_gthis.onStatus(s);
			}
			let data = [];
			res.on("data",function(chunk) {
				data.push(js_node_buffer_Buffer.from(chunk,"binary"));
			});
			res.on("end",function(_) {
				let buf = data.length == 1 ? data[0] : js_node_buffer_Buffer.concat(data);
				let httpResponse = buf.buffer.slice(buf.byteOffset,buf.byteOffset + buf.byteLength);
				_gthis.responseBytes = haxe_io_Bytes.ofData(httpResponse);
				_gthis.req = null;
				if(s != null && s >= 200 && s < 400) {
					_gthis.success(_gthis.responseBytes);
				} else {
					_gthis.onError("Http Error #" + s);
				}
			});
		};
		this.req = secure ? js_node_Https.request(opts,httpResponse) : js_node_Http.request(opts,httpResponse);
		if(post) {
			if(this.postData != null) {
				this.req.write(this.postData);
			} else if(this.postBytes != null) {
				this.req.setHeader("Content-Length","" + this.postBytes.length);
				this.req.write(js_node_buffer_Buffer.from(this.postBytes.b.bufferValue));
			}
		}
		this.req.end();
	}
}
$hxClasses["haxe.http.HttpNodeJs"] = haxe_http_HttpNodeJs;
haxe_http_HttpNodeJs.__name__ = "haxe.http.HttpNodeJs";
haxe_http_HttpNodeJs.__super__ = haxe_http_HttpBase;
Object.assign(haxe_http_HttpNodeJs.prototype, {
	__class__: haxe_http_HttpNodeJs
	,req: null
});
class haxe_io_ArrayBufferView {
	static _new(size) {
		let this1 = new Uint8Array(size);
		return this1;
	}
	static get_byteOffset(this1) {
		return this1.byteOffset;
	}
	static get_byteLength(this1) {
		return this1.byteLength;
	}
	static get_buffer(this1) {
		return haxe_io_Bytes.ofData(this1.buffer);
	}
	static sub(this1,begin,length) {
		return new Uint8Array(this1.buffer.slice(begin,length == null ? null : begin + length));
	}
	static getData(this1) {
		return this1;
	}
	static fromData(a) {
		return a;
	}
}
haxe_io_ArrayBufferView.__properties__ = {get_byteLength: "get_byteLength",get_byteOffset: "get_byteOffset",get_buffer: "get_buffer"};
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	get(pos) {
		return this.b[pos];
	}
	set(pos,v) {
		this.b[pos] = v;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	fill(pos,len,value) {
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			this.b[pos++] = value;
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	compare(other) {
		let b1 = this.b;
		let b2 = other.b;
		let len = this.length < other.length ? this.length : other.length;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	initData() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	getDouble(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	getFloat(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	setDouble(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	setFloat(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	getUInt16(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	setUInt16(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	getInt32(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	setInt32(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	getInt64(pos) {
		let this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	setInt64(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			let debug = pos > 0;
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let c2 = b[i++];
					let code = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let c2 = b[i++];
					let c3 = b[i++];
					let u = (c & 15) << 18 | (c2 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	readString(pos,len) {
		return this.getString(pos,len);
	}
	toString() {
		return this.getString(0,this.length);
	}
	toHex() {
		let s_b = "";
		let chars = [];
		let str = "0123456789abcdef";
		let _g = 0;
		let _g1 = str.length;
		while(_g < _g1) {
			let i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		let _g2 = 0;
		let _g3 = this.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	getData() {
		return this.b.bufferValue;
	}
	static alloc(length) {
		return new haxe_io_Bytes(new ArrayBuffer(length));
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		let hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
	static ofHex(s) {
		if((s.length & 1) != 0) {
			throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
		}
		let a = [];
		let i = 0;
		let len = s.length >> 1;
		while(i < len) {
			let high = s.charCodeAt(i * 2);
			let low = s.charCodeAt(i * 2 + 1);
			high = (high & 15) + ((high & 64) >> 6) * 9;
			low = (low & 15) + ((low & 64) >> 6) * 9;
			a.push((high << 4 | low) & 255);
			++i;
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static fastGet(b,pos) {
		return b.bytes[pos];
	}
}
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
	,length: null
	,b: null
	,data: null
});
class haxe_io_BytesBuffer {
	constructor() {
		this.pos = 0;
		this.size = 0;
	}
	get_length() {
		return this.pos;
	}
	addByte(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	add(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		let sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	addString(v,encoding) {
		this.add(haxe_io_Bytes.ofString(v,encoding));
	}
	addInt32(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	addInt64(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setInt32(this.pos,v.low,true);
		this.view.setInt32(this.pos + 4,v.high,true);
		this.pos += 8;
	}
	addFloat(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	addDouble(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	addBytes(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		let sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	grow(delta) {
		let req = this.pos + delta;
		let nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		let nbuf = new ArrayBuffer(nsize);
		let nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	getBytes() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		let b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
}
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
Object.assign(haxe_io_BytesBuffer.prototype, {
	__class__: haxe_io_BytesBuffer
	,buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,__properties__: {get_length: "get_length"}
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
Object.assign(haxe_io_Eof.prototype, {
	__class__: haxe_io_Eof
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
class haxe_io_FPHelper {
	static _i32ToFloat(i) {
		let sign = 1 - (i >>> 31 << 1);
		let e = i >> 23 & 255;
		if(e == 255) {
			if((i & 8388607) == 0) {
				if(sign > 0) {
					return Infinity;
				} else {
					return -Infinity;
				}
			} else {
				return NaN;
			}
		}
		let m = e == 0 ? (i & 8388607) << 1 : i & 8388607 | 8388608;
		return sign * m * Math.pow(2,e - 150);
	}
	static _i64ToDouble(lo,hi) {
		let sign = 1 - (hi >>> 31 << 1);
		let e = hi >> 20 & 2047;
		if(e == 2047) {
			if(lo == 0 && (hi & 1048575) == 0) {
				if(sign > 0) {
					return Infinity;
				} else {
					return -Infinity;
				}
			} else {
				return NaN;
			}
		}
		let m = 2.220446049250313e-16 * ((hi & 1048575) * 4294967296. + (lo >>> 31) * 2147483648. + (lo & 2147483647));
		if(e == 0) {
			m *= 2.0;
		} else {
			m += 1.0;
		}
		return sign * m * Math.pow(2,e - 1023);
	}
	static _floatToI32(f) {
		if(f == 0) {
			return 0;
		}
		let af = f < 0 ? -f : f;
		let exp = Math.floor(Math.log(af) / 0.6931471805599453);
		if(exp > 127) {
			return 2139095040;
		} else {
			if(exp <= -127) {
				exp = -127;
				af *= 7.1362384635298e+44;
			} else {
				af = (af / Math.pow(2,exp) - 1.0) * 8388608;
			}
			return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | Math.round(af);
		}
	}
	static _doubleToI64(v) {
		let i64 = haxe_io_FPHelper.i64tmp;
		if(v == 0) {
			i64.low = 0;
			i64.high = 0;
		} else if(!isFinite(v)) {
			i64.low = 0;
			i64.high = v > 0 ? 2146435072 : -1048576;
		} else {
			let av = v < 0 ? -v : v;
			let exp = Math.floor(Math.log(av) / 0.6931471805599453);
			if(exp > 1023) {
				i64.low = -1;
				i64.high = 2146435071;
			} else {
				if(exp <= -1023) {
					exp = -1023;
					av /= 2.2250738585072014e-308;
				} else {
					av = av / Math.pow(2,exp) - 1.0;
				}
				let sig = Math.round(av * 4503599627370496.);
				let sig_l = sig | 0;
				let sig_h = sig / 4294967296.0 | 0;
				i64.low = sig_l;
				i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
			}
		}
		return i64;
	}
	static i32ToFloat(i) {
		haxe_io_FPHelper.helper.setInt32(0,i,true);
		return haxe_io_FPHelper.helper.getFloat32(0,true);
	}
	static floatToI32(f) {
		haxe_io_FPHelper.helper.setFloat32(0,f,true);
		return haxe_io_FPHelper.helper.getInt32(0,true);
	}
	static i64ToDouble(low,high) {
		haxe_io_FPHelper.helper.setInt32(0,low,true);
		haxe_io_FPHelper.helper.setInt32(4,high,true);
		return haxe_io_FPHelper.helper.getFloat64(0,true);
	}
	static doubleToI64(v) {
		let i64 = haxe_io_FPHelper.i64tmp;
		haxe_io_FPHelper.helper.setFloat64(0,v,true);
		i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
		i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
		return i64;
	}
}
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
class haxe_io_UInt8Array {
	static _new(elements) {
		let this1 = new Uint8Array(elements);
		return this1;
	}
	static get_length(this1) {
		return this1.length;
	}
	static get_view(this1) {
		return this1;
	}
	static get(this1,index) {
		return this1[index];
	}
	static set(this1,index,value) {
		return this1[index] = value;
	}
	static sub(this1,begin,length) {
		return this1.subarray(begin,length == null ? this1.length : begin + length);
	}
	static subarray(this1,begin,end) {
		return this1.subarray(begin,end);
	}
	static getData(this1) {
		return this1;
	}
	static fromData(d) {
		return d;
	}
	static fromArray(a,pos,length) {
		if(pos == null) {
			pos = 0;
		}
		if(length == null) {
			length = a.length - pos;
		}
		if(pos < 0 || length < 0 || pos + length > a.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(pos == 0 && length == a.length) {
			return new Uint8Array(a);
		}
		let this1 = new Uint8Array(a.length);
		let i = this1;
		let _g = 0;
		let _g1 = length;
		while(_g < _g1) {
			let idx = _g++;
			i[idx] = a[idx + pos];
		}
		return i;
	}
	static fromBytes(bytes,bytePos,length) {
		if(bytePos == null) {
			bytePos = 0;
		}
		if(length == null) {
			length = bytes.length - bytePos;
		}
		return new Uint8Array(bytes.b.bufferValue,bytePos,length);
	}
}
haxe_io_UInt8Array.__properties__ = {get_view: "get_view",get_length: "get_length"};
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
	,array: null
	,current: null
});
class haxe_iterators_ArrayKeyValueIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return { value : this.array[this.current], key : this.current++};
	}
}
$hxClasses["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator;
haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator";
Object.assign(haxe_iterators_ArrayKeyValueIterator.prototype, {
	__class__: haxe_iterators_ArrayKeyValueIterator
	,current: null
	,array: null
});
class haxe_iterators_DynamicAccessIterator {
	constructor(access) {
		this.access = access;
		this.keys = Reflect.fields(access);
		this.index = 0;
	}
	hasNext() {
		return this.index < this.keys.length;
	}
	next() {
		return this.access[this.keys[this.index++]];
	}
}
$hxClasses["haxe.iterators.DynamicAccessIterator"] = haxe_iterators_DynamicAccessIterator;
haxe_iterators_DynamicAccessIterator.__name__ = "haxe.iterators.DynamicAccessIterator";
Object.assign(haxe_iterators_DynamicAccessIterator.prototype, {
	__class__: haxe_iterators_DynamicAccessIterator
	,access: null
	,keys: null
	,index: null
});
class haxe_iterators_DynamicAccessKeyValueIterator {
	constructor(access) {
		this.access = access;
		this.keys = Reflect.fields(access);
		this.index = 0;
	}
	hasNext() {
		return this.index < this.keys.length;
	}
	next() {
		let key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
}
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
Object.assign(haxe_iterators_DynamicAccessKeyValueIterator.prototype, {
	__class__: haxe_iterators_DynamicAccessKeyValueIterator
	,access: null
	,keys: null
	,index: null
});
class haxe_iterators_HashMapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys.iterator();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		let key = this.keys.next();
		let _this = this.map.values;
		let key1 = key.hashCode();
		return { value : _this.h[key1], key : key};
	}
}
$hxClasses["haxe.iterators.HashMapKeyValueIterator"] = haxe_iterators_HashMapKeyValueIterator;
haxe_iterators_HashMapKeyValueIterator.__name__ = "haxe.iterators.HashMapKeyValueIterator";
Object.assign(haxe_iterators_HashMapKeyValueIterator.prototype, {
	__class__: haxe_iterators_HashMapKeyValueIterator
	,map: null
	,keys: null
});
class haxe_iterators_MapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		let key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
}
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
Object.assign(haxe_iterators_MapKeyValueIterator.prototype, {
	__class__: haxe_iterators_MapKeyValueIterator
	,map: null
	,keys: null
});
class haxe_iterators_StringIterator {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		return this.s.charCodeAt(this.offset++);
	}
}
$hxClasses["haxe.iterators.StringIterator"] = haxe_iterators_StringIterator;
haxe_iterators_StringIterator.__name__ = "haxe.iterators.StringIterator";
Object.assign(haxe_iterators_StringIterator.prototype, {
	__class__: haxe_iterators_StringIterator
	,offset: null
	,s: null
});
class haxe_iterators_StringIteratorUnicode {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		let s = this.s;
		let index = this.offset++;
		let c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		let c1 = c;
		if(c1 >= 65536) {
			this.offset++;
		}
		return c1;
	}
	static unicodeIterator(s) {
		return new haxe_iterators_StringIteratorUnicode(s);
	}
}
$hxClasses["haxe.iterators.StringIteratorUnicode"] = haxe_iterators_StringIteratorUnicode;
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
Object.assign(haxe_iterators_StringIteratorUnicode.prototype, {
	__class__: haxe_iterators_StringIteratorUnicode
	,offset: null
	,s: null
});
class haxe_iterators_StringKeyValueIterator {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		return { key : this.offset, value : this.s.charCodeAt(this.offset++)};
	}
}
$hxClasses["haxe.iterators.StringKeyValueIterator"] = haxe_iterators_StringKeyValueIterator;
haxe_iterators_StringKeyValueIterator.__name__ = "haxe.iterators.StringKeyValueIterator";
Object.assign(haxe_iterators_StringKeyValueIterator.prototype, {
	__class__: haxe_iterators_StringKeyValueIterator
	,offset: null
	,s: null
});
var hscript_Const = $hxEnums["hscript.Const"] = { __ename__ : "hscript.Const", __constructs__ : ["CInt","CFloat","CString"]
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["s"],$_)
};
hscript_Const.__empty_constructs__ = [];
var hscript_Expr = $hxEnums["hscript.Expr"] = { __ename__ : "hscript.Expr", __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch","EDoWhile","EMeta","ECheckType"]
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EVar: ($_=function(n,t,e) { return {_hx_index:2,n:n,t:t,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["n","t","e"],$_)
	,EParent: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EBlock: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:5,e:e,f:f,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:6,op:op,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,prefix,e) { return {_hx_index:7,op:op,prefix:prefix,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","prefix","e"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:8,e:e,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","params"],$_)
	,EIf: ($_=function(cond,e1,e2) { return {_hx_index:9,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,EWhile: ($_=function(cond,e) { return {_hx_index:10,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EFor: ($_=function(v,it,e) { return {_hx_index:11,v:v,it:it,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v","it","e"],$_)
	,EBreak: {_hx_index:12,__enum__:"hscript.Expr",toString:$estr}
	,EContinue: {_hx_index:13,__enum__:"hscript.Expr",toString:$estr}
	,EFunction: ($_=function(args,e,name,ret) { return {_hx_index:14,args:args,e:e,name:name,ret:ret,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["args","e","name","ret"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:15,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,EArrayDecl: ($_=function(e) { return {_hx_index:17,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ENew: ($_=function(cl,params) { return {_hx_index:18,cl:cl,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cl","params"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:19,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ETry: ($_=function(e,v,t,ecatch) { return {_hx_index:20,e:e,v:v,t:t,ecatch:ecatch,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","v","t","ecatch"],$_)
	,EObject: ($_=function(fl) { return {_hx_index:21,fl:fl,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["fl"],$_)
	,ETernary: ($_=function(cond,e1,e2) { return {_hx_index:22,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,ESwitch: ($_=function(e,cases,defaultExpr) { return {_hx_index:23,e:e,cases:cases,defaultExpr:defaultExpr,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","cases","defaultExpr"],$_)
	,EDoWhile: ($_=function(cond,e) { return {_hx_index:24,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:25,name:name,args:args,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["name","args","e"],$_)
	,ECheckType: ($_=function(e,t) { return {_hx_index:26,e:e,t:t,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","t"],$_)
};
hscript_Expr.__empty_constructs__ = [hscript_Expr.EBreak,hscript_Expr.EContinue];
var hscript_CType = $hxEnums["hscript.CType"] = { __ename__ : "hscript.CType", __constructs__ : ["CTPath","CTFun","CTAnon","CTParent","CTOpt","CTNamed"]
	,CTPath: ($_=function(path,params) { return {_hx_index:0,path:path,params:params,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["path","params"],$_)
	,CTFun: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["args","ret"],$_)
	,CTAnon: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,CTParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,CTOpt: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,CTNamed: ($_=function(n,t) { return {_hx_index:5,n:n,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["n","t"],$_)
};
hscript_CType.__empty_constructs__ = [];
var hscript_Error = $hxEnums["hscript.Error"] = { __ename__ : "hscript.Error", __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EInvalidPreprocessor","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess","ECustom"]
	,EInvalidChar: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EUnexpected: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["s"],$_)
	,EUnterminatedString: {_hx_index:2,__enum__:"hscript.Error",toString:$estr}
	,EUnterminatedComment: {_hx_index:3,__enum__:"hscript.Error",toString:$estr}
	,EInvalidPreprocessor: ($_=function(msg) { return {_hx_index:4,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,EUnknownVariable: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidIterator: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidOp: ($_=function(op) { return {_hx_index:7,op:op,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["op"],$_)
	,EInvalidAccess: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["f"],$_)
	,ECustom: ($_=function(msg) { return {_hx_index:9,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["msg"],$_)
};
hscript_Error.__empty_constructs__ = [hscript_Error.EUnterminatedString,hscript_Error.EUnterminatedComment];
var hscript_ModuleDecl = $hxEnums["hscript.ModuleDecl"] = { __ename__ : "hscript.ModuleDecl", __constructs__ : ["DPackage","DImport","DClass","DTypedef"]
	,DPackage: ($_=function(path) { return {_hx_index:0,path:path,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["path"],$_)
	,DImport: ($_=function(path,everything) { return {_hx_index:1,path:path,everything:everything,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["path","everything"],$_)
	,DClass: ($_=function(c) { return {_hx_index:2,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["c"],$_)
	,DTypedef: ($_=function(c) { return {_hx_index:3,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["c"],$_)
};
hscript_ModuleDecl.__empty_constructs__ = [];
var hscript_FieldAccess = $hxEnums["hscript.FieldAccess"] = { __ename__ : "hscript.FieldAccess", __constructs__ : ["APublic","APrivate","AInline","AOverride","AStatic","AMacro"]
	,APublic: {_hx_index:0,__enum__:"hscript.FieldAccess",toString:$estr}
	,APrivate: {_hx_index:1,__enum__:"hscript.FieldAccess",toString:$estr}
	,AInline: {_hx_index:2,__enum__:"hscript.FieldAccess",toString:$estr}
	,AOverride: {_hx_index:3,__enum__:"hscript.FieldAccess",toString:$estr}
	,AStatic: {_hx_index:4,__enum__:"hscript.FieldAccess",toString:$estr}
	,AMacro: {_hx_index:5,__enum__:"hscript.FieldAccess",toString:$estr}
};
hscript_FieldAccess.__empty_constructs__ = [hscript_FieldAccess.APublic,hscript_FieldAccess.APrivate,hscript_FieldAccess.AInline,hscript_FieldAccess.AOverride,hscript_FieldAccess.AStatic,hscript_FieldAccess.AMacro];
var hscript_FieldKind = $hxEnums["hscript.FieldKind"] = { __ename__ : "hscript.FieldKind", __constructs__ : ["KFunction","KVar"]
	,KFunction: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"hscript.FieldKind",toString:$estr}; },$_.__params__ = ["f"],$_)
	,KVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.FieldKind",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hscript_FieldKind.__empty_constructs__ = [];
var hscript__$Interp_Stop = $hxEnums["hscript._Interp.Stop"] = { __ename__ : "hscript._Interp.Stop", __constructs__ : ["SBreak","SContinue","SReturn"]
	,SBreak: {_hx_index:0,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SContinue: {_hx_index:1,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SReturn: {_hx_index:2,__enum__:"hscript._Interp.Stop",toString:$estr}
};
hscript__$Interp_Stop.__empty_constructs__ = [hscript__$Interp_Stop.SBreak,hscript__$Interp_Stop.SContinue,hscript__$Interp_Stop.SReturn];
var hscript_Token = $hxEnums["hscript.Token"] = { __ename__ : "hscript.Token", __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot","TMeta","TPrepro"]
	,TEof: {_hx_index:0,__enum__:"hscript.Token",toString:$estr}
	,TConst: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TId: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TOp: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TPOpen: {_hx_index:4,__enum__:"hscript.Token",toString:$estr}
	,TPClose: {_hx_index:5,__enum__:"hscript.Token",toString:$estr}
	,TBrOpen: {_hx_index:6,__enum__:"hscript.Token",toString:$estr}
	,TBrClose: {_hx_index:7,__enum__:"hscript.Token",toString:$estr}
	,TDot: {_hx_index:8,__enum__:"hscript.Token",toString:$estr}
	,TComma: {_hx_index:9,__enum__:"hscript.Token",toString:$estr}
	,TSemicolon: {_hx_index:10,__enum__:"hscript.Token",toString:$estr}
	,TBkOpen: {_hx_index:11,__enum__:"hscript.Token",toString:$estr}
	,TBkClose: {_hx_index:12,__enum__:"hscript.Token",toString:$estr}
	,TQuestion: {_hx_index:13,__enum__:"hscript.Token",toString:$estr}
	,TDoubleDot: {_hx_index:14,__enum__:"hscript.Token",toString:$estr}
	,TMeta: ($_=function(s) { return {_hx_index:15,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TPrepro: ($_=function(s) { return {_hx_index:16,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
};
hscript_Token.__empty_constructs__ = [hscript_Token.TEof,hscript_Token.TPOpen,hscript_Token.TPClose,hscript_Token.TBrOpen,hscript_Token.TBrClose,hscript_Token.TDot,hscript_Token.TComma,hscript_Token.TSemicolon,hscript_Token.TBkOpen,hscript_Token.TBkClose,hscript_Token.TQuestion,hscript_Token.TDoubleDot];
class hscript_Tools {
	static iter(e,f) {
		switch(e._hx_index) {
		case 0:
			let _g = e.c;
			break;
		case 1:
			let _g1 = e.v;
			break;
		case 2:
			let _g2 = e.t;
			let _g3 = e.n;
			let e1 = e.e;
			if(e1 != null) {
				f(e1);
			}
			break;
		case 3:
			let e2 = e.e;
			f(e2);
			break;
		case 4:
			let el = e.e;
			let _g4 = 0;
			while(_g4 < el.length) {
				let e = el[_g4];
				++_g4;
				f(e);
			}
			break;
		case 5:
			let _g5 = e.f;
			let e3 = e.e;
			f(e3);
			break;
		case 6:
			let _g6 = e.op;
			let e21 = e.e2;
			let e11 = e.e1;
			f(e11);
			f(e21);
			break;
		case 7:
			let _g7 = e.prefix;
			let _g8 = e.op;
			let e4 = e.e;
			f(e4);
			break;
		case 8:
			let args = e.params;
			let e5 = e.e;
			f(e5);
			let _g9 = 0;
			while(_g9 < args.length) {
				let a = args[_g9];
				++_g9;
				f(a);
			}
			break;
		case 9:
			let e22 = e.e2;
			let e12 = e.e1;
			let c = e.cond;
			f(c);
			f(e12);
			if(e22 != null) {
				f(e22);
			}
			break;
		case 10:
			let e6 = e.e;
			let c1 = e.cond;
			f(c1);
			f(e6);
			break;
		case 11:
			let _g10 = e.v;
			let e7 = e.e;
			let it = e.it;
			f(it);
			f(e7);
			break;
		case 12:case 13:
			break;
		case 14:
			let _g11 = e.ret;
			let _g12 = e.name;
			let _g13 = e.args;
			let e8 = e.e;
			f(e8);
			break;
		case 15:
			let e9 = e.e;
			if(e9 != null) {
				f(e9);
			}
			break;
		case 16:
			let i = e.index;
			let e10 = e.e;
			f(e10);
			f(i);
			break;
		case 17:
			let el1 = e.e;
			let _g14 = 0;
			while(_g14 < el1.length) {
				let e = el1[_g14];
				++_g14;
				f(e);
			}
			break;
		case 18:
			let _g15 = e.cl;
			let el2 = e.params;
			let _g16 = 0;
			while(_g16 < el2.length) {
				let e = el2[_g16];
				++_g16;
				f(e);
			}
			break;
		case 19:
			let e13 = e.e;
			f(e13);
			break;
		case 20:
			let _g17 = e.t;
			let _g18 = e.v;
			let c2 = e.ecatch;
			let e14 = e.e;
			f(e14);
			f(c2);
			break;
		case 21:
			let fl = e.fl;
			let _g19 = 0;
			while(_g19 < fl.length) {
				let fi = fl[_g19];
				++_g19;
				f(fi.e);
			}
			break;
		case 22:
			let e23 = e.e2;
			let e15 = e.e1;
			let c3 = e.cond;
			f(c3);
			f(e15);
			f(e23);
			break;
		case 23:
			let def = e.defaultExpr;
			let cases = e.cases;
			let e16 = e.e;
			f(e16);
			let _g20 = 0;
			while(_g20 < cases.length) {
				let c = cases[_g20];
				++_g20;
				let _g = 0;
				let _g1 = c.values;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					f(v);
				}
				f(c.expr);
			}
			if(def != null) {
				f(def);
			}
			break;
		case 24:
			let e17 = e.e;
			let c4 = e.cond;
			f(c4);
			f(e17);
			break;
		case 25:
			let e18 = e.e;
			let args1 = e.args;
			let name = e.name;
			if(args1 != null) {
				let _g = 0;
				while(_g < args1.length) {
					let a = args1[_g];
					++_g;
					f(a);
				}
			}
			f(e18);
			break;
		case 26:
			let _g21 = e.t;
			let e19 = e.e;
			f(e19);
			break;
		}
	}
	static map(e,f) {
		let edef;
		switch(e._hx_index) {
		case 0:
			let _g = e.c;
			edef = e;
			break;
		case 1:
			let _g1 = e.v;
			edef = e;
			break;
		case 2:
			let e1 = e.e;
			let t = e.t;
			let n = e.n;
			edef = hscript_Expr.EVar(n,t,e1 != null ? f(e1) : null);
			break;
		case 3:
			let e2 = e.e;
			edef = hscript_Expr.EParent(f(e2));
			break;
		case 4:
			let el = e.e;
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < el.length) {
				let e = el[_g3];
				++_g3;
				_g2.push(f(e));
			}
			edef = hscript_Expr.EBlock(_g2);
			break;
		case 5:
			let fi = e.f;
			let e3 = e.e;
			edef = hscript_Expr.EField(f(e3),fi);
			break;
		case 6:
			let e21 = e.e2;
			let e11 = e.e1;
			let op = e.op;
			edef = hscript_Expr.EBinop(op,f(e11),f(e21));
			break;
		case 7:
			let e4 = e.e;
			let pre = e.prefix;
			let op1 = e.op;
			edef = hscript_Expr.EUnop(op1,pre,f(e4));
			break;
		case 8:
			let args = e.params;
			let e5 = e.e;
			let edef1 = f(e5);
			let _g4 = [];
			let _g5 = 0;
			while(_g5 < args.length) {
				let a = args[_g5];
				++_g5;
				_g4.push(f(a));
			}
			edef = hscript_Expr.ECall(edef1,_g4);
			break;
		case 9:
			let e22 = e.e2;
			let e12 = e.e1;
			let c = e.cond;
			edef = hscript_Expr.EIf(f(c),f(e12),e22 != null ? f(e22) : null);
			break;
		case 10:
			let e6 = e.e;
			let c1 = e.cond;
			edef = hscript_Expr.EWhile(f(c1),f(e6));
			break;
		case 11:
			let e7 = e.e;
			let it = e.it;
			let v = e.v;
			edef = hscript_Expr.EFor(v,f(it),f(e7));
			break;
		case 12:case 13:
			edef = e;
			break;
		case 14:
			let t1 = e.ret;
			let name = e.name;
			let e8 = e.e;
			let args1 = e.args;
			edef = hscript_Expr.EFunction(args1,f(e8),name,t1);
			break;
		case 15:
			let e9 = e.e;
			edef = hscript_Expr.EReturn(e9 != null ? f(e9) : null);
			break;
		case 16:
			let i = e.index;
			let e10 = e.e;
			edef = hscript_Expr.EArray(f(e10),f(i));
			break;
		case 17:
			let el1 = e.e;
			let _g6 = [];
			let _g7 = 0;
			while(_g7 < el1.length) {
				let e = el1[_g7];
				++_g7;
				_g6.push(f(e));
			}
			edef = hscript_Expr.EArrayDecl(_g6);
			break;
		case 18:
			let el2 = e.params;
			let cl = e.cl;
			let _g8 = [];
			let _g9 = 0;
			while(_g9 < el2.length) {
				let e = el2[_g9];
				++_g9;
				_g8.push(f(e));
			}
			edef = hscript_Expr.ENew(cl,_g8);
			break;
		case 19:
			let e13 = e.e;
			edef = hscript_Expr.EThrow(f(e13));
			break;
		case 20:
			let c2 = e.ecatch;
			let t2 = e.t;
			let v1 = e.v;
			let e14 = e.e;
			edef = hscript_Expr.ETry(f(e14),v1,t2,f(c2));
			break;
		case 21:
			let fl = e.fl;
			let _g10 = [];
			let _g11 = 0;
			while(_g11 < fl.length) {
				let fi = fl[_g11];
				++_g11;
				_g10.push({ name : fi.name, e : f(fi.e)});
			}
			edef = hscript_Expr.EObject(_g10);
			break;
		case 22:
			let e23 = e.e2;
			let e15 = e.e1;
			let c3 = e.cond;
			edef = hscript_Expr.ETernary(f(c3),f(e15),f(e23));
			break;
		case 23:
			let def = e.defaultExpr;
			let cases = e.cases;
			let e16 = e.e;
			let edef2 = f(e16);
			let _g12 = [];
			let _g13 = 0;
			while(_g13 < cases.length) {
				let c = cases[_g13];
				++_g13;
				let _g = [];
				let _g1 = 0;
				let _g2 = c.values;
				while(_g1 < _g2.length) {
					let v = _g2[_g1];
					++_g1;
					_g.push(f(v));
				}
				_g12.push({ values : _g, expr : f(c.expr)});
			}
			edef = hscript_Expr.ESwitch(edef2,_g12,def == null ? null : f(def));
			break;
		case 24:
			let e17 = e.e;
			let c4 = e.cond;
			edef = hscript_Expr.EDoWhile(f(c4),f(e17));
			break;
		case 25:
			let e18 = e.e;
			let args2 = e.args;
			let name1 = e.name;
			let edef3;
			if(args2 == null) {
				edef3 = null;
			} else {
				let _g = [];
				let _g1 = 0;
				while(_g1 < args2.length) {
					let a = args2[_g1];
					++_g1;
					_g.push(f(a));
				}
				edef3 = _g;
			}
			edef = hscript_Expr.EMeta(name1,edef3,f(e18));
			break;
		case 26:
			let t3 = e.t;
			let e19 = e.e;
			edef = hscript_Expr.ECheckType(f(e19),t3);
			break;
		}
		return edef;
	}
	static expr(e) {
		return e;
	}
	static mk(e,p) {
		return e;
	}
}
$hxClasses["hscript.Tools"] = hscript_Tools;
hscript_Tools.__name__ = "hscript.Tools";
class js_Boot {
	static isClass(o) {
		return o.__name__;
	}
	static isInterface(o) {
		return o.__isInterface__;
	}
	static isEnum(e) {
		return e.__ename__;
	}
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __implements(o,iface) {
		return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__toStr = null;
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
class js_Browser {
	static get_self() {
		return $global;
	}
	static getLocalStorage() {
		try {
			let s = window.localStorage;
			s.getItem("");
			if(s.length == 0) {
				let key = "_hx_" + Math.random();
				s.setItem(key,key);
				s.removeItem(key);
			}
			return s;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return null;
		}
	}
	static getSessionStorage() {
		try {
			let s = window.sessionStorage;
			s.getItem("");
			if(s.length == 0) {
				let key = "_hx_" + Math.random();
				s.setItem(key,key);
				s.removeItem(key);
			}
			return s;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return null;
		}
	}
	static createXMLHttpRequest() {
		if(typeof XMLHttpRequest != "undefined") {
			return new XMLHttpRequest();
		}
		if(typeof ActiveXObject != "undefined") {
			return new ActiveXObject("Microsoft.XMLHTTP");
		}
		throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
	}
	static alert(v) {
		window.alert(Std.string(v));
	}
}
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.__properties__ = {get_self: "get_self"};
class js_Lib {
	static debug() {
		debugger;
	}
	static alert(v) {
		alert(js_Boot.__string_rec(v,""));
	}
	static eval(code) {
		return eval(code);
	}
	static get_undefined() {
		return undefined;
	}
	static rethrow() {
	}
	static getOriginalException() {
		return null;
	}
	static getNextHaxeUID() {
		return $global.$haxeUID++;
	}
}
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined: "get_undefined"};
class js_html__$CanvasElement_CanvasUtil {
	static getContextWebGL(canvas,attribs) {
		let name = "webgl";
		let ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
		let name1 = "experimental-webgl";
		let ctx1 = canvas.getContext(name1,attribs);
		if(ctx1 != null) {
			return ctx1;
		}
		return null;
	}
}
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
class js_lib_HaxeIterator {
	constructor(jsIterator) {
		this.jsIterator = jsIterator;
		this.lastStep = jsIterator.next();
	}
	hasNext() {
		return !this.lastStep.done;
	}
	next() {
		let v = this.lastStep.value;
		this.lastStep = this.jsIterator.next();
		return v;
	}
	static iterator(jsIterator) {
		return new js_lib_HaxeIterator(jsIterator);
	}
}
$hxClasses["js.lib.HaxeIterator"] = js_lib_HaxeIterator;
js_lib_HaxeIterator.__name__ = "js.lib.HaxeIterator";
Object.assign(js_lib_HaxeIterator.prototype, {
	__class__: js_lib_HaxeIterator
	,jsIterator: null
	,lastStep: null
});
class js_lib_KeyValue {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_lib_KeyValue.__properties__ = {get_value: "get_value",get_key: "get_key"};
class js_lib_ObjectEntry {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_lib_ObjectEntry.__properties__ = {get_value: "get_value",get_key: "get_key"};
var js_node_ChildProcess = require("child_process");
var js_node_DnsErrorCode = require("dns");
var js_node_Dns = require("dns");
var js_node_Fs = require("fs");
var js_node_Http = require("http");
var js_node_Https = require("https");
class js_node_KeyValue {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_node_KeyValue.__properties__ = {get_value: "get_value",get_key: "get_key"};
var js_node_Module = require("module");
var js_node_Path = require("path");
var js_node_Stream = require("stream");
var js_node_Timers = require("timers");
var js_node_Tls = require("tls");
var js_node_Url = require("url");
var js_node_Util = require("util");
var js_node_buffer_Buffer = require("buffer").Buffer;
class js_node_buffer__$Buffer_Helper {
	static bytesOfBuffer(b) {
		let o = Object.create(haxe_io_Bytes.prototype);
		o.length = b.byteLength;
		o.b = b;
		b.bufferValue = b;
		b.hxBytes = o;
		b.bytes = b;
		return o;
	}
}
$hxClasses["js.node.buffer._Buffer.Helper"] = js_node_buffer__$Buffer_Helper;
js_node_buffer__$Buffer_Helper.__name__ = "js.node.buffer._Buffer.Helper";
var js_node_buffer__$Buffer_BufferModule = require("buffer");
var js_node_console_Console = require("console").Console;
var js_node_stream_Readable = require("stream").Readable;
var js_node_stream_Writable = require("stream").Writable;
var js_node_http_Agent = require("http").Agent;
var js_node_http_ClientRequest = require("http").ClientRequest;
var js_node_http_IncomingMessage = require("http").IncomingMessage;
var js_node_net_Server = require("net").Server;
var js_node_http_Server = require("http").Server;
var js_node_http_ServerResponse = require("http").ServerResponse;
var js_node_https_Agent = require("https").Agent;
var js_node_tls_Server = require("tls").Server;
var js_node_https_Server = require("https").Server;
var js_node_stream_Duplex = require("stream").Duplex;
var js_node_net_Socket = require("net").Socket;
class js_node_stream_WritableNewOptionsAdapter {
	static from(options) {
		if(!Object.prototype.hasOwnProperty.call(options,"final")) {
			Object.defineProperty(options,"final",{ get : function() {
				return options.final_;
			}});
		}
		return options;
	}
}
var js_node_tls_TLSSocket = require("tls").TLSSocket;
var js_node_url_URL = require("url").URL;
var js_node_url_URLSearchParams = require("url").URLSearchParams;
class js_node_url_URLSearchParamsEntry {
	static _new(name,value) {
		let this1 = [name,value];
		return this1;
	}
	static get_name(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_node_url_URLSearchParamsEntry.__properties__ = {get_value: "get_value",get_name: "get_name"};
class lib_JsonHandler {
	static canRead(file) {
		return sys_FileSystem.exists(file);
	}
	static log(msg,val) {
		haxe_Log.trace(msg,{ fileName : "Source/lib/JsonHandler.hx", lineNumber : 13, className : "lib.JsonHandler", methodName : "log"});
		return val;
	}
	static read(file) {
		let content = "";
		if(sys_FileSystem.exists(file)) {
			try {
				content = js_node_Fs.readFileSync(file,{ encoding : "utf8"});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				haxe_Log.trace("Could not read file " + file,{ fileName : "Source/lib/JsonHandler.hx", lineNumber : 13, className : "lib.JsonHandler", methodName : "log"});
				content = "";
			}
		}
		try {
			return new haxe_format_JsonParser(content).doParse();
		} catch( _g ) {
			haxe_Log.trace("Could not parse json from file " + file,{ fileName : "Source/lib/JsonHandler.hx", lineNumber : 13, className : "lib.JsonHandler", methodName : "log"});
			return { };
		}
	}
	static write(file,s) {
		try {
			js_node_Fs.writeFileSync(file,haxe_format_JsonPrinter.print(s,null,null));
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			haxe_Log.trace("Error while writing file " + file,{ fileName : "Source/lib/JsonHandler.hx", lineNumber : 38, className : "lib.JsonHandler", methodName : "write"});
		}
	}
}
$hxClasses["lib.JsonHandler"] = lib_JsonHandler;
lib_JsonHandler.__name__ = "lib.JsonHandler";
class lib_Logger {
	static addLog(v,infos) {
		js_node_Fs.writeFileSync("logs.txt",js_node_Fs.readFileSync("logs.txt",{ encoding : "utf8"}) + "\n" + haxe_Log.formatOutput(v,infos));
	}
	static setTrace() {
		lib_Logger.oldTrace = haxe_Log.trace;
		haxe_Log.trace = function(v,infos) {
			lib_Logger.addLog("[" + HxOverrides.dateStr(new Date()) + "] " + v,infos);
			lib_Logger.oldTrace("[" + HxOverrides.dateStr(new Date()) + "] " + v,infos);
		};
		if(!sys_FileSystem.exists("logs.txt")) {
			js_node_Fs.writeFileSync("logs.txt","");
		}
	}
}
lib_Logger.oldTrace = null;
$hxClasses["lib.Logger"] = lib_Logger;
lib_Logger.__name__ = "lib.Logger";
class lib_Modio {
	static makeRequest(full_path) {
		return new Promise(function(resolve,reject) {
			let req = new haxe_http_HttpNodeJs(full_path);
			req.addParameter("port","443");
			req.onData = function(e) {
				haxe_Log.trace("Modio Data",{ fileName : "Source/lib/Modio.hx", lineNumber : 15, className : "lib.Modio", methodName : "makeRequest"});
				resolve(e);
			};
			req.onError = function(e) {
				haxe_Log.trace("Modio Error : " + e,{ fileName : "Source/lib/Modio.hx", lineNumber : 19, className : "lib.Modio", methodName : "makeRequest"});
				reject(e);
			};
			req.onStatus = function(e) {
				haxe_Log.trace("Modio Status : " + e,{ fileName : "Source/lib/Modio.hx", lineNumber : 23, className : "lib.Modio", methodName : "makeRequest"});
			};
			req.request();
		});
	}
}
$hxClasses["lib.Modio"] = lib_Modio;
lib_Modio.__name__ = "lib.Modio";
class lib_Settings {
	static get__settings() {
		if(lib_Settings._settings == null) {
			return lib_Settings.load();
		} else {
			return lib_Settings._settings;
		}
	}
	static load() {
		if(!sys_FileSystem.exists("settings.json")) {
			js_node_Fs.writeFileSync("settings.json",haxe_format_JsonPrinter.print({ users : new haxe_ds_StringMap(), guilds : new haxe_ds_StringMap(), global : { }},null,null));
		}
		return new haxe_format_JsonParser(js_node_Fs.readFileSync("settings.json",{ encoding : "utf8"})).doParse();
	}
	static save() {
		js_node_Fs.writeFileSync("settings.json",haxe_format_JsonPrinter.print(lib_Settings.get__settings(),null,null));
	}
	static set(t,value) {
		t = value;
		lib_Settings.save();
	}
	static getUser(id) {
		let this1 = lib_Settings.get__settings().users;
		if(!Object.prototype.hasOwnProperty.call(this1.h,id)) {
			let this1 = lib_Settings.get__settings().users;
			let value = new haxe_ds_StringMap();
			this1.h[id] = value;
		}
		return lib_Settings.get__settings().users.h[id];
	}
	static getGuild(id) {
		let this1 = lib_Settings.get__settings().guilds;
		if(!Object.prototype.hasOwnProperty.call(this1.h,id)) {
			let this1 = lib_Settings.get__settings().guilds;
			let value = new haxe_ds_StringMap();
			this1.h[id] = value;
		}
		return lib_Settings.get__settings().guilds.h[id];
	}
}
lib_Settings._settings = null;
$hxClasses["lib.Settings"] = lib_Settings;
lib_Settings.__name__ = "lib.Settings";
lib_Settings.__properties__ = {get__settings: "get__settings"};
class lib_UserService {
}
$hxClasses["lib.UserService"] = lib_UserService;
lib_UserService.__name__ = "lib.UserService";
class sys_FileSystem {
	static exists(path) {
		try {
			js_node_Fs.accessSync(path);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return false;
		}
	}
	static rename(path,newPath) {
		js_node_Fs.renameSync(path,newPath);
	}
	static stat(path) {
		return js_node_Fs.statSync(path);
	}
	static fullPath(relPath) {
		try {
			return js_node_Fs.realpathSync(relPath);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return null;
		}
	}
	static absolutePath(relPath) {
		return js_node_Path.resolve(relPath);
	}
	static isDirectory(path) {
		try {
			return js_node_Fs.statSync(path).isDirectory();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return false;
		}
	}
	static createDirectory(path) {
		try {
			js_node_Fs.mkdirSync(path);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "ENOENT") {
				sys_FileSystem.createDirectory(js_node_Path.dirname(path));
				js_node_Fs.mkdirSync(path);
			} else {
				let stat;
				try {
					stat = js_node_Fs.statSync(path);
				} catch( _g ) {
					throw e;
				}
				if(!stat.isDirectory()) {
					throw e;
				}
			}
		}
	}
	static deleteFile(path) {
		js_node_Fs.unlinkSync(path);
	}
	static deleteDirectory(path) {
		if(sys_FileSystem.exists(path)) {
			let _g = 0;
			let _g1 = js_node_Fs.readdirSync(path);
			while(_g < _g1.length) {
				let file = _g1[_g];
				++_g;
				let curPath = path + "/" + file;
				if(sys_FileSystem.isDirectory(curPath)) {
					sys_FileSystem.deleteDirectory(curPath);
				} else {
					js_node_Fs.unlinkSync(curPath);
				}
			}
			js_node_Fs.rmdirSync(path);
		}
	}
	static readDirectory(path) {
		return js_node_Fs.readdirSync(path);
	}
}
$hxClasses["sys.FileSystem"] = sys_FileSystem;
sys_FileSystem.__name__ = "sys.FileSystem";
class sys_io_File {
	static append(path,binary) {
		if(binary == null) {
			binary = true;
		}
		return new sys_io_FileOutput(js_node_Fs.openSync(path,"a"));
	}
	static write(path,binary) {
		if(binary == null) {
			binary = true;
		}
		return new sys_io_FileOutput(js_node_Fs.openSync(path,"w"));
	}
	static read(path,binary) {
		if(binary == null) {
			binary = true;
		}
		return new sys_io_FileInput(js_node_Fs.openSync(path,"r"));
	}
	static getContent(path) {
		return js_node_Fs.readFileSync(path,{ encoding : "utf8"});
	}
	static saveContent(path,content) {
		js_node_Fs.writeFileSync(path,content);
	}
	static getBytes(path) {
		return js_node_buffer__$Buffer_Helper.bytesOfBuffer(js_node_Fs.readFileSync(path));
	}
	static saveBytes(path,bytes) {
		let data = bytes.b;
		js_node_Fs.writeFileSync(path,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length));
	}
	static copy(srcPath,dstPath) {
		let src = js_node_Fs.openSync(srcPath,"r");
		let stat = js_node_Fs.fstatSync(src);
		let dst = js_node_Fs.openSync(dstPath,"w",stat.mode);
		let bytesRead;
		let pos = 0;
		while(true) {
			bytesRead = js_node_Fs.readSync(src,sys_io_File.copyBuf,0,65536,pos);
			if(!(bytesRead > 0)) {
				break;
			}
			js_node_Fs.writeSync(dst,sys_io_File.copyBuf,0,bytesRead);
			pos += bytesRead;
		}
		js_node_Fs.closeSync(src);
		js_node_Fs.closeSync(dst);
	}
}
$hxClasses["sys.io.File"] = sys_io_File;
sys_io_File.__name__ = "sys.io.File";
class sys_io_FileInput extends haxe_io_Input {
	constructor(fd) {
		super();
		this.fd = fd;
		this.pos = 0;
	}
	readByte() {
		let buf = js_node_buffer_Buffer.alloc(1);
		let bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	readBytes(s,pos,len) {
		let data = s.b;
		let buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		let bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
	seek(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	tell() {
		return this.pos;
	}
	eof() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
}
$hxClasses["sys.io.FileInput"] = sys_io_FileInput;
sys_io_FileInput.__name__ = "sys.io.FileInput";
sys_io_FileInput.__super__ = haxe_io_Input;
Object.assign(sys_io_FileInput.prototype, {
	__class__: sys_io_FileInput
	,fd: null
	,pos: null
});
class sys_io_FileOutput extends haxe_io_Output {
	constructor(fd) {
		super();
		this.fd = fd;
		this.pos = 0;
	}
	writeByte(b) {
		let buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	writeBytes(s,pos,len) {
		let data = s.b;
		let buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		let wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
	seek(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	tell() {
		return this.pos;
	}
}
$hxClasses["sys.io.FileOutput"] = sys_io_FileOutput;
sys_io_FileOutput.__name__ = "sys.io.FileOutput";
sys_io_FileOutput.__super__ = haxe_io_Output;
Object.assign(sys_io_FileOutput.prototype, {
	__class__: sys_io_FileOutput
	,fd: null
	,pos: null
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__ : "sys.io.FileSeek", __constructs__ : ["SeekBegin","SeekCur","SeekEnd"]
	,SeekBegin: {_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__empty_constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
CommandHandler.addCommand("ghost",new commands_Ghost());
CommandHandler.addCommand("mod",new commands_Mod());
CommandHandler.addCommand("kick",new commands_Moderation("kick"));
CommandHandler.addCommand("ban",new commands_Moderation("ban"));
CommandHandler.addCommand("warn",new commands_Moderation("warn"));
CommandHandler.addCommand("mute",new commands_Moderation("mute"));
CommandHandler.addCommand("purge",new commands_Moderation("purge"));
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
Bot.prefix = "]";
hscript_Parser.p1 = 0;
hscript_Parser.tokenMin = 0;
hscript_Parser.tokenMax = 0;
CommandHandler.eval = new lib_EvalHandler();
CommandHandler.bot = Bot.bot;
CommandHandler.has_init = false;
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
StringTools.winMetaCharacters = haxe_SysTools.winMetaCharacters;
StringTools.MIN_SURROGATE_CODE_POINT = 65536;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Serializer.BASE64_CODES = null;
haxe_http_HttpBase._hx_skip_constructor = false;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	let this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.LN2 = 0.6931471805599453;
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_io_UInt8Array.BYTES_PER_ELEMENT = 1;
sys_io_File.copyBufLen = 65536;
sys_io_File.copyBuf = js_node_buffer_Buffer.alloc(65536);
Bot.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
